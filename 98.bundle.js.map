{"version":3,"file":"98.bundle.js","mappings":"uPAYA,MAAMA,EACJ,WAAAC,GACEC,KAAKC,aAAe,CACtB,CACA,aAAAC,CAAcC,GACZ,MAAMC,EAAgB,IAAIC,EAAA,EAAa,CACrCC,iBAAkB,CAAEC,MAAO,IAAIC,EAAA,EAAUC,KAAM,eAC/CC,OAAQ,CAAEH,MAAO,IAAII,aAAa,CAAC,EAAG,EAAG,EAAG,IAAKF,KAAM,aACvDG,OAAQ,CAAEL,MAAO,EAAGE,KAAM,SAE5BT,KAAKC,aAAeE,EAASU,OAAOC,qBACpC,MAAMC,GAAa,OAA4B,CAC7CC,KAAM,WACNC,KAAM,CACJC,EAAA,GACA,EAAAC,EAAA,GAAwBnB,KAAKC,cAC7BmB,EAAA,GACAC,EAAA,KAGJrB,KAAKsB,OAAS,IAAIC,EAAA,EAAO,CACvBR,aACAS,UAAW,CAETpB,kBAGN,CACA,OAAAqB,CAAQC,EAAcC,GACpB,MAAMC,EAAUD,EAAWC,QACrBN,EAASM,EAAQC,cAAgB7B,KAAKsB,OACtCnB,EAAWuB,EAAavB,SACxB2B,EAAgB3B,EAAS4B,iBACzB,QACJC,EAAO,aACPC,GACEH,EAAcI,qBAAqBN,GACjCO,EAAUhC,EAASgC,QACzBA,EAAQC,YAAYJ,EAAQK,SAAUf,EAAOP,YAC7C,MAAMuB,EAA0BnC,EAASoC,eAAeC,UACxDL,EAAQM,aAAa,EAAGH,EAAyBhB,EAAOP,YACxD,MAAM2B,EAAiBvC,EAASwC,YAAYC,aAAaC,oBAAoBvB,EAAOE,UAAUpB,eAAe,GAC7G+B,EAAQM,aAAa,EAAGC,EAAgBpB,EAAOP,YAC/C,MAAM+B,EAAUb,EAAaA,aAC7B,IAAIc,EAAW,KACf,IAAK,IAAIC,EAAI,EAAGA,EAAIf,EAAagB,gBAAiBD,IAAK,CACrD,MAAME,EAAQJ,EAAQE,GAWtB,GAVIE,EAAMH,WAAaA,IACrBA,EAAWG,EAAMH,SACjBZ,EAAQgB,uCACNnB,EAAQK,SACRf,EAAOP,WACPW,EAAa0B,MACbF,EAAMH,WAGVzB,EAAO+B,OAAO,GAAKH,EAAMV,WACpBU,EAAMI,aAAc,CACvB,MAAMC,EAAeL,EAAMM,SAC3BN,EAAMV,WAAY,EAAAiB,EAAA,GAChBF,EAAaC,SACbD,EAAaG,MACb1D,KAAKC,cAEPiD,EAAMI,aAAenD,EAASqC,UAAUmB,aACtCT,EAAMV,UACNlB,EAAOP,WACP,EAEJ,CACAoB,EAAQM,aAAa,EAAGS,EAAMV,UAAWlB,EAAOP,YAChDoB,EAAQyB,kBAAkBC,YAAYX,EAAMY,KAAM,EAAGZ,EAAMa,MAC7D,CACF,CACA,OAAAC,GACEhE,KAAKsB,OAAO0C,SAAQ,GACpBhE,KAAKsB,OAAS,IAChB,EAGFxB,EAAmBmE,UAAY,CAC7BxD,KAAM,CACJ,KAAcyD,oBAEhBlD,KAAM,Y,iCCrFR,MAAMmD,EACJ,IAAAC,GACE,MAAMrD,GAAa,OAA4B,CAC7CC,KAAM,OACNC,KAAM,CACJG,EAAA,GACAiD,EAAA,EACAhD,EAAA,KAGJrB,KAAKsE,QAAU,IAAI/C,EAAA,EAAO,CACxBR,aACAS,UAAW,CACT+C,SAAUC,EAAA,EAAQC,MAAMC,QACxBC,SAAUH,EAAA,EAAQC,MAAMC,QAAQE,MAChCC,gBAAiB,CACfC,eAAgB,CAAErE,KAAM,cAAeF,MAAO,IAAIC,EAAA,MAI1D,CACA,OAAAiB,CAAQsD,EAAUC,GAChB,MAAM7E,EAAW4E,EAAS5E,SAC1B,IAAImB,EAAS0D,EAAKV,QAClB,GAAKhD,GAGE,IAAKA,EAAOP,WAEjB,YADA,EAAAkE,EAAA,GAAK,gCAAiCD,EAAK1D,aAH3CA,EAAStB,KAAKsE,QACdhD,EAAO+B,OAAO,GAAKlD,EAAS+E,QAAQC,oBAAoBH,EAAKE,SAK/D,MAAMnE,EAAaO,EAAOP,WAI1B,GAHIA,EAAWqE,2BACb9D,EAAO+B,OAAO,GAAKlD,EAASoC,eAAeC,WAEzCzB,EAAWsE,wBAAyB,CACtC,MAAMjF,EAAgB2E,EAAS3E,cAC/BkB,EAAO+B,OAAO,GAAKlD,EAASwC,YAAYC,aAAaC,oBAAoBzC,GAAe,EAC1F,CACAD,EAASgC,QAAQmD,KAAK,CACpBjD,SAAU2C,EAAKO,UACfjE,SACA8B,MAAO4B,EAAK5B,OAEhB,CACA,OAAAY,GACEhE,KAAKsE,QAAQN,SAAQ,GACrBhE,KAAKsE,QAAU,IACjB,EAGFH,EAAeF,UAAY,CACzBxD,KAAM,CACJ,KAAcyD,oBAEhBlD,KAAM,Q,cC7DR,MAAMwE,EAAYC,EAAA,EAAMC,QACxB,MAAMC,EACJ,KAAA5B,CAAM6B,EAAWvD,EAAUf,GACzB,MAAMnB,EAAWyF,EAAUzF,SACrBgC,EAAUhC,EAASgC,QACnB0D,EAAUvE,EAAOP,WACvBf,KAAKsE,QAAUhD,EACftB,KAAKuF,UAAYlD,EACjBF,EAAQC,YAAYC,EAAUwD,GAC9BL,EAAUM,UAAY,SACtB3F,EAAS4F,SAASC,YAChB3D,EACAwD,EACAL,GAEF,MAAMlD,EAA0BnC,EAASoC,eAAeC,UACxDL,EAAQ8D,eAAe,GACvB9D,EAAQM,aAAa,EAAGH,EAAyBuD,EACnD,CACA,OAAApE,CAAQmE,EAAW1C,GACjB,MAAM2C,EAAU7F,KAAKsE,QAAQvD,WACvBZ,EAAWyF,EAAUzF,SACrBgC,EAAUhC,EAASgC,QACzB,IAAKe,EAAMV,UAAW,CACpB,MAAMe,EAAeL,EAAMM,SAC3BN,EAAMV,WAAY,EAAAiB,EAAA,GAChBF,EAAaC,SACbD,EAAaG,MACbvD,EAASU,OAAOC,qBAEpB,CACA0E,EAAUM,UAAY5C,EAAM4C,UAC5B,MAAMxC,EAAenD,EAASqC,UAAUmB,aACtCT,EAAMV,UACNqD,EACA,GAEIE,EAAW5F,EAAS4F,SAASC,YACjChG,KAAKuF,UACLM,EACAL,EACAtC,EAAMH,UAERG,EAAMV,UAAU0D,OAAO/F,EAASgG,UAAUzC,OAC1CvB,EAAQiE,YAAYL,GACpB5D,EAAQyB,kBAAkBnB,aAAa,EAAGa,GAC1CnB,EAAQyB,kBAAkBC,YAAYX,EAAMY,KAAM,EAAGZ,EAAMa,MAC7D,EAGF4B,EAAgB1B,UAAY,CAC1BxD,KAAM,CACJ,KAAcyD,oBAEhBlD,KAAM,S,iCCxDR,MAAMqF,EACJ,WAAAtG,CAAYI,GACVH,KAAKsG,MAAwBC,OAAOC,OAAO,MAC3CxG,KAAKyG,UAAYtG,EACjBH,KAAKyG,UAAUC,aAAaC,eAAe3G,KAAM,QACnD,CACA,aAAAE,CAAc0G,GACZ5G,KAAK6G,KAAOD,CACd,CACA,YAAAjD,CAAanB,EAAWqD,EAASiB,GAG/B,OAFAtE,EAAUuE,aACW/G,KAAKsG,MAAM9D,EAAUwE,OAAShH,KAAKiH,iBAAiBzE,EAAWqD,EAASiB,EAE/F,CACA,gBAAAG,CAAiBC,EAAOrB,EAASiB,GAC/B,MAAMK,EAASnH,KAAK6G,KAAKM,OACnBC,EAAcvB,EAAQwB,OAAOP,GAC7BQ,EAAU,GACVnH,EAAWH,KAAKyG,UACtB,IAAK,MAAMc,KAAKH,EAAa,CAC3B,MAAMI,EAAWN,EAAM1F,UAAU+F,IAAML,EAAM1F,UAAU4F,EAAYG,IACnE,IAAIE,EACJ,GAA+B,iBAA3BD,EAASE,cAAkC,CAC7C,MAAMC,EAAeH,EACrBrH,EAASyH,IAAIC,mBAAmBF,GAChC,MAAMG,EAASH,EAAaG,OAC5BL,EAAc,CACZK,OAAQ3H,EAAS2H,OAAOC,aAAaD,GACrCE,OAAQ,EACRlE,KAAMgE,EAAOG,WAAWnE,KAE5B,MAAO,GAA+B,WAA3B0D,EAASE,cAA4B,CAC9C,MAAMI,EAASN,EACfC,EAAc,CACZK,OAAQ3H,EAAS2H,OAAOC,aAAaD,GACrCE,OAAQ,EACRlE,KAAMgE,EAAOG,WAAWnE,KAE5B,MAAO,GAA+B,mBAA3B0D,EAASE,cAAoC,CACtD,MAAMQ,EAAiBV,EACvBC,EAAc,CACZK,OAAQ3H,EAAS2H,OAAOC,aAAaG,EAAeJ,QACpDE,OAAQE,EAAeF,OACvBlE,KAAMoE,EAAepE,KAEzB,MAAO,GAA+B,mBAA3B0D,EAASE,cAAoC,CACtD,MAAMS,EAAUX,EAChBC,EAActH,EAAS+E,QAAQkD,cAAcD,EAC/C,MAAO,GAA+B,kBAA3BX,EAASE,cAAmC,CACrD,MAAMxC,EAAUsC,EAChBC,EAActH,EAAS+E,QAAQmD,aAAanD,GAASoD,WAAW,CAAC,EACnE,CACAhB,EAAQiB,KAAK,CACXC,QAASpB,EAAYG,GACrBC,SAAUC,GAEd,CACA,MAAMJ,EAASlH,EAASmB,OAAOmH,eAAe5C,GAAS6C,WAAW5B,GAC5DxD,EAAe6D,EAAOwB,gBAAgB,CAC1CtB,SACAC,YAGF,OADAtH,KAAKsG,MAAMY,EAAMF,MAAQ1D,EAClBA,CACT,CACA,OAAAU,GACE,IAAK,MAAM4E,KAAOrC,OAAOsC,KAAK7I,KAAKsG,OACjCtG,KAAKsG,MAAMsC,GAAO,KAEpB5I,KAAKsG,MAAQ,KACbtG,KAAKyG,UAAY,IACnB,EAGFJ,EAAgBpC,UAAY,CAC1BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,a,cC7ER,MAAM+H,EACJ,WAAAhJ,CAAYI,GACVH,KAAKgJ,YAA8BzC,OAAOC,OAAO,MACjDxG,KAAKiJ,gBAAkB,GACvB9I,EAASuG,aAAaC,eAAe3G,KAAM,cAC7C,CACA,aAAAE,CAAc0G,GACZ5G,KAAK6G,KAAOD,CACd,CACA,YAAAmB,CAAaD,GACX,OAAO9H,KAAKgJ,YAAYlB,EAAOoB,MAAQlJ,KAAKmJ,gBAAgBrB,EAC9D,CACA,YAAAsB,CAAatB,GACX,MAAMuB,EAAYrJ,KAAKgJ,YAAYlB,EAAOoB,MAAQlJ,KAAKmJ,gBAAgBrB,GACjEwB,EAAOxB,EAAOwB,KAYpB,OAXIxB,EAAOyB,WAAaD,IACtBxB,EAAOyB,UAAY,EACnBvJ,KAAK6G,KAAKM,OAAOqC,MAAMC,YACrBJ,EACA,EACAC,EAAKxB,OACL,GAECA,EAAO4B,aAAeJ,EAAKK,YAAc,GAAI,IAG3CN,CACT,CAEA,UAAAO,GACE,IAAK,MAAMC,KAAM7J,KAAKgJ,YACpBhJ,KAAKgJ,YAAYa,GAAI7F,UAEvBhE,KAAKgJ,YAAc,CAAC,CACtB,CACA,eAAAG,CAAgBrB,GACT9H,KAAKgJ,YAAYlB,EAAOoB,OAC3BpB,EAAOgC,GAAG,SAAU9J,KAAKoJ,aAAcpJ,MACvC8H,EAAOgC,GAAG,SAAU9J,KAAK+J,eAAgB/J,MACzC8H,EAAOgC,GAAG,UAAW9J,KAAKgK,gBAAiBhK,MAC3CA,KAAKiJ,gBAAgBV,KAAKT,IAE5B,MAAMuB,EAAYrJ,KAAK6G,KAAKM,OAAO8C,aAAanC,EAAOG,YAOvD,OANAH,EAAOyB,UAAY,EACfzB,EAAOwB,QACT,EAAAY,EAAA,GAASpC,EAAOwB,KAAKxB,OAAQuB,EAAUc,kBACvCd,EAAUe,SAEZpK,KAAKgJ,YAAYlB,EAAOoB,KAAOG,EACxBA,CACT,CACA,cAAAU,CAAejC,GACK9H,KAAKgJ,YAAYlB,EAAOoB,KAChClF,UACV8D,EAAOyB,UAAY,EACnBvJ,KAAKgJ,YAAYlB,EAAOoB,KAAOlJ,KAAKmJ,gBAAgBrB,EACtD,CAKA,eAAAkC,CAAgBlC,GACd9H,KAAKiJ,gBAAgBoB,OAAOrK,KAAKiJ,gBAAgBqB,QAAQxC,GAAS,GAClE9H,KAAKuK,eAAezC,EACtB,CACA,OAAA9D,GACEhE,KAAKiJ,gBAAgBuB,QAAS1C,GAAW9H,KAAKuK,eAAezC,IAC7D9H,KAAKiJ,gBAAkB,KACvBjJ,KAAKgJ,YAAc,IACrB,CACA,cAAAuB,CAAezC,GACK9H,KAAKgJ,YAAYlB,EAAOoB,KAChClF,UACV8D,EAAO2C,IAAI,SAAUzK,KAAKoJ,aAAcpJ,MACxC8H,EAAO2C,IAAI,SAAUzK,KAAK+J,eAAgB/J,MAC1C8H,EAAO2C,IAAI,UAAWzK,KAAKgK,gBAAiBhK,MAC5CA,KAAKgJ,YAAYlB,EAAOoB,KAAO,IACjC,EAGFH,EAAgB9E,UAAY,CAC1BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,UCrFR,MAAM0J,EACJ,WAAA3K,CAAYI,GACVH,KAAK2K,gBAAkB,GACvB3K,KAAKyG,UAAYtG,CACnB,CACA,OAAAyK,CAAQC,GACF7K,KAAK2K,kBAAoBE,IAE7B7K,KAAK2K,gBAAkBE,EACvB7K,KAAKyG,UAAUV,SAAS+E,aAAaD,GACvC,CACA,OAAA7G,GACEhE,KAAKyG,UAAY,KACjBzG,KAAK2K,gBAAkB,IACzB,EAGFD,EAAmBzG,UAAY,CAC7BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,a,cCpBR,MAAM+J,EAIJ,WAAAhL,CAAYI,GACVH,KAAKyG,UAAYtG,CACnB,CACA,UAAMiE,CAAK4G,GACT,OAAIhL,KAAKiL,eAETjL,KAAKiL,aAAejL,KAAKkL,wBAAwBF,GAASG,KAAMvE,IAC9D5G,KAAK4G,IAAMA,EACX5G,KAAKyG,UAAU2E,QAAQlL,cAAcmL,KAAKrL,KAAK4G,QAHxC5G,KAAKiL,YAMhB,CAKA,aAAA/K,CAAc0G,GACZ5G,KAAKyG,UAAUG,IAAMA,CACvB,CAQA,6BAAMsE,CAAwBF,GAC5B,MAAMM,QAAgB,IAAWC,MAAMC,eAAe5E,IAAI6E,eAAe,CACvEC,gBAAiBV,EAAQU,gBACzBC,qBAAsBX,EAAQW,uBAE1BC,EAAmB,CACvB,yBACA,2BACA,4BACAC,OAAQC,GAAYR,EAAQS,SAASC,IAAIF,IACrC3E,QAAemE,EAAQW,cAAc,CACzCL,qBAEF,MAAO,CAAEN,UAASnE,SACpB,CACA,OAAAnD,GACEhE,KAAK4G,IAAM,KACX5G,KAAKyG,UAAY,IACnB,EAGFsE,EAAgB9G,UAAY,CAC1BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,UAGR+J,EAAgBmB,eAAiB,CAK/BR,qBAAiB,EAKjBC,sBAAsB,GCrExB,MAAMQ,EACJ,WAAApM,CAAYI,GACVH,KAAKoM,gBAAkC7F,OAAOC,OAAO,MACrDxG,KAAKqM,mBAAqC9F,OAAOC,OAAO,MACxDxG,KAAKyG,UAAYtG,CACnB,CACA,WAAAmM,GACEtM,KAAKuM,gBAAkB,IAAIC,QAASC,IAClCzM,KAAK0M,wBAA0BD,IAEjCzM,KAAK2M,eAAiB3M,KAAKyG,UAAUG,IAAIO,OAAOyF,sBAClD,CACA,eAAAC,CAAgBC,GACd9M,KAAK+M,gBACL/M,KAAKgN,cACLhN,KAAK4D,kBAAoB5D,KAAK2M,eAAeE,gBAAgBC,EAAgB7E,WAC/E,CACA,aAAA8E,GACM/M,KAAK4D,mBACP5D,KAAK4D,kBAAkBqJ,MAEzBjN,KAAK4D,kBAAoB,IAC3B,CACA,WAAAsJ,CAAYC,GACVnN,KAAK4D,kBAAkBsJ,YAAYC,EAASC,EAAGD,EAASE,EAAGF,EAASG,MAAOH,EAASI,OAAQ,EAAG,EACjG,CACA,sCAAApK,CAAuCd,EAAUwD,EAASzC,EAAOL,GAC/D,MAAMgD,EAAW/F,KAAKyG,UAAUV,SAASC,YAAY3D,EAAUwD,EAASzC,EAAOL,GAC/E/C,KAAKoG,YAAYL,EACnB,CACA,WAAAK,CAAYL,GACN/F,KAAKwN,iBAAmBzH,IAE5B/F,KAAKwN,eAAiBzH,EACtB/F,KAAK4D,kBAAkBwC,YAAYL,GACrC,CACA,gBAAA0H,CAAiBC,EAAO5F,GAClB9H,KAAKqM,mBAAmBqB,KAAW5F,IAEvC9H,KAAKqM,mBAAmBqB,GAAS5F,EACjC9H,KAAK4D,kBAAkB+J,gBAAgBD,EAAO1N,KAAKyG,UAAUqB,OAAOsB,aAAatB,IACnF,CACA,eAAA8F,CAAgB9F,GACd,GAAI9H,KAAK6N,oBAAsB/F,EAC7B,OACF9H,KAAK6N,kBAAoB/F,EACzB,MAAMgG,EAAgD,IAAlChG,EAAOwB,KAAKyE,kBAA0B,SAAW,SACrE/N,KAAK4D,kBAAkBoK,eAAehO,KAAKyG,UAAUqB,OAAOsB,aAAatB,GAASgG,EACpF,CACA,cAAA7H,CAAeyH,GACb1N,KAAKoM,gBAAgBsB,GAAS,IAChC,CACA,YAAAjL,CAAaiL,EAAOlL,EAAWqD,GAC7B,GAAI7F,KAAKoM,gBAAgBsB,KAAWlL,EAClC,OACFxC,KAAKoM,gBAAgBsB,GAASlL,EAC9BA,EAAU0D,OAAOlG,KAAKyG,UAAUN,UAAUzC,OAC1C,MAAMJ,EAAetD,KAAKyG,UAAUjE,UAAUmB,aAAanB,EAAWqD,EAAS6H,GAC/E1N,KAAK4D,kBAAkBnB,aAAaiL,EAAOpK,EAC7C,CACA,WAAAlB,CAAYC,EAAUwD,GACpB,MAAMoI,EAAgBjO,KAAKyG,UAAUV,SAASmI,qBAAqB7L,EAAUwD,GAC7E,IAAK,MAAM7C,KAAKiL,EACdjO,KAAKyN,iBAAiBzK,EAAGX,EAAS8L,WAAWF,EAAcjL,IAAI8E,QAE7DzF,EAAS+L,aACXpO,KAAK4N,gBAAgBvL,EAAS+L,YAElC,CACA,oBAAAC,CAAqB/M,EAAQgN,GAC3B,IAAK,MAAMtL,KAAK1B,EAAO+B,OAAQ,CAC7B,MAAMb,EAAYlB,EAAO+B,OAAOL,GAC3BsL,GACHtO,KAAKuO,eAAe/L,GAEtBxC,KAAKyC,aAAaO,EAAGR,EAAWlB,EAAOP,WACzC,CACF,CACA,cAAAwN,CAAe/L,GACb,IAAK,MAAM+E,KAAK/E,EAAUhB,UAAW,CACnC,MAAMgG,EAAWhF,EAAUhB,UAAU+F,GACjCC,EAASgH,gBACXxO,KAAKyG,UAAUmB,IAAIC,mBAAmBL,EAE1C,CACF,CACA,IAAAlC,CAAK0F,GACH,MAAM,SAAE3I,EAAQ,OAAEf,EAAM,MAAE8B,EAAK,SAAEL,EAAQ,KAAEe,EAAI,MAAEC,EAAK,cAAE0K,EAAa,SAAEH,GAAatD,EACpFhL,KAAKmD,uCAAuCd,EAAUf,EAAOP,WAAYqC,EAAOL,GAChF/C,KAAKoC,YAAYC,EAAUf,EAAOP,YAClCf,KAAKqO,qBAAqB/M,EAAQgN,GAC9BjM,EAAS+L,YACXpO,KAAK4D,kBAAkBC,YACrBC,GAAQzB,EAAS+L,YAAY9E,KAAKoF,OAClCD,GAAiBpM,EAASoM,cAC1B1K,GAAS,GAGX/D,KAAK4D,kBAAkB0B,KAAKxB,GAAQzB,EAASsM,UAAWF,GAAiBpM,EAASoM,cAAe1K,GAAS,EAE9G,CACA,gBAAA6K,GACM5O,KAAK4D,oBACP5D,KAAK4D,kBAAkBqJ,MACvBjN,KAAK4D,kBAAoB,KAE7B,CACA,UAAAiL,GACE7O,KAAK4O,mBACL5O,KAAK6G,KAAKM,OAAOqC,MAAMsF,OAAO,CAAC9O,KAAK2M,eAAeoC,WACnD/O,KAAK0M,0BACL1M,KAAK2M,eAAiB,IACxB,CAIA,iBAAAqC,GACE,MAAM/G,EAAajI,KAAKyG,UAAUwI,aAAaC,QAAQC,cACrDnP,KAAKyG,UAAUwI,aAAaA,cAC5B,EACA,CAAC,EAAG,EAAG,EAAG,IAEZjP,KAAK4D,kBAAoB5D,KAAK2M,eAAeE,gBAAgB5E,GAC7D,MAAMmH,EAAgBpP,KAAKwN,eACrB6B,EAAoB,IAAKrP,KAAKqM,oBAC9BiD,EAAmBtP,KAAK6N,kBACxB0B,EAAiB,IAAKvP,KAAKoM,iBACjCpM,KAAKgN,cACL,MAAMG,EAAWnN,KAAKyG,UAAUwI,aAAa9B,SAC7CnN,KAAK4D,kBAAkBsJ,YAAYC,EAASC,EAAGD,EAASE,EAAGF,EAASG,MAAOH,EAASI,OAAQ,EAAG,GAC/FvN,KAAKoG,YAAYgJ,GACjB,IAAK,MAAMpM,KAAKqM,EACdrP,KAAKyN,iBAAiBzK,EAAGqM,EAAkBrM,IAE7C,IAAK,MAAMA,KAAKuM,EACdvP,KAAKyC,aAAaO,EAAGuM,EAAevM,GAAI,MAE1ChD,KAAK4N,gBAAgB0B,EACvB,CACA,WAAAtC,GACE,IAAK,IAAIhK,EAAI,EAAGA,EAAI,GAAIA,IACtBhD,KAAKoM,gBAAgBpJ,GAAK,KAC1BhD,KAAKqM,mBAAmBrJ,GAAK,KAE/BhD,KAAK6N,kBAAoB,KACzB7N,KAAKwN,eAAiB,IACxB,CACA,OAAAxJ,GACEhE,KAAKyG,UAAY,KACjBzG,KAAK6G,KAAO,KACZ7G,KAAKoM,gBAAkB,KACvBpM,KAAKqM,mBAAqB,KAC1BrM,KAAK6N,kBAAoB,KACzB7N,KAAKwN,eAAiB,IACxB,CACA,aAAAtN,CAAc0G,GACZ5G,KAAK6G,KAAOD,CACd,EAGFuF,EAAiBlI,UAAY,CAC3BxD,KAAM,CAAC,KAAcqI,cACrB9H,KAAM,UACNwO,SAAU,GCnKZ,MAAMC,EACJ,WAAA1P,CAAYI,GACVH,KAAKyG,UAAYtG,CACnB,CACA,aAAAD,GACEF,KAAK0P,YAAc1P,KAAKyG,UAAUU,OAAOP,IAAIO,OAAOtG,OAAO8O,iCAC3D3P,KAAKc,qBAAuBd,KAAK0P,WACnC,CACA,OAAA1L,GACA,EAGFyL,EAAgBxL,UAAY,CAC1BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,U,cCfR,MAAM4O,EACJ,WAAA7P,CAAYI,GACVH,KAAK6P,0BAA4CtJ,OAAOC,OAAO,MAC/DxG,KAAKyG,UAAYtG,EACjBA,EAAS8O,aAAaa,qBAAqBC,IAAI/P,KACjD,CACA,oBAAA8P,CAAqBb,GACnB,IAAIe,EAAehQ,KAAK6P,0BAA0BZ,EAAa/F,KAC1D8G,IACHA,EAAehQ,KAAK6P,0BAA0BZ,EAAa/F,KAAO,CAChE+G,YAAa,IAAcC,SAC3BC,iBAAkB,IAGtBnQ,KAAKoQ,oBAAsBnB,EAC3BjP,KAAKqQ,eAAeL,EAAaC,YAAaD,EAAaG,iBAC7D,CACA,cAAAE,CAAeJ,EAAaE,GAC1B,MAAMH,EAAehQ,KAAK6P,0BAA0B7P,KAAKoQ,oBAAoBlH,KAC7E8G,EAAaC,YAAcA,EAC3BD,EAAaG,iBAAmBA,EAChC,MAAMhQ,EAAWH,KAAKyG,UACtBtG,EAAS4F,SAASsK,eAAeJ,GACjC9P,EAASgC,QAAQyB,kBAAkB0M,oBAAoBH,EACzD,CACA,OAAAnM,GACEhE,KAAKyG,UAAUwI,aAAaa,qBAAqBS,OAAOvQ,MACxDA,KAAKyG,UAAY,KACjBzG,KAAKoQ,oBAAsB,KAC3BpQ,KAAK6P,0BAA4B,IACnC,EAGFD,EAAiB3L,UAAY,CAC3BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,W,cCxCR,MAAMwP,EAAuB,CAC3BC,IAAK,CAAEC,MAAO,EAAG5M,KAAM,GACvB6M,IAAK,CAAED,MAAO,EAAG5M,KAAM,GACvB8M,IAAK,CAAEF,MAAO,EAAG5M,KAAM,GACvB+M,IAAK,CAAEH,MAAO,EAAG5M,KAAM,GACvB,YAAa,CAAE4M,MAAO,EAAG5M,KAAM,GAC/B,YAAa,CAAE4M,MAAO,EAAG5M,KAAM,GAC/B,YAAa,CAAE4M,MAAO,EAAG5M,KAAM,GAC/B,YAAa,CAAE4M,MAAO,EAAG5M,KAAM,GAC/B,YAAa,CAAE4M,MAAO,GAAI5M,KAAM,IAChC,YAAa,CAAE4M,MAAO,GAAI5M,KAAM,IAChC,YAAa,CAAE4M,MAAO,GAAI5M,KAAM,IAChC,YAAa,CAAE4M,MAAO,EAAG5M,KAAM,GAC/B,YAAa,CAAE4M,MAAO,GAAI5M,KAAM,IAChC,YAAa,CAAE4M,MAAO,GAAI5M,KAAM,IAChC,YAAa,CAAE4M,MAAO,GAAI5M,KAAM,IAChC,YAAa,CAAE4M,MAAO,EAAG5M,KAAM,GAC/B,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,GACjC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,GAAI5M,KAAM,IAClC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,GAAI5M,KAAM,IAClC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,GAAI5M,KAAM,IAClC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,GAAI5M,KAAM,IAClC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,GAAI5M,KAAM,IAClC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,IACjC,cAAe,CAAE4M,MAAO,GAAI5M,KAAM,IAClC,cAAe,CAAE4M,MAAO,EAAG5M,KAAM,KAEnC,SAASgN,EAAsBC,GAC7B,MAAMC,EAAcD,EAAYE,IAAK3H,IAAS,CAC5CA,OACAtB,OAAQ,EACRlE,KAAM,KAER,IAAIkE,EAAS,EACb,IAAK,IAAIhF,EAAI,EAAGA,EAAIgO,EAAYtC,OAAQ1L,IAAK,CAC3C,MAAMkO,EAAaF,EAAYhO,GAC/B,IAAIc,EAAO0M,EAAqBU,EAAW5H,KAAK7I,MAAMqD,KACtD,MAAM4M,EAAQF,EAAqBU,EAAW5H,KAAK7I,MAAMiQ,MACzD,IAAKF,EAAqBU,EAAW5H,KAAK7I,MACxC,MAAM,IAAI0Q,MAAM,gDAAgDD,EAAW5H,KAAK7I,QAE9EyQ,EAAW5H,KAAKxF,KAAO,IACzBA,EAAOsN,KAAKC,IAAIvN,EAAM4M,GAASQ,EAAW5H,KAAKxF,MAEjDkE,EAASoJ,KAAKE,KAAKtJ,EAAS0I,GAASA,EACrCQ,EAAWpN,KAAOA,EAClBoN,EAAWlJ,OAASA,EACpBA,GAAUlE,CACZ,CAEA,OADAkE,EAAkC,GAAzBoJ,KAAKE,KAAKtJ,EAAS,IACrB,CAAEgJ,cAAalN,KAAMkE,EAC9B,C,wBC1DA,SAASuJ,EAAsBL,EAAYM,GACzC,MAAM,KAAE1N,EAAI,MAAE4M,GAAUF,EAAqBU,EAAW5H,KAAK7I,MACvDgR,GAAaf,EAAQ5M,GAAQ,EAC7BwF,EAAO4H,EAAW5H,KAAK7I,KAAK6J,QAAQ,QAAU,EAAI,YAAc,OACtE,MAAO,qBACS4G,EAAW5H,KAAKtI,mBACP,IAAhBwQ,EAAoB,aAAaA,KAAiB,wFAMjCN,EAAW5H,KAAKxF,MAAQA,EAAO,yDAEzBA,EAAO,6CAEtBwF,4DAEU,IAAdmI,EAAkB,kBAAkBA,KAAe,uBAGlE,CCnBA,SAASC,EAA0BV,GACjC,OAAO,EAAAW,EAAA,GACLX,EACA,UACAO,EACAK,EAAA,EAEJ,CCNA,MAAMC,UAAqBC,EAAA,EACzB,WAAA/R,GACEgS,MAAM,CACJC,kBAAmBlB,EACnBmB,gBAAiBP,GAErB,EAGFG,EAAa5N,UAAY,CACvBxD,KAAM,CAAC,KAAcqI,cACrB9H,KAAM,O,gCChBR,MAAMkR,EACJ,WAAAnS,EAAY,0BAAEoS,IACZnS,KAAKoS,2BAA6B,IAClCpS,KAAKqS,UAAY,EACjBrS,KAAKoS,2BAA6BD,EAClCnS,KAAKsJ,KAAO,IAAI3I,aAAa,MAC/B,CACA,KAAA2R,GACEtS,KAAKqS,UAAY,CACnB,CACA,aAAAE,CAAczO,GACZ,GAAIA,EAAO9D,KAAKoS,2BAA6B,EAC3C,MAAM,IAAIjB,MAAM,2CAAkD,EAAPrN,GAE7D,MAAMC,EAAQ/D,KAAKqS,UACnB,IAAIG,EAAUzO,EAAe,EAAPD,EAEtB,GADA0O,EAAUpB,KAAKE,KAAKkB,EAAUxS,KAAKoS,4BAA8BpS,KAAKoS,2BAClEI,EAA6B,EAAnBxS,KAAKsJ,KAAKoF,OACtB,MAAM,IAAIyC,MAAM,6CAGlB,OADAnR,KAAKqS,UAAYG,EACVzO,CACT,CACA,QAAA0O,CAASC,GACP,MAAM1K,EAAShI,KAAKuS,cAAcG,EAAMhE,QACxC,IAAK,IAAI1L,EAAI,EAAGA,EAAI0P,EAAMhE,OAAQ1L,IAChChD,KAAKsJ,KAAKtB,EAAS,EAAIhF,GAAK0P,EAAM1P,GAEpC,OAAOgF,CACT,CACA,OAAAhE,GACEhE,KAAKsJ,KAAO,IACd,E,cCzBF,MAAM6I,EAA4B,IAClC,MAAMQ,EACJ,WAAA5S,CAAYI,GACVH,KAAK4S,eAAiCrM,OAAOC,OAAO,MAEpDxG,KAAK6S,SAAW,GAChB7S,KAAK8S,YAAc,GACnB9S,KAAK+S,iBAAmB,GACxB/S,KAAKyG,UAAYtG,EACjBH,KAAKyG,UAAUC,aAAaC,eAAe3G,KAAM,kBACjDA,KAAKgT,aAAe,IAAId,EAAS,CAAEC,8BAEnC,IAAK,IAAInP,EAAI,EAAGA,EADK,EACaA,IAAK,CACrC,IAAIiQ,EAAQ,IAAYC,QAAU,IAAYC,SACpC,IAANnQ,IACFiQ,GAAS,IAAYG,UACvBpT,KAAK6S,SAAStK,KAAK,IAAI8K,EAAA,EAAO,CAC5B/J,KAAMtJ,KAAKgT,aAAa1J,KACxB2J,UAEJ,CACF,CACA,SAAAK,GACEtT,KAAKuT,oBACLvT,KAAKwT,kBACP,CACA,gBAAAA,GACE,IAAK,MAAMxQ,KAAKhD,KAAK4S,eACnB5S,KAAK4S,eAAe5P,GAAK,KAE3BhD,KAAKgT,aAAaV,OACpB,CAEA,mBAAAzP,CAAoBqE,EAAOuM,GACzB,IAAKA,GAAazT,KAAK4S,eAAe1L,EAAMgC,KAC1C,OAAOlJ,KAAK4S,eAAe1L,EAAMgC,KAEnClJ,KAAKyG,UAAUmB,IAAI8L,mBAAmBxM,GACtC,MAAMoC,EAAOpC,EAAMY,OAAOwB,KACpBtB,EAAShI,KAAKgT,aAAaT,cAAcjJ,EAAKoF,QAGpD,OAFA1O,KAAKyG,UAAUmB,IAAI+L,iBAAiBzM,EAAOlH,KAAKgT,aAAa1J,KAAMtB,EAAS,GAC5EhI,KAAK4S,eAAe1L,EAAMgC,KAAOlJ,KAAK4T,cAAc5L,EAASmK,GACtDnS,KAAK4S,eAAe1L,EAAMgC,IACnC,CACA,cAAA2K,CAAe3M,GACblH,KAAKyG,UAAUmB,IAAIC,mBAAmBX,GACtC,MAAMoC,EAAOpC,EAAMY,OAAOwB,KACpBtB,EAAShI,KAAKgT,aAAaP,SAASnJ,GAC1C,OAAOtJ,KAAK8T,mBAAmB9L,EAASmK,EAC1C,CACA,iBAAA4B,CAAkBzK,GAChB,MAAMtB,EAAShI,KAAKgT,aAAaP,SAASnJ,GAC1C,OAAOtJ,KAAK4T,cAAc5L,EAASmK,EACrC,CACA,sBAAA6B,CAAuB1K,GACrB,MACMoE,EADS1N,KAAKgT,aAAaP,SAASnJ,GACnB6I,EACvB,OAAOnS,KAAK8T,mBAAmBpG,EACjC,CACA,kBAAAoG,CAAmBpG,GACjB,IAAK1N,KAAK+S,iBAAiBrF,GAAQ,CACjC,MAAM5F,EAAS9H,KAAK6S,SAASnF,EAAQ,GACrC1N,KAAK+S,iBAAiBrF,GAAS,IAAIuG,EAAA,EAAe,CAChDnM,SACAE,OAA0B,KAAjB0F,EAAQ,EAAI,GACrB5J,KAAMqO,GAEV,CACA,OAAOnS,KAAK+S,iBAAiBrF,EAC/B,CACA,aAAAkG,CAAclG,GACZ,IAAK1N,KAAK8S,YAAYpF,GAAQ,CAC5B,MAAMlL,EAAY,IAAI0R,EAAA,EAAU,CAC9B,EAAGlU,KAAK8T,mBAAmBpG,KAE7B1N,KAAK8S,YAAYpF,GAASlL,CAC5B,CACA,OAAOxC,KAAK8S,YAAYpF,EAC1B,CACA,iBAAA6F,GACE,MAAMY,EAAenU,KAAKyG,UAAUqB,OAC9BsM,EAAcpU,KAAK6S,SAAS,GAClCuB,EAAYC,OAAOrU,KAAKgT,aAAaX,WACrC8B,EAAa/K,aAAagL,GAC1B,MAAMzH,EAAiB3M,KAAKyG,UAAUG,IAAIO,OAAOyF,uBACjD,IAAK,IAAI5J,EAAI,EAAGA,EAAIhD,KAAK6S,SAASnE,OAAQ1L,IAAK,CAC7C,MAAM8E,EAAS9H,KAAK6S,SAAS7P,GAC7B2J,EAAe2H,mBACbH,EAAapM,aAAaqM,GAC1BjC,EACAgC,EAAapM,aAAaD,GAC1B,EACA9H,KAAKgT,aAAaX,UAEtB,CACArS,KAAKyG,UAAUG,IAAIO,OAAOqC,MAAMsF,OAAO,CAACnC,EAAeoC,UACzD,CACA,OAAA/K,GACE,IAAK,IAAIhB,EAAI,EAAGA,EAAIhD,KAAK8S,YAAYpE,OAAQ1L,IAC3ChD,KAAK8S,YAAY9P,GAAGgB,UAEtBhE,KAAK8S,YAAc,KACnB9S,KAAK4S,eAAiB,KACtB,IAAK,IAAI5P,EAAI,EAAGA,EAAIhD,KAAK6S,SAASnE,OAAQ1L,IACxChD,KAAK6S,SAAS7P,GAAGgB,UAEnBhE,KAAK6S,SAAW,KAChB,IAAK,IAAI7P,EAAI,EAAGA,EAAIhD,KAAK+S,iBAAiBrE,OAAQ1L,IAChDhD,KAAK+S,iBAAiB/P,GAAGgB,UAE3BhE,KAAK+S,iBAAmB,KACxB/S,KAAKgT,aAAahP,UAClBhE,KAAK4S,eAAiB,KACtB5S,KAAKyG,UAAY,IACnB,EAGFkM,EAAoB1O,UAAY,CAC9BxD,KAAM,CACJ,KAAc8T,aAEhBvT,KAAM,gB,kCCzHR,MAAMwT,EAAqB,CACzB,aAAc,EACd,YAAa,EACb,aAAc,EACd,gBAAiB,EACjB,iBAAkB,GAQpB,MAAMC,EACJ,WAAA1U,CAAYI,GACVH,KAAK0U,aAA+BnO,OAAOC,OAAO,MAClDxG,KAAK2U,oBAAsCpO,OAAOC,OAAO,MACzDxG,KAAK4U,mBAAqCrO,OAAOC,OAAO,MACxDxG,KAAK6U,WAA6BtO,OAAOC,OAAO,MAChDxG,KAAK8U,iBAAmCvO,OAAOC,OAAO,MACtDxG,KAAK+U,WAAa,GAClB/U,KAAKgV,kBAAoB,EACzBhV,KAAKyG,UAAYtG,CACnB,CACA,aAAAD,CAAc0G,GACZ5G,KAAK6G,KAAOD,EACZ5G,KAAKqQ,eAAe,IAAcH,UAClClQ,KAAKiV,iBACP,CACA,mBAAAC,CAAoBC,GACdnV,KAAKgV,oBAAsBG,IAE/BnV,KAAKgV,kBAAoBG,EACzBnV,KAAKiV,kBACP,CACA,eAAAG,CAAgBnG,GACdjP,KAAKgV,kBAAoB/F,EAAaoG,YACtCrV,KAAKsV,wBAA0BrG,EAAahH,WAAWsN,uBAAyB,EAAI,EACpFvV,KAAKiV,iBACP,CACA,YAAAnK,CAAaD,GACP7K,KAAK+U,aAAelK,IAExB7K,KAAK+U,WAAalK,EAClB7K,KAAKiV,kBACP,CACA,cAAA5E,CAAeJ,GACTjQ,KAAKwV,eAAiBvF,IAE1BjQ,KAAKwV,aAAevF,EACpBjQ,KAAKyV,cAAgBC,EAAA,EAAsBzF,GAC3CjQ,KAAKiV,kBACP,CACA,WAAA7O,CAAY/D,EAAUwD,EAASzC,EAAOuS,GACpC,MAAM5P,EAAW/F,KAAKgG,YAAY3D,EAAUwD,EAASzC,GACrDuS,EAAYvP,YAAYL,EAC1B,CACA,WAAAC,CAAY3D,EAAUwD,EAASzC,EAAOL,GAC/BV,EAASuT,cACZ,EAAAC,EAAA,GAAiBxT,EAAUwD,EAAQiQ,eACnC9V,KAAK+V,mBAAmB1T,IAE1BU,IAAaA,EAAWV,EAASU,UACjC,MAAM6F,EAxDV,SAA6BoN,EAAgBC,EAAW7S,EAAO0C,EAAW/C,GACxE,OAAOiT,GAAkB,GAAKC,GAAa,GAAK7S,GAAS,GAAK0C,GAAa,EAAI/C,CACjF,CAsDgBmT,CACV7T,EAASuT,WACT/P,EAAQ+P,WACRxS,EAAMkG,KACNlG,EAAM+S,aACN3B,EAAmBzR,IAErB,OAAI/C,KAAK6U,WAAWjM,KAEpB5I,KAAK6U,WAAWjM,GAAO5I,KAAKoW,gBAAgB/T,EAAUwD,EAASzC,EAAOL,IAD7D/C,KAAK6U,WAAWjM,EAG3B,CACA,eAAAwN,CAAgB/T,EAAUwD,EAASzC,EAAOL,GACxC,MAAMoE,EAASnH,KAAK6G,KAAKM,OACnBkP,EAAUrW,KAAKsW,2BAA2BjU,EAAUwD,GACpD0Q,EAAavW,KAAKyG,UAAUrD,MAAMoT,gBAAgBpT,GACxDmT,EAAW,GAAGE,UAAYzW,KAAKwV,eAAiB,IAAckB,mBAAqB,EAAI1W,KAAK+U,WAC5F,MAAM1N,EAASrH,KAAKyG,UAAUnF,OAAOmH,eAAe5C,GAASE,SACvDkC,EAAa,CAGjB0O,OAAQ,CACNC,OAAQ5W,KAAK6W,WAAWhR,EAAQ8Q,OAAOG,QACvCC,WAAYlR,EAAQ8Q,OAAOI,WAE3BV,WAEFW,SAAU,CACRJ,OAAQ5W,KAAK6W,WAAWhR,EAAQmR,SAASF,QACzCC,WAAYlR,EAAQmR,SAASD,WAC7BE,QAASV,GAEXW,UAAW,CACTnU,WACAoU,SAAU/T,EAAM+T,UAElB9P,SACA+P,YAAa,CACX1T,MAAO1D,KAAKgV,mBAGdqC,MAAO,iBAWT,OATIrX,KAAKsV,0BACPrN,EAAWqP,aAAe,IACrBtX,KAAKyV,cACR8B,OAAQ,uBACRC,kBAAmBpU,EAAMqU,UACzBC,aAActU,EAAMqU,UAAY,OAAS,WAG5BtQ,EAAOwQ,qBAAqB1P,EAE/C,CACA,UAAA4O,CAAWe,GACT,OAAO5X,KAAK0U,aAAakD,IAAS5X,KAAK6X,cAAcD,EACvD,CACA,aAAAC,CAAcD,GACZ,MAAMzQ,EAASnH,KAAK6G,KAAKM,OAIzB,OAHAnH,KAAK0U,aAAakD,GAAQzQ,EAAO2Q,mBAAmB,CAClDF,SAEK5X,KAAK0U,aAAakD,EAC3B,CACA,kBAAA7B,CAAmB1T,GACjB,MAAM0V,EAAS,GACf,IAAIrK,EAAQ,EACZ,MAAMsK,EAAgBzR,OAAOsC,KAAKxG,EAAS8L,YAAY8J,OACvD,IAAK,IAAIjV,EAAI,EAAGA,EAAIgV,EAActJ,OAAQ1L,IAAK,CAC7C,MAAMkV,EAAY7V,EAAS8L,WAAW6J,EAAchV,IACpD+U,EAAOrK,KAAWwK,EAAUlQ,OAC5B+P,EAAOrK,KAAWwK,EAAUX,OAC5BQ,EAAOrK,KAAWwK,EAAUC,OAC5BJ,EAAOrK,KAAWwK,EAAUE,QAC9B,CACA,MAAMC,EAAYN,EAAOO,KAAK,KAE9B,OADAjW,EAASuT,YAAa,EAAA2C,EAAA,GAAmBF,EAAW,YAC7ChW,EAASuT,UAClB,CACA,8BAAA4C,CAA+B3S,GAC7B,MAAMkS,EAAS,GACf,IAAIrK,EAAQ,EACZ,MAAMsK,EAAgBzR,OAAOsC,KAAKhD,EAAQiQ,eAAemC,OACzD,IAAK,IAAIjV,EAAI,EAAGA,EAAIgV,EAActJ,OAAQ1L,IAAK,CAC7C,MAAMkV,EAAYrS,EAAQiQ,cAAckC,EAAchV,IACtD+U,EAAOrK,KAAWwK,EAAUO,QAC9B,CACA,MAAMJ,EAAYN,EAAOO,KAAK,KAE9B,OADAzS,EAAQ6S,wBAAyB,EAAAH,EAAA,GAAmBF,EAAW,qBACxDxS,EAAQ6S,sBACjB,CAQA,oBAAAxK,CAAqB7L,EAAUwD,GAC7B,MAAM+C,EAAMvG,EAASuT,YAAc,GAAK/P,EAAQ6S,uBAChD,GAAI1Y,KAAK4U,mBAAmBhM,GAC1B,OAAO5I,KAAK4U,mBAAmBhM,GACjC,MAAMU,EAAOtJ,KAAKsW,2BAA2BjU,EAAUwD,GACjD8S,EAAoCpS,OAAOC,OAAO,MAClDsP,EAAgBjQ,EAAQiQ,cAC9B,IAAK,IAAI9S,EAAI,EAAGA,EAAIsG,EAAKoF,OAAQ1L,IAAK,CACpC,MACM4V,EADarS,OAAOsS,OAAOvP,EAAKtG,GAAGmL,YACP,GAAGyK,eACrC,IAAK,MAAMrR,KAAKuO,EACd,GAAIA,EAAcvO,GAAGkR,WAAaG,EAAgB,CAChDD,EAAkB3V,GAAKuE,EACvB,KACF,CAEJ,CAEA,OADAvH,KAAK4U,mBAAmBhM,GAAO+P,EACxBA,CACT,CACA,0BAAArC,CAA2BjU,EAAUwD,GAC9BA,EAAQ6S,wBACX1Y,KAAKwY,+BAA+B3S,GACtC,MAAM+C,EAAMvG,EAASuT,YAAc,GAAK/P,EAAQ6S,uBAChD,GAAI1Y,KAAK2U,oBAAoB/L,GAC3B,OAAO5I,KAAK2U,oBAAoB/L,GAElC,MAAMkQ,EAAsB,GA4B5B,OA3BAzW,EAASgU,QAAQ7L,QAAS1C,IACxB,MAAMiR,EAAc,CAClBC,YAAa,EACbC,SAAU,SACV9K,WAAY,IAER+K,EAAwBH,EAAY5K,WAC1C,IAAK,MAAMnL,KAAK6C,EAAQiQ,cAAe,CACrC,MAAMoC,EAAY7V,EAAS8L,WAAWnL,GACL,KAA5BkV,EAAUiB,SAAW,KACxB,EAAAlU,EAAA,GAAK,aAAajC,sCAAsCkV,EAAUiB,uDAEhEjB,EAAUpQ,SAAWA,IACvBiR,EAAYC,YAAcd,EAAUC,OACpCY,EAAYE,SAAWf,EAAUE,SAAW,WAAa,SACzDc,EAAsB3Q,KAAK,CACzBqQ,eAAgB/S,EAAQiQ,cAAc9S,GAAGyV,SACzCzQ,OAAQkQ,EAAUlQ,OAClBuP,OAAQW,EAAUX,SAGxB,CACI2B,EAAsBxK,QACxBoK,EAAoBvQ,KAAKwQ,KAG7B/Y,KAAK2U,oBAAoB/L,GAAOkQ,EACzBA,CACT,CACA,eAAA7D,GACE,MAAMrM,GAjNiBwQ,EAkNrBpZ,KAAKwV,aAlNgC6D,EAmNrCrZ,KAAKgV,kBACLhV,KAAK+U,YAnNW,EAAIqE,GAAkB,EAoNtCpZ,KAAKsV,yBApNqD,EAAI+D,GADpE,IAA2BD,EAAgBC,EAuNlCrZ,KAAK8U,iBAAiBlM,KACzB5I,KAAK8U,iBAAiBlM,GAAuBrC,OAAOC,OAAO,OAE7DxG,KAAK6U,WAAa7U,KAAK8U,iBAAiBlM,EAC1C,CACA,OAAA5E,GACEhE,KAAKyG,UAAY,KACjBzG,KAAK2U,oBAAsB,IAC7B,EAGFF,EAAexQ,UAAY,CACzBxD,KAAM,CAAC,KAAcqI,cACrB9H,KAAM,Y,+CCrPR,MAAMsY,GACJ,WAAAvZ,GACEC,KAAKuZ,SAAW,GAChBvZ,KAAKwZ,aAAe,GACpBxZ,KAAKqV,YAAc,CACrB,ECAF,MAAMoE,GACJ,IAAArV,CAAKjE,EAAUuZ,GACb1Z,KAAKyG,UAAYtG,EACjBH,KAAK2Z,oBAAsBD,CAC7B,CACA,aAAAE,CAAcC,EAA4BC,EAAoBC,EAAWjW,EAAMkW,GAC7E,MAAM7Z,EAAWH,KAAKyG,UAChBwT,EAAiBja,KAAKka,oBAC1BL,GAEIM,EAAiBha,EAAS+E,QAAQmD,aACtCyR,EAAmBhD,QAarB,OAXA3W,EAASgC,QAAQwK,eAAeyN,qBAC9B,CACElV,QAAS+U,EACTI,OAAQN,GAEV,CACE7U,QAASiV,EACTE,OAAQL,GAEVlW,GAEKgW,CACT,CACA,eAAAQ,CAAgBrL,EAAcqD,GAAQ,EAAMiI,EAAYpN,GACtD,MACML,EADqB9M,KAAK2Z,oBACWa,mBAAmBvL,GACxDhH,EAAajI,KAAKmP,cAAcF,EAAcqD,EAAOiI,GAC3DzN,EAAgB7E,WAAaA,EAC7BjI,KAAKyG,UAAUV,SAASqP,gBAAgBtI,GACxC9M,KAAKyG,UAAUtE,QAAQ0K,gBAAgBC,GACvC9M,KAAKyG,UAAUtE,QAAQ+K,YAAYC,EACrC,CACA,gBAAAyB,GACE5O,KAAKyG,UAAUtE,QAAQ4K,eACzB,CAOA,mBAAAmN,CAAoBjL,GAClB,MAAMnC,EAAkB9M,KAAK2Z,oBAAoBa,mBAAmBvL,GACpE,OAAInC,EAAgByM,SAAS,GACpBzM,EAAgByM,SAAS,GAAGkB,oBAE9Bza,KAAKyG,UAAUvB,QAAQmD,aAC5B4G,EAAayL,cAAc,GAAG5D,OAElC,CACA,aAAA3H,CAAcF,EAAcqD,EAAOqI,GACZ,kBAAVrI,IACTA,EAAQA,EAAQ,KAAMsI,IAAM,KAAMC,MAEpC,MAAMnB,EAAqB1Z,KAAK2Z,oBAC1B7M,EAAkB4M,EAAmBc,mBAAmBvL,GACxD6L,EAAmB7L,EAAayL,cAAczJ,IAClD,CAAC/L,EAASlC,KACR,MAAMpB,EAAUkL,EAAgByM,SAASvW,GACzC,IAAI+X,EACAC,EAIFD,EAHEnZ,EACqBA,EAAQ6Y,oBACUnS,aAGlCtI,KAAKyG,UAAUvB,QAAQmD,aAAanD,GAASoD,WAAW,CAC7D2S,cAAe,IAGfnO,EAAgB0M,aAAaxW,KAC/BgY,EAAgBD,EAChBA,EAAO/a,KAAKyG,UAAUvB,QAAQgW,eAC5BpO,EAAgB0M,aAAaxW,KAGjC,MAAMmY,EAAS7I,EAAQ,KAAM8I,MAAQ,QAAU,OAE/C,OADAT,IAAeA,EAAajB,EAAmB2B,mBACxC,CACLN,OACAC,gBACAL,aACAW,QAAS,QACTH,YAIN,IAAI5F,EAKJ,IAJKtG,EAAasM,UAAWtM,EAAauM,OAAWvM,EAAawM,sBAChExM,EAAayM,4BACbzM,EAAawM,oBAAoB3E,OAAO6E,YAAc7O,EAAgB8O,KAAO,EAAI,GAE/E3M,EAAawM,oBAAqB,CACpC,MAAMI,EAAgBvJ,EAAQ,KAAMwJ,QAAU,QAAU,OAClDC,EAAczJ,EAAQ,KAAM0J,MAAQ,QAAU,OACpDzG,EAAyB,CACvBwF,KAAM/a,KAAKyG,UAAUvB,QAAQmD,aAAa4G,EAAawM,oBAAoB3E,QAAQxO,aACnF2T,eAAgB,QAChBJ,gBACAK,gBAAiB,EACjBH,cACAI,aAAc,QAElB,CAKA,MAJmB,CACjBrB,mBACAvF,yBAGJ,CACA,KAAAjD,CAAMrD,EAAcqD,GAAQ,EAAMiI,EAAYpN,GAC5C,IAAKmF,EACH,OACF,MAAM,IAAE1L,EAAG,QAAEzE,GAAYnC,KAAKyG,UACxBU,EAASP,EAAIO,OAEnB,GAD8C,OAA3BhF,EAAQwK,eACX,CACd,MAAMA,EAAiBxF,EAAOyF,uBACxBwP,EAAuBpc,KAAKmP,cAAcF,EAAcqD,EAAOiI,GAC/D5E,EAAchJ,EAAeE,gBAAgBuP,GACnDzG,EAAYzI,YAAYC,EAASC,EAAGD,EAASE,EAAGF,EAASG,MAAOH,EAASI,OAAQ,EAAG,GACpFoI,EAAY1I,MACZ,MAAMoP,EAAc1P,EAAeoC,SACnC5H,EAAOqC,MAAMsF,OAAO,CAACuN,GACvB,MACErc,KAAKsa,gBAAgBrL,EAAcqD,EAAOiI,EAAYpN,EAE1D,CACA,mBAAAmP,CAAoBrN,GAClBA,EAAasN,QAAS,EACtB,MAAMzP,EAAkB,IAAIwM,GAmC5B,OAlCArK,EAAayL,cAAclQ,QAAQ,CAACgS,EAAcxZ,KAChD,GAAIwZ,aAAwBC,GAAA,EAAc,CACxC,MAAM7a,EAAU4a,EAAahV,SAASkV,WACpC,UAEIC,EAAYH,EAAaI,YAAc,gBAAkB,SAC/D,IACEhb,EAAQib,UAAU,CAChB1V,OAAQnH,KAAKyG,UAAUG,IAAIO,OAC3B8L,MAAO6J,gBAAgBC,gBAAkBD,gBAAgB3J,SAAW2J,gBAAgBE,kBAAoBF,gBAAgB1J,SACxHmE,OAAQ,aACRoF,aAEJ,CAAE,MAAOM,GACPC,QAAQC,MAAMF,EAChB,CACAnQ,EAAgByM,SAASvW,GAAKpB,CAChC,CAEA,GADAkL,EAAgB8O,KAAOY,EAAa1F,OAAOsG,UACvCZ,EAAa1F,OAAOsG,UAAW,CACjC,MAAMC,EAAc,IAAIC,GAAA,EAAc,CACpChQ,MAAO,EACPC,OAAQ,EACRoO,YAAa,IAEf7O,EAAgB0M,aAAaxW,GAAKqa,CACpC,IAEEvQ,EAAgB8O,OAClB9O,EAAgBuI,YAAc,EAC1BpG,EAAawM,sBACfxM,EAAawM,oBAAoB3E,OAAO6E,YAAc,IAGnD7O,CACT,CACA,sBAAAyQ,CAAuBzQ,GACrBA,EAAgByM,SAAS/O,QAAS5I,IAChCA,EAAQ4b,gBAEV1Q,EAAgB0M,aAAahP,QAAStF,IACpCA,EAAQlB,YAEV8I,EAAgB0M,aAAa9K,OAAS,EACtC5B,EAAgByM,SAAS7K,OAAS,CACpC,CACA,yBAAAgN,CAA0BzM,GACxB,MAAMnC,EAAkB9M,KAAK2Z,oBAAoBa,mBAAmBvL,GAChEA,EAAawM,qBAAuB3O,EAAgB8O,OACtD3M,EAAawM,oBAAoB3E,OAAO6E,YAAc,EAE1D,CACA,qBAAA8B,CAAsBxO,GACpB,MAAMnC,EAAkB9M,KAAK2Z,oBAAoBa,mBAAmBvL,GACpEnC,EAAgBQ,MAAQ2B,EAAa3B,MACrCR,EAAgBS,OAAS0B,EAAa1B,OAClCT,EAAgB8O,MAClB3M,EAAayL,cAAclQ,QAAQ,CAACgS,EAAcxZ,KAChD,MAAMqa,EAAcvQ,EAAgB0M,aAAaxW,GACjDqa,GAAaK,OACXlB,EAAa1F,OAAOxJ,MACpBkP,EAAa1F,OAAOvJ,OACpBiP,EAAa1F,OAAO6G,cAI5B,ECzMF,MAAMC,WAA8BC,GAAA,EAClC,WAAA9d,CAAYI,GACV4R,MAAM5R,GACNH,KAAKkP,QAAU,IAAIuK,GACnBzZ,KAAKkP,QAAQ9K,KAAKjE,EAAUH,KAC9B,EAGF4d,GAAsB3Z,UAAY,CAChCxD,KAAM,CAAC,KAAcqI,cACrB9H,KAAM,gBCZR,MAAM8c,GACJ,WAAA/d,GACEC,KAAK+d,gBAAkCxX,OAAOC,OAAO,KACvD,CACA,aAAAtG,CAAc0G,GACZ5G,KAAK6G,KAAOD,CACd,CACA,cAAA6B,CAAe5C,GACb,OAAO7F,KAAK+d,gBAAgBlY,EAAQ+P,aAAe5V,KAAKge,sBAAsBnY,EAChF,CACA,qBAAAmY,CAAsBnY,GACpB,MAAMsB,EAASnH,KAAK6G,KAAKM,OACnBuB,EAAa7C,EAAQoY,UAAUhN,IAAK/J,GAAUC,EAAO+W,sBAAsB,CAAE5W,QAASJ,KACtFiX,EAAqB,CAAEC,iBAAkB1V,GAK/C,OAJA1I,KAAK+d,gBAAgBlY,EAAQ+P,YAAc,CACzClN,aACA3C,SAAUoB,EAAOkX,qBAAqBF,IAEjCne,KAAK+d,gBAAgBlY,EAAQ+P,WACtC,CACA,OAAA5R,GACEhE,KAAK6G,KAAO,KACZ7G,KAAK+d,gBAAkB,IACzB,EAGFD,GAAgB7Z,UAAY,CAC1BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,UChCR,MAAMsd,GAAsB,CAC5BA,OAA6B,CAC3BC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,sBACXC,UAAW,QAGfJ,IAA0B,CACxBC,MAAO,CACLC,UAAW,YACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,MACXC,UAAW,QAGfJ,SAA+B,CAC7BC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,sBACXC,UAAW,QAGfJ,OAA6B,CAC3BC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,gBACXC,UAAW,QAGfJ,QAA8B,CAC5BC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,gBACXC,UAAW,QAGfJ,KAA2B,CACzBC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,OACXC,UAAW,OACXC,UAAW,QAGfJ,aAAoC,CAClCC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,YACXC,UAAW,sBACXC,UAAW,QAGfJ,UAAiC,CAC/BC,MAAO,CACLC,UAAW,MACXC,UAAW,MACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,YACXC,UAAW,MACXC,UAAW,QAGfJ,aAAoC,CAClCC,MAAO,CACLC,UAAW,MACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,YACXC,UAAW,gBACXC,UAAW,QAGfJ,MAA4B,CAC1BC,MAAO,CACLC,UAAW,OACXC,UAAW,sBACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,OACXC,UAAW,gBACXC,UAAW,QAGfJ,IAA0B,CACxBC,MAAO,CACLC,UAAW,MACXC,UAAW,MACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,MACXC,UAAW,QAGfJ,IAA0B,CACxBC,MAAO,CACLC,UAAW,MACXC,UAAW,MACXC,UAAW,OAEbC,MAAO,CACLH,UAAW,MACXC,UAAW,MACXC,UAAW,SC1If,MAAME,GACJ,WAAA7e,GACEC,KAAK6e,aAAe,IAAIpZ,EAAA,EACxBzF,KAAK6e,aAAaC,OAAQ,CAC5B,CACA,aAAA5e,CAAc0G,GACZ5G,KAAK4G,IAAMA,CACb,CAKA,eAAA4P,CAAgBpT,GAEd,MAAO,CACL,CACEmU,OAAQ,aACRd,UAAW,EACXqI,MALUR,GAAoBlb,EAAM0C,YAAcwY,GAAoBS,QAQ5E,CACA,OAAA/a,GACEhE,KAAK4G,IAAM,IACb,EAGFgY,GAAe3a,UAAY,CACzBxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,S,eCnCR,MAAMge,GAA+B,CACnCve,KAAM,QACN,MAAAwe,CAAOnI,EAAQoI,EAAYtY,GACzB,MAAMY,EAAWsP,EAAOtP,SAClB2X,GAA6B,EAApBrI,EAAOsI,aAAwC,EAArBtI,EAAOuI,aAC1CC,EAAgB9X,EAASmC,WAAawV,EAC5CvY,EAAIO,OAAOqC,MAAM+V,aACf,CAAEra,QAASga,GACX1X,EACA,CACEQ,OAAQ,EACRwX,aAAc1I,EAAOuI,YACrBI,YAAa3I,EAAOuI,YAAcC,GAEpC,CACEhS,MAAOwJ,EAAOsI,WACd7R,OAAQuJ,EAAOuI,YACfK,mBAAoB,GAG1B,GCpBIC,GAAe,CACnB,iBAAkB,CAAEC,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAC/D,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GAChE,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GAChE,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GAChE,iBAAkB,CAAEF,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAC/D,kBAAmB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,GACjE,iBAAkB,CAAEF,WAAY,GAAIC,WAAY,EAAGC,YAAa,IAE5DC,GAAmB,CAAEH,WAAY,EAAGC,WAAY,EAAGC,YAAa,GAChEE,GAAqC,CACzCvf,KAAM,aACN,MAAAwe,CAAOnI,EAAQoI,EAAYtY,GACzB,IAAIqZ,EAAWnJ,EAAOsI,WAClBc,EAAYpJ,EAAOuI,YACvB,MAAMc,EAAYR,GAAa7I,EAAOS,SAAWwI,GACjD,IAAK,IAAI/c,EAAI,EAAGA,EAAI8T,EAAOtP,SAASkH,OAAQ1L,IAAK,CAC/C,MAAMod,EAActJ,EAAOtP,SAASxE,GAC9Byc,EAAcrO,KAAKE,KAAK2O,EAAWE,EAAUN,YAAcM,EAAUP,WAC3EhZ,EAAIO,OAAOqC,MAAM+V,aACf,CACEra,QAASga,EACTmB,SAAUrd,GAEZod,EACA,CACEpY,OAAQ,EACRyX,eAEF,CACEnS,MAAO8D,KAAKE,KAAK2O,EAAWE,EAAUN,YAAcM,EAAUN,WAC9DtS,OAAQ6D,KAAKE,KAAK4O,EAAYC,EAAUL,aAAeK,EAAUL,YACjEJ,mBAAoB,IAGxBO,EAAW7O,KAAKC,IAAI4O,GAAY,EAAG,GACnCC,EAAY9O,KAAKC,IAAI6O,GAAa,EAAG,EACvC,CACF,GCnCII,GAAyB,CAC7B7f,KAAM,QACN,MAAAwe,CAAOnI,EAAQoI,EAAYtY,GACzB,MAAMY,EAAWsP,EAAOtP,SACxB,IAAKA,EACH,OACF,GAAI+Y,WAAWC,kBAAoBhZ,aAAoBgZ,iBAAkB,CACvE,MAAMC,EAAS,IAAWlV,MAAMmV,aAAalZ,EAAS8F,MAAO9F,EAAS+F,QACtDkT,EAAO/D,WAAW,MAC1BiE,UAAUnZ,EAAU,EAAG,EAAGA,EAAS8F,MAAO9F,EAAS+F,QAC3DuJ,EAAOtP,SAAWiZ,GAClB,EAAAxb,EAAA,GAAK,kFACP,CACA,MAAMqI,EAAQ8D,KAAKwP,IAAI1B,EAAW5R,MAAOwJ,EAAO+J,eAAiB/J,EAAOsI,YAClE7R,EAAS6D,KAAKwP,IAAI1B,EAAW3R,OAAQuJ,EAAOgK,gBAAkBhK,EAAOuI,aACrE0B,EAA0C,gCAArBjK,EAAO6F,UAClC/V,EAAIO,OAAOqC,MAAMwX,2BACf,CAAElK,OAAQtP,GACV,CAAEtC,QAASga,EAAY6B,sBACvB,CACEzT,QACAC,UAGN,GCzBI0T,GAAyB,CAC7BxgB,KAAM,QACN,MAAAwe,CAAOnI,EAAQoI,EAAYtY,GACzB0Z,GAAuBrB,OAAOnI,EAAQoI,EAAYtY,EACpD,GCNF,MAAMsa,GACJ,WAAAnhB,CAAYoH,GACVnH,KAAKmH,OAASA,EACdnH,KAAKmI,QAAUhB,EAAOga,cAAc,CAAEC,UAAW,WACjDphB,KAAKqhB,UAAY,CAAC,CACpB,CACA,kBAAAC,CAAmB/J,GACjB,IAAIxR,EAAW/F,KAAKqhB,UAAU9J,GAgD9B,OA/CKxR,IACE/F,KAAKuhB,qBACRvhB,KAAKuhB,mBAAqBvhB,KAAKmH,OAAO2Q,mBAAmB,CACvDF,KAEE,stCA4BN7R,EAAW/F,KAAKmH,OAAOwQ,qBAAqB,CAC1CtQ,OAAQ,OACRsP,OAAQ,CACNC,OAAQ5W,KAAKuhB,mBACbxK,WAAY,cAEdC,SAAU,CACRJ,OAAQ5W,KAAKuhB,mBACbxK,WAAY,eACZE,QAAS,CAAC,CAAEM,cAGhBvX,KAAKqhB,UAAU9J,GAAUxR,GAEpBA,CACT,CAMA,cAAAyb,CAAetc,GACb,MAAMa,EAAW/F,KAAKshB,mBAAmBpc,EAAQqS,QACjD,GAA0B,OAAtBrS,EAAQuc,WAA4C,OAAtBvc,EAAQuc,UACxC,MAAM,IAAItQ,MAAM,oEAElB,IAAIuQ,EAAaxc,EACjB,MAAMyc,EAAkBzc,EAAQwa,oBAAsB,EAChDkC,EAAiB1c,EAAQ+N,MAAQ6J,gBAAgBE,kBACvD,IAAK4E,EAAgB,CACnB,MAAMC,EAAuB,CAC3B/d,KAAM,CACJwJ,MAAO8D,KAAKE,KAAKpM,EAAQoI,MAAQ,GACjCC,OAAQ6D,KAAKE,KAAKpM,EAAQqI,OAAS,GACnCmS,mBAAoBiC,GAEtBpK,OAAQrS,EAAQqS,OAChBtE,MAAO6J,gBAAgBC,gBAAkBD,gBAAgB1J,SAAW0J,gBAAgBE,kBACpF/B,cAAe/V,EAAQ+V,cAAgB,GAEzCyG,EAAa1hB,KAAKmH,OAAO2a,cAAcD,EACzC,CACA,MAAMlV,EAAiB3M,KAAKmH,OAAOyF,qBAAqB,CAAC,GACnDmV,EAAkBhc,EAASic,mBAAmB,GACpD,IAAK,IAAIC,EAAa,EAAGA,EAAaN,IAAmBM,EAAY,CACnE,IAAIC,EAAUhd,EAAQoD,WAAW,CAC/B6Z,aAAc,EACdlH,cAAe,EACfwG,UAAW,KACXW,eAAgBH,EAChBN,gBAAiB,IAEfU,EAAcT,EAAiB,EAAI,EACvC,IAAK,IAAI5e,EAAI,EAAGA,EAAIkC,EAAQ+V,gBAAiBjY,EAAG,CAC9C,MAAMsf,EAAUZ,EAAWpZ,WAAW,CACpC6Z,aAAcE,IACdpH,cAAe,EACfwG,UAAW,KACXW,eAAgBH,EAChBN,gBAAiB,IAEbhM,EAAchJ,EAAeE,gBAAgB,CACjDiO,iBAAkB,CAAC,CACjBC,KAAMuH,EACNhH,QAAS,QACTH,OAAQ,QACRR,WAAY,CAAE4H,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,OAGjClgB,EAAYxC,KAAKmH,OAAOwB,gBAAgB,CAC5CtB,OAAQ0a,EACRza,QAAS,CAAC,CACRkB,QAAS,EACThB,SAAUxH,KAAKmI,SACd,CACDK,QAAS,EACThB,SAAU0a,MAGdvM,EAAYvP,YAAYL,GACxB4P,EAAYlT,aAAa,EAAGD,GAC5BmT,EAAYrQ,KAAK,EAAG,EAAG,EAAG,GAC1BqQ,EAAY1I,MACZiV,EAAUI,CACZ,CACF,CACA,IAAKV,EAAgB,CACnB,MAAMe,EAAe,CACnBrV,MAAO8D,KAAKE,KAAKpM,EAAQoI,MAAQ,GACjCC,OAAQ6D,KAAKE,KAAKpM,EAAQqI,OAAS,GACnCmS,mBAAoBiC,GAEtB,IAAK,IAAI3e,EAAI,EAAGA,EAAIkC,EAAQ+V,gBAAiBjY,EAC3C2J,EAAeyN,qBAAqB,CAClClV,QAASwc,EACTrB,SAAUrd,EAAI,GACb,CACDkC,UACAmb,SAAUrd,GACT2f,GACHA,EAAarV,MAAQ8D,KAAKE,KAAKqR,EAAarV,MAAQ,GACpDqV,EAAapV,OAAS6D,KAAKE,KAAKqR,EAAapV,OAAS,EAE1D,CAKA,OAJAvN,KAAKmH,OAAOqC,MAAMsF,OAAO,CAACnC,EAAeoC,WACpC6S,GACHF,EAAW1d,UAENkB,CACT,EC3IF,MAAM0d,GACJ,WAAA7iB,CAAYI,GACVH,KAAK6iB,gBAAkB,GACvB7iB,KAAK8iB,YAA8Bvc,OAAOC,OAAO,MACjDxG,KAAK+iB,aAA+Bxc,OAAOC,OAAO,MAClDxG,KAAK4S,eAAiCrM,OAAOC,OAAO,MACpDxG,KAAKgjB,iBAAmCzc,OAAOC,OAAO,MACtDxG,KAAKijB,SAAW,CACdC,MAAO5C,GACPxY,OAAQkX,GACRmE,MAAOlC,GACPmC,WAAYpD,IAEdhgB,KAAKyG,UAAYtG,EACjBA,EAASuG,aAAaC,eAAe3G,KAAM,eAC3CG,EAASuG,aAAaC,eAAe3G,KAAM,gBAC3CG,EAASuG,aAAaC,eAAe3G,KAAM,kBAC3CG,EAASuG,aAAaC,eAAe3G,KAAM,mBAC7C,CACA,aAAAE,CAAc0G,GACZ5G,KAAK6G,KAAOD,CACd,CACA,UAAAyc,CAAWvM,GACT,GAAIA,EAAOwM,oBAAqB,CAC9B,MAAMC,EAAmBnS,KAAKC,IAAIyF,EAAOsI,WAAYtI,EAAOuI,aAC5DvI,EAAOmE,cAAgB7J,KAAKoS,MAAMpS,KAAKqS,KAAKF,IAAqB,CACnE,CACA,IAAItQ,EAAQ6J,gBAAgBC,gBAAkBD,gBAAgB3J,SAChC,eAA1B2D,EAAO4M,iBACTzQ,GAAS6J,gBAAgBE,kBACzB/J,GAAS6J,gBAAgB1J,UAE3B,MAAM+M,EAAYR,GAAa7I,EAAOS,SAAW,CAAEqI,WAAY,EAAGC,WAAY,EAAGC,YAAa,GACxFxS,EAAQ8D,KAAKE,KAAKwF,EAAOsI,WAAae,EAAUN,YAAcM,EAAUN,WACxEtS,EAAS6D,KAAKE,KAAKwF,EAAOuI,YAAcc,EAAUL,aAAeK,EAAUL,YAC3E6D,EAAoB,CACxBtM,MAAOP,EAAOO,MACdvT,KAAM,CAAEwJ,QAAOC,UACfgK,OAAQT,EAAOS,OACfoE,YAAa7E,EAAO6E,YACpBV,cAAenE,EAAOmE,cACtBwG,UAAW3K,EAAO2K,UAClBxO,SAEIiM,EAAalf,KAAK6G,KAAKM,OAAO2a,cAAc6B,GAWlD,OAVA3jB,KAAK8iB,YAAYhM,EAAO5N,KAAOgW,EAC1Blf,KAAK6iB,gBAAgBe,SAAS9M,KACjCA,EAAOhN,GAAG,SAAU9J,KAAK6jB,eAAgB7jB,MACzC8W,EAAOhN,GAAG,SAAU9J,KAAK8jB,eAAgB9jB,MACzC8W,EAAOhN,GAAG,UAAW9J,KAAK+jB,gBAAiB/jB,MAC3C8W,EAAOhN,GAAG,SAAU9J,KAAKgkB,eAAgBhkB,MACzC8W,EAAOhN,GAAG,gBAAiB9J,KAAKikB,gBAAiBjkB,MACjDA,KAAK6iB,gBAAgBta,KAAKuO,IAE5B9W,KAAK6jB,eAAe/M,GACboI,CACT,CACA,cAAA2E,CAAe/M,GACb,MAAMoI,EAAalf,KAAKqI,aAAayO,GAChCoI,IAEDlf,KAAKijB,SAASnM,EAAO4M,iBACvB1jB,KAAKijB,SAASnM,EAAO4M,gBAAgBzE,OAAOnI,EAAQoI,EAAYlf,KAAK6G,MAEnEiQ,EAAOwM,qBAAuBxM,EAAOmE,cAAgB,GACvDjb,KAAKikB,gBAAgBnN,GAEzB,CACA,cAAAkN,CAAelN,GACb,MAAMoI,EAAalf,KAAK8iB,YAAYhM,EAAO5N,KACvCgW,IACFlf,KAAK8iB,YAAYhM,EAAO5N,KAAO,KAC/BgW,EAAWlb,UAEf,CACA,eAAAigB,CAAgBnN,GACT9W,KAAKkkB,mBACRlkB,KAAKkkB,iBAAmB,IAAIhD,GAAmBlhB,KAAK6G,KAAKM,SAE3D,MAAM+X,EAAalf,KAAKqI,aAAayO,GACrC9W,KAAKkkB,iBAAiB1C,eAAetC,EACvC,CACA,eAAA6E,CAAgBjN,GACdA,EAAOrM,IAAI,SAAUzK,KAAK6jB,eAAgB7jB,MAC1C8W,EAAOrM,IAAI,SAAUzK,KAAKgkB,eAAgBhkB,MAC1C8W,EAAOrM,IAAI,UAAWzK,KAAK+jB,gBAAiB/jB,MAC5C8W,EAAOrM,IAAI,SAAUzK,KAAK8jB,eAAgB9jB,MAC1C8W,EAAOrM,IAAI,gBAAiBzK,KAAKikB,gBAAiBjkB,MAClDA,KAAK6iB,gBAAgBxY,OAAOrK,KAAK6iB,gBAAgBvY,QAAQwM,GAAS,GAClE9W,KAAKgkB,eAAelN,EACtB,CACA,cAAAgN,CAAehN,GACb,MAAMoI,EAAalf,KAAK8iB,YAAYhM,EAAO5N,KACtCgW,EAEMA,EAAW5R,QAAUwJ,EAAOsI,YAAcF,EAAW3R,SAAWuJ,EAAOuI,cAChFrf,KAAKgjB,iBAAiBlM,EAAO5N,KAAO,KACpClJ,KAAK4S,eAAekE,EAAO5N,KAAO,KAClClJ,KAAKgkB,eAAelN,GACpB9W,KAAKqjB,WAAWvM,IALhB9W,KAAKqjB,WAAWvM,EAOpB,CACA,YAAAqN,CAAahc,GAEX,OADAnI,KAAK+iB,aAAa5a,EAAQic,aAAepkB,KAAK6G,KAAKM,OAAOga,cAAchZ,GACjEnI,KAAK+iB,aAAa5a,EAAQic,YACnC,CACA,aAAAhc,CAAcD,GACZ,OAAOnI,KAAK+iB,aAAa5a,EAAQic,cAAgBpkB,KAAKmkB,aAAahc,EACrE,CACA,YAAAE,CAAayO,GACX,OAAO9W,KAAK8iB,YAAYhM,EAAO5N,MAAQlJ,KAAKqjB,WAAWvM,EACzD,CAUA,mBAAA3R,CAAoBD,GAClB,OAAOlF,KAAK4S,eAAe1N,EAAQgE,MAAQlJ,KAAKqkB,wBAAwBnf,EAC1E,CACA,uBAAAmf,CAAwBnf,GACtB,MAAM4R,EAAS5R,EAAQ4R,OAQvB,OAPA9W,KAAK4S,eAAe1N,EAAQgE,KAAO,IAAIgL,EAAA,EAAU,CAC/C,EAAG4C,EACH,EAAGA,EAAOlS,MACV,EAAG,IAAIvE,EAAA,EAAa,CAClByE,eAAgB,CAAErE,KAAM,cAAeF,MAAO2E,EAAQof,cAAcC,cAGjEvkB,KAAK4S,eAAe1N,EAAQgE,IACrC,CACA,cAAAgS,CAAehW,GACb,MAAM4R,EAAS5R,EAAQ4R,OACvB,OAAO9W,KAAKgjB,iBAAiBlM,EAAO5N,MAAQlJ,KAAKwkB,mBAAmB1N,EACtE,CACA,kBAAA0N,CAAmBtf,GAEjB,OADAlF,KAAKgjB,iBAAiB9d,EAAQgE,KAAOlJ,KAAKqI,aAAanD,GAASoD,aACzDtI,KAAKgjB,iBAAiB9d,EAAQgE,IACvC,CACA,cAAAub,CAAevf,GACb,MAAM/E,EAAWH,KAAKyG,UAChBkG,EAAiBxM,EAASyG,IAAIO,OAAOyF,uBACrC6T,EAAS,IAAWlV,MAAMmV,eAChCD,EAAOnT,MAAQpI,EAAQ4R,OAAOsI,WAC9BqB,EAAOlT,OAASrI,EAAQ4R,OAAOuI,YAC/B,MAAMzd,EAAU6e,EAAO/D,WAAW,UAoBlC,OAnBA9a,EAAQib,UAAU,CAChB1V,OAAQhH,EAASyG,IAAIO,OACrB8L,MAAO6J,gBAAgB3J,SAAW2J,gBAAgB1J,SAClDmE,OAAQ,IAAWhM,MAAMC,eAAe5E,IAAI8d,2BAC5C/H,UAAW,kBAEbhQ,EAAeyN,qBAAqB,CAClClV,QAAS/E,EAAS+E,QAAQmD,aAAanD,EAAQ4R,QAC/CuD,OAAQ,CACNjN,EAAG,EACHC,EAAG,IAEJ,CACDnI,QAAStD,EAAQ6Y,qBAChB,CACDnN,MAAOmT,EAAOnT,MACdC,OAAQkT,EAAOlT,SAEjBpN,EAASyG,IAAIO,OAAOqC,MAAMsF,OAAO,CAACnC,EAAeoC,WAC1C0R,CACT,CACA,SAAAkE,CAAUzf,GACR,MAAM0f,EAAe5kB,KAAKykB,eAAevf,GACnC2f,EAAmBC,GAAA,EAAWC,2BAA2BH,EAAatX,MAAOsX,EAAarX,QAC1F3L,EAAUijB,EAAiBjjB,QACjCA,EAAQ+e,UAAUiE,EAAc,EAAG,GACnC,MAAM,MAAEtX,EAAK,OAAEC,GAAWqX,EACpBI,EAAYpjB,EAAQqjB,aAAa,EAAG,EAAG3X,EAAOC,GAC9C2X,EAAS,IAAIC,kBAAkBH,EAAU1b,KAAKxB,QAEpD,OADAgd,GAAA,EAAWM,uBAAuBP,GAC3B,CAAEK,SAAQ5X,QAAOC,SAC1B,CACA,OAAAvJ,GACEhE,KAAK6iB,gBAAgBwC,QAAQ7a,QAASsM,GAAW9W,KAAK+jB,gBAAgBjN,IACtE9W,KAAK6iB,gBAAkB,KACvB,IAAK,MAAMyC,KAAK/e,OAAOsC,KAAK7I,KAAK4S,gBAAiB,CAChD,MAAMhK,EAAM2c,OAAOD,GACb9iB,EAAYxC,KAAK4S,eAAehK,GACtCpG,GAAWwB,UACXhE,KAAK4S,eAAehK,GAAO,IAC7B,CACA5I,KAAK6G,KAAO,KACZ7G,KAAKkkB,iBAAmB,KACxBlkB,KAAK8iB,YAAc,KACnB9iB,KAAK4S,eAAiB,KACtB5S,KAAKgjB,iBAAmB,KACxBhjB,KAAK+iB,aAAe,IACtB,EAGFH,GAAiB3e,UAAY,CAC3BxD,KAAM,CACJ,KAAcqI,cAEhB9H,KAAM,WCjMR,MAAMwkB,GAAuB,IACxBC,EAAA,EACH5T,EACA1F,EACApB,EACA0E,EACA1G,EACA6Z,GACAhF,GACAE,GACAc,GACAnK,EACA/J,EACAkF,EACAvJ,GAEIqf,GAAqB,IAAI,IAAmB/S,GAC5CgT,GAAwB,CAAChgB,EAAiBxB,EAAgBrE,GAC1D8lB,GAAU,GACVjjB,GAAc,GACdkjB,GAAqB,GAC3B,KAAWC,kBAAkB,KAAchd,aAAc8c,IACzD,KAAWE,kBAAkB,KAAcvR,YAAa5R,IACxD,KAAWmjB,kBAAkB,KAAc5hB,mBAAoB2hB,IAC/D,KAAW9V,OAAOyV,MAAyBE,MAAuBC,IAClE,MAAMI,WAAuBC,EAAA,EAC3B,WAAAjmB,GAQEgS,MAPqB,CACnB/Q,KAAM,SACNP,KAAM,IAAawlB,OACnBL,WACAjjB,eACAkjB,uBAGJ,E,0DCEF,MAAMf,EAAa,IAxDnB,MACE,WAAA/kB,CAAYmmB,GACVlmB,KAAKmmB,YAA8B5f,OAAOC,OAAO,MACjDxG,KAAKkmB,cAAgBA,GAAiB,CAAC,EACvClmB,KAAKomB,kBAAmB,CAC1B,CAMA,uBAAAC,CAAwBjH,EAAYC,GAClC,MAAMoB,EAAS,IAAWlV,MAAMmV,eAChCD,EAAOnT,MAAQ8R,EACfqB,EAAOlT,OAAS8R,EAChB,MAAMzd,EAAU6e,EAAO/D,WAAW,MAClC,MAAO,CAAE+D,SAAQ7e,UACnB,CAQA,0BAAAmjB,CAA2BuB,EAAUC,EAAWC,EAAa,GAC3DF,EAAWlV,KAAKE,KAAKgV,EAAWE,EAAa,MAC7CD,EAAYnV,KAAKE,KAAKiV,EAAYC,EAAa,MAG/C,MAAM5d,IAFN0d,GAAW,QAASA,KAEK,MADzBC,GAAY,QAASA,KACwB,GACxCvmB,KAAKmmB,YAAYvd,KACpB5I,KAAKmmB,YAAYvd,GAAO,IAE1B,IAAIic,EAAmB7kB,KAAKmmB,YAAYvd,GAAK6d,MAI7C,OAHK5B,IACHA,EAAmB7kB,KAAKqmB,wBAAwBC,EAAUC,IAErD1B,CACT,CAKA,sBAAAO,CAAuBP,GACrB,MAAMpE,EAASoE,EAAiBpE,QAC1B,MAAEnT,EAAK,OAAEC,GAAWkT,EACpB7X,GAAO0E,GAAS,KAAOC,GAAU,GACvCsX,EAAiBjjB,QAAQ8kB,iBACzB7B,EAAiBjjB,QAAQ+kB,UAAU,EAAG,EAAGrZ,EAAOC,GAChDvN,KAAKmmB,YAAYvd,GAAKL,KAAKsc,EAC7B,CACA,KAAAvS,GACEtS,KAAKmmB,YAAc,CAAC,CACtB,E","sources":["webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/graphics/gpu/GpuGraphicsAdaptor.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/mesh/gpu/GpuMeshAdapter.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/batcher/gpu/GpuBatchAdaptor.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/BindGroupSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/buffer/GpuBufferSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuColorMaskSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuDeviceSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuEncoderSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuLimitsSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuStencilSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/createUboElementsWGSL.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/createUboSyncFunctionWGSL.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuUboSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/buffer/UboBatch.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/GpuUniformBatchPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/pipeline/PipelineSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTarget.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuShaderSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuBlendModesToPixi.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStateSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadVideoSource.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/texture/GpuTextureSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/gpu/WebGPURenderer.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup.mjs';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { localUniformBitGroup2 } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GpuGraphicsAdaptor {\n  constructor() {\n    this._maxTextures = 0;\n  }\n  contextChange(renderer) {\n    const localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this._maxTextures = renderer.limits.maxBatchableTextures;\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"graphics\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(this._maxTextures),\n        localUniformBitGroup2,\n        roundPixelsBit\n      ]\n    });\n    this.shader = new Shader({\n      gpuProgram,\n      resources: {\n        // added on the fly!\n        localUniforms\n      }\n    });\n  }\n  execute(graphicsPipe, renderable) {\n    const context = renderable.context;\n    const shader = context.customShader || this.shader;\n    const renderer = graphicsPipe.renderer;\n    const contextSystem = renderer.graphicsContext;\n    const {\n      batcher,\n      instructions\n    } = contextSystem.getContextRenderData(context);\n    const encoder = renderer.encoder;\n    encoder.setGeometry(batcher.geometry, shader.gpuProgram);\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.setBindGroup(0, globalUniformsBindGroup, shader.gpuProgram);\n    const localBindGroup = renderer.renderPipes.uniformBatch.getUniformBindGroup(shader.resources.localUniforms, true);\n    encoder.setBindGroup(2, localBindGroup, shader.gpuProgram);\n    const batches = instructions.instructions;\n    let topology = null;\n    for (let i = 0; i < instructions.instructionSize; i++) {\n      const batch = batches[i];\n      if (batch.topology !== topology) {\n        topology = batch.topology;\n        encoder.setPipelineFromGeometryProgramAndState(\n          batcher.geometry,\n          shader.gpuProgram,\n          graphicsPipe.state,\n          batch.topology\n        );\n      }\n      shader.groups[1] = batch.bindGroup;\n      if (!batch.gpuBindGroup) {\n        const textureBatch = batch.textures;\n        batch.bindGroup = getTextureBatchBindGroup(\n          textureBatch.textures,\n          textureBatch.count,\n          this._maxTextures\n        );\n        batch.gpuBindGroup = renderer.bindGroup.getBindGroup(\n          batch.bindGroup,\n          shader.gpuProgram,\n          1\n        );\n      }\n      encoder.setBindGroup(1, batch.bindGroup, shader.gpuProgram);\n      encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n    }\n  }\n  destroy() {\n    this.shader.destroy(true);\n    this.shader = null;\n  }\n}\n/** @ignore */\nGpuGraphicsAdaptor.extension = {\n  type: [\n    ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"graphics\"\n};\n\nexport { GpuGraphicsAdaptor };\n//# sourceMappingURL=GpuGraphicsAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { textureBit } from '../../../rendering/high-shader/shader-bits/textureBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\n\n\"use strict\";\nclass GpuMeshAdapter {\n  init() {\n    const gpuProgram = compileHighShaderGpuProgram({\n      name: \"mesh\",\n      bits: [\n        localUniformBit,\n        textureBit,\n        roundPixelsBit\n      ]\n    });\n    this._shader = new Shader({\n      gpuProgram,\n      resources: {\n        uTexture: Texture.EMPTY._source,\n        uSampler: Texture.EMPTY._source.style,\n        textureUniforms: {\n          uTextureMatrix: { type: \"mat3x3<f32>\", value: new Matrix() }\n        }\n      }\n    });\n  }\n  execute(meshPipe, mesh) {\n    const renderer = meshPipe.renderer;\n    let shader = mesh._shader;\n    if (!shader) {\n      shader = this._shader;\n      shader.groups[2] = renderer.texture.getTextureBindGroup(mesh.texture);\n    } else if (!shader.gpuProgram) {\n      warn(\"Mesh shader has no gpuProgram\", mesh.shader);\n      return;\n    }\n    const gpuProgram = shader.gpuProgram;\n    if (gpuProgram.autoAssignGlobalUniforms) {\n      shader.groups[0] = renderer.globalUniforms.bindGroup;\n    }\n    if (gpuProgram.autoAssignLocalUniforms) {\n      const localUniforms = meshPipe.localUniforms;\n      shader.groups[1] = renderer.renderPipes.uniformBatch.getUniformBindGroup(localUniforms, true);\n    }\n    renderer.encoder.draw({\n      geometry: mesh._geometry,\n      shader,\n      state: mesh.state\n    });\n  }\n  destroy() {\n    this._shader.destroy(true);\n    this._shader = null;\n  }\n}\n/** @ignore */\nGpuMeshAdapter.extension = {\n  type: [\n    ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"mesh\"\n};\n\nexport { GpuMeshAdapter };\n//# sourceMappingURL=GpuMeshAdapter.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../renderers/shared/state/State.mjs';\nimport { getTextureBatchBindGroup } from './getTextureBatchBindGroup.mjs';\n\n\"use strict\";\nconst tempState = State.for2d();\nclass GpuBatchAdaptor {\n  start(batchPipe, geometry, shader) {\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    const program = shader.gpuProgram;\n    this._shader = shader;\n    this._geometry = geometry;\n    encoder.setGeometry(geometry, program);\n    tempState.blendMode = \"normal\";\n    renderer.pipeline.getPipeline(\n      geometry,\n      program,\n      tempState\n    );\n    const globalUniformsBindGroup = renderer.globalUniforms.bindGroup;\n    encoder.resetBindGroup(1);\n    encoder.setBindGroup(0, globalUniformsBindGroup, program);\n  }\n  execute(batchPipe, batch) {\n    const program = this._shader.gpuProgram;\n    const renderer = batchPipe.renderer;\n    const encoder = renderer.encoder;\n    if (!batch.bindGroup) {\n      const textureBatch = batch.textures;\n      batch.bindGroup = getTextureBatchBindGroup(\n        textureBatch.textures,\n        textureBatch.count,\n        renderer.limits.maxBatchableTextures\n      );\n    }\n    tempState.blendMode = batch.blendMode;\n    const gpuBindGroup = renderer.bindGroup.getBindGroup(\n      batch.bindGroup,\n      program,\n      1\n    );\n    const pipeline = renderer.pipeline.getPipeline(\n      this._geometry,\n      program,\n      tempState,\n      batch.topology\n    );\n    batch.bindGroup._touch(renderer.textureGC.count);\n    encoder.setPipeline(pipeline);\n    encoder.renderPassEncoder.setBindGroup(1, gpuBindGroup);\n    encoder.renderPassEncoder.drawIndexed(batch.size, 1, batch.start);\n  }\n}\n/** @ignore */\nGpuBatchAdaptor.extension = {\n  type: [\n    ExtensionType.WebGPUPipesAdaptor\n  ],\n  name: \"batch\"\n};\n\nexport { GpuBatchAdaptor };\n//# sourceMappingURL=GpuBatchAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass BindGroupSystem {\n  constructor(renderer) {\n    this._hash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_hash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getBindGroup(bindGroup, program, groupIndex) {\n    bindGroup._updateKey();\n    const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n    return gpuBindGroup;\n  }\n  _createBindGroup(group, program, groupIndex) {\n    const device = this._gpu.device;\n    const groupLayout = program.layout[groupIndex];\n    const entries = [];\n    const renderer = this._renderer;\n    for (const j in groupLayout) {\n      const resource = group.resources[j] ?? group.resources[groupLayout[j]];\n      let gpuResource;\n      if (resource._resourceType === \"uniformGroup\") {\n        const uniformGroup = resource;\n        renderer.ubo.updateUniformGroup(uniformGroup);\n        const buffer = uniformGroup.buffer;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"buffer\") {\n        const buffer = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"bufferResource\") {\n        const bufferResource = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n          offset: bufferResource.offset,\n          size: bufferResource.size\n        };\n      } else if (resource._resourceType === \"textureSampler\") {\n        const sampler = resource;\n        gpuResource = renderer.texture.getGpuSampler(sampler);\n      } else if (resource._resourceType === \"textureSource\") {\n        const texture = resource;\n        gpuResource = renderer.texture.getGpuSource(texture).createView({});\n      }\n      entries.push({\n        binding: groupLayout[j],\n        resource: gpuResource\n      });\n    }\n    const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n    const gpuBindGroup = device.createBindGroup({\n      layout,\n      entries\n    });\n    this._hash[group._key] = gpuBindGroup;\n    return gpuBindGroup;\n  }\n  destroy() {\n    for (const key of Object.keys(this._hash)) {\n      this._hash[key] = null;\n    }\n    this._hash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBindGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"bindGroup\"\n};\n\nexport { BindGroupSystem };\n//# sourceMappingURL=BindGroupSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { fastCopy } from '../../shared/buffer/utils/fastCopy.mjs';\n\n\"use strict\";\nclass GpuBufferSystem {\n  constructor(renderer) {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    this._managedBuffers = [];\n    renderer.renderableGC.addManagedHash(this, \"_gpuBuffers\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getGPUBuffer(buffer) {\n    return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n  }\n  updateBuffer(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n    const data = buffer.data;\n    if (buffer._updateID && data) {\n      buffer._updateID = 0;\n      this._gpu.device.queue.writeBuffer(\n        gpuBuffer,\n        0,\n        data.buffer,\n        0,\n        // round to the nearest 4 bytes\n        (buffer._updateSize || data.byteLength) + 3 & ~3\n      );\n    }\n    return gpuBuffer;\n  }\n  /** dispose all WebGL resources of all managed buffers */\n  destroyAll() {\n    for (const id in this._gpuBuffers) {\n      this._gpuBuffers[id].destroy();\n    }\n    this._gpuBuffers = {};\n  }\n  createGPUBuffer(buffer) {\n    if (!this._gpuBuffers[buffer.uid]) {\n      buffer.on(\"update\", this.updateBuffer, this);\n      buffer.on(\"change\", this.onBufferChange, this);\n      buffer.on(\"destroy\", this.onBufferDestroy, this);\n      this._managedBuffers.push(buffer);\n    }\n    const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);\n    buffer._updateID = 0;\n    if (buffer.data) {\n      fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange());\n      gpuBuffer.unmap();\n    }\n    this._gpuBuffers[buffer.uid] = gpuBuffer;\n    return gpuBuffer;\n  }\n  onBufferChange(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid];\n    gpuBuffer.destroy();\n    buffer._updateID = 0;\n    this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);\n  }\n  /**\n   * Disposes buffer\n   * @param buffer - buffer with data\n   */\n  onBufferDestroy(buffer) {\n    this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);\n    this._destroyBuffer(buffer);\n  }\n  destroy() {\n    this._managedBuffers.forEach((buffer) => this._destroyBuffer(buffer));\n    this._managedBuffers = null;\n    this._gpuBuffers = null;\n  }\n  _destroyBuffer(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid];\n    gpuBuffer.destroy();\n    buffer.off(\"update\", this.updateBuffer, this);\n    buffer.off(\"change\", this.onBufferChange, this);\n    buffer.off(\"destroy\", this.onBufferDestroy, this);\n    this._gpuBuffers[buffer.uid] = null;\n  }\n}\n/** @ignore */\nGpuBufferSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"buffer\"\n};\n\nexport { GpuBufferSystem };\n//# sourceMappingURL=GpuBufferSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuColorMaskSystem {\n  constructor(renderer) {\n    this._colorMaskCache = 15;\n    this._renderer = renderer;\n  }\n  setMask(colorMask) {\n    if (this._colorMaskCache === colorMask)\n      return;\n    this._colorMaskCache = colorMask;\n    this._renderer.pipeline.setColorMask(colorMask);\n  }\n  destroy() {\n    this._renderer = null;\n    this._colorMaskCache = null;\n  }\n}\n/** @ignore */\nGpuColorMaskSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"colorMask\"\n};\n\nexport { GpuColorMaskSystem };\n//# sourceMappingURL=GpuColorMaskSystem.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuDeviceSystem {\n  /**\n   * @param {WebGPURenderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  async init(options) {\n    if (this._initPromise)\n      return this._initPromise;\n    this._initPromise = this._createDeviceAndAdaptor(options).then((gpu) => {\n      this.gpu = gpu;\n      this._renderer.runners.contextChange.emit(this.gpu);\n    });\n    return this._initPromise;\n  }\n  /**\n   * Handle the context change event\n   * @param gpu\n   */\n  contextChange(gpu) {\n    this._renderer.gpu = gpu;\n  }\n  /**\n   * Helper class to create a WebGL Context\n   * @param {object} options - An options object that gets passed in to the canvas element containing the\n   *    context attributes\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n   * @returns {WebGLRenderingContext} the WebGL context\n   */\n  async _createDeviceAndAdaptor(options) {\n    const adapter = await DOMAdapter.get().getNavigator().gpu.requestAdapter({\n      powerPreference: options.powerPreference,\n      forceFallbackAdapter: options.forceFallbackAdapter\n    });\n    const requiredFeatures = [\n      \"texture-compression-bc\",\n      \"texture-compression-astc\",\n      \"texture-compression-etc2\"\n    ].filter((feature) => adapter.features.has(feature));\n    const device = await adapter.requestDevice({\n      requiredFeatures\n    });\n    return { adapter, device };\n  }\n  destroy() {\n    this.gpu = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuDeviceSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"device\"\n};\n/** The default options for the GpuDeviceSystem. */\nGpuDeviceSystem.defaultOptions = {\n  /**\n   * {@link WebGPUOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * Force the use of the fallback adapter\n   * @default false\n   */\n  forceFallbackAdapter: false\n};\n\nexport { GpuDeviceSystem };\n//# sourceMappingURL=GpuDeviceSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuEncoderSystem {\n  constructor(renderer) {\n    this._boundBindGroup = /* @__PURE__ */ Object.create(null);\n    this._boundVertexBuffer = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  renderStart() {\n    this.commandFinished = new Promise((resolve) => {\n      this._resolveCommandFinished = resolve;\n    });\n    this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n  }\n  beginRenderPass(gpuRenderTarget) {\n    this.endRenderPass();\n    this._clearCache();\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n  }\n  endRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n    }\n    this.renderPassEncoder = null;\n  }\n  setViewport(viewport) {\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n  }\n  setPipelineFromGeometryProgramAndState(geometry, program, state, topology) {\n    const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n    this.setPipeline(pipeline);\n  }\n  setPipeline(pipeline) {\n    if (this._boundPipeline === pipeline)\n      return;\n    this._boundPipeline = pipeline;\n    this.renderPassEncoder.setPipeline(pipeline);\n  }\n  _setVertexBuffer(index, buffer) {\n    if (this._boundVertexBuffer[index] === buffer)\n      return;\n    this._boundVertexBuffer[index] = buffer;\n    this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n  }\n  _setIndexBuffer(buffer) {\n    if (this._boundIndexBuffer === buffer)\n      return;\n    this._boundIndexBuffer = buffer;\n    const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? \"uint16\" : \"uint32\";\n    this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n  }\n  resetBindGroup(index) {\n    this._boundBindGroup[index] = null;\n  }\n  setBindGroup(index, bindGroup, program) {\n    if (this._boundBindGroup[index] === bindGroup)\n      return;\n    this._boundBindGroup[index] = bindGroup;\n    bindGroup._touch(this._renderer.textureGC.count);\n    const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n    this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n  }\n  setGeometry(geometry, program) {\n    const buffersToBind = this._renderer.pipeline.getBufferNamesToBind(geometry, program);\n    for (const i in buffersToBind) {\n      this._setVertexBuffer(i, geometry.attributes[buffersToBind[i]].buffer);\n    }\n    if (geometry.indexBuffer) {\n      this._setIndexBuffer(geometry.indexBuffer);\n    }\n  }\n  _setShaderBindGroups(shader, skipSync) {\n    for (const i in shader.groups) {\n      const bindGroup = shader.groups[i];\n      if (!skipSync) {\n        this._syncBindGroup(bindGroup);\n      }\n      this.setBindGroup(i, bindGroup, shader.gpuProgram);\n    }\n  }\n  _syncBindGroup(bindGroup) {\n    for (const j in bindGroup.resources) {\n      const resource = bindGroup.resources[j];\n      if (resource.isUniformGroup) {\n        this._renderer.ubo.updateUniformGroup(resource);\n      }\n    }\n  }\n  draw(options) {\n    const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n    this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n    this.setGeometry(geometry, shader.gpuProgram);\n    this._setShaderBindGroups(shader, skipSync);\n    if (geometry.indexBuffer) {\n      this.renderPassEncoder.drawIndexed(\n        size || geometry.indexBuffer.data.length,\n        instanceCount ?? geometry.instanceCount,\n        start || 0\n      );\n    } else {\n      this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount ?? geometry.instanceCount, start || 0);\n    }\n  }\n  finishRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n      this.renderPassEncoder = null;\n    }\n  }\n  postrender() {\n    this.finishRenderPass();\n    this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n    this._resolveCommandFinished();\n    this.commandEncoder = null;\n  }\n  // restores a render pass if finishRenderPass was called\n  // not optimised as really used for debugging!\n  // used when we want to stop drawing and log a texture..\n  restoreRenderPass() {\n    const descriptor = this._renderer.renderTarget.adaptor.getDescriptor(\n      this._renderer.renderTarget.renderTarget,\n      false,\n      [0, 0, 0, 1]\n    );\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n    const boundPipeline = this._boundPipeline;\n    const boundVertexBuffer = { ...this._boundVertexBuffer };\n    const boundIndexBuffer = this._boundIndexBuffer;\n    const boundBindGroup = { ...this._boundBindGroup };\n    this._clearCache();\n    const viewport = this._renderer.renderTarget.viewport;\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    this.setPipeline(boundPipeline);\n    for (const i in boundVertexBuffer) {\n      this._setVertexBuffer(i, boundVertexBuffer[i]);\n    }\n    for (const i in boundBindGroup) {\n      this.setBindGroup(i, boundBindGroup[i], null);\n    }\n    this._setIndexBuffer(boundIndexBuffer);\n  }\n  _clearCache() {\n    for (let i = 0; i < 16; i++) {\n      this._boundBindGroup[i] = null;\n      this._boundVertexBuffer[i] = null;\n    }\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this._gpu = null;\n    this._boundBindGroup = null;\n    this._boundVertexBuffer = null;\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n}\n/** @ignore */\nGpuEncoderSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"encoder\",\n  priority: 1\n};\n\nexport { GpuEncoderSystem };\n//# sourceMappingURL=GpuEncoderSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuLimitsSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  contextChange() {\n    this.maxTextures = this._renderer.device.gpu.device.limits.maxSampledTexturesPerShaderStage;\n    this.maxBatchableTextures = this.maxTextures;\n  }\n  destroy() {\n  }\n}\n/** @ignore */\nGpuLimitsSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"limits\"\n};\n\nexport { GpuLimitsSystem };\n//# sourceMappingURL=GpuLimitsSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { STENCIL_MODES } from '../shared/state/const.mjs';\n\n\"use strict\";\nclass GpuStencilSystem {\n  constructor(renderer) {\n    this._renderTargetStencilState = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  onRenderTargetChange(renderTarget) {\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: STENCIL_MODES.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this._activeRenderTarget = renderTarget;\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    const renderer = this._renderer;\n    renderer.pipeline.setStencilMode(stencilMode);\n    renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n  }\n  destroy() {\n    this._renderer.renderTarget.onRenderTargetChange.remove(this);\n    this._renderer = null;\n    this._activeRenderTarget = null;\n    this._renderTargetStencilState = null;\n  }\n}\n/** @ignore */\nGpuStencilSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"stencil\"\n};\n\nexport { GpuStencilSystem };\n//# sourceMappingURL=GpuStencilSystem.mjs.map\n","\"use strict\";\nconst WGSL_ALIGN_SIZE_DATA = {\n  i32: { align: 4, size: 4 },\n  u32: { align: 4, size: 4 },\n  f32: { align: 4, size: 4 },\n  f16: { align: 2, size: 2 },\n  \"vec2<i32>\": { align: 8, size: 8 },\n  \"vec2<u32>\": { align: 8, size: 8 },\n  \"vec2<f32>\": { align: 8, size: 8 },\n  \"vec2<f16>\": { align: 4, size: 4 },\n  \"vec3<i32>\": { align: 16, size: 12 },\n  \"vec3<u32>\": { align: 16, size: 12 },\n  \"vec3<f32>\": { align: 16, size: 12 },\n  \"vec3<f16>\": { align: 8, size: 6 },\n  \"vec4<i32>\": { align: 16, size: 16 },\n  \"vec4<u32>\": { align: 16, size: 16 },\n  \"vec4<f32>\": { align: 16, size: 16 },\n  \"vec4<f16>\": { align: 8, size: 8 },\n  \"mat2x2<f32>\": { align: 8, size: 16 },\n  \"mat2x2<f16>\": { align: 4, size: 8 },\n  \"mat3x2<f32>\": { align: 8, size: 24 },\n  \"mat3x2<f16>\": { align: 4, size: 12 },\n  \"mat4x2<f32>\": { align: 8, size: 32 },\n  \"mat4x2<f16>\": { align: 4, size: 16 },\n  \"mat2x3<f32>\": { align: 16, size: 32 },\n  \"mat2x3<f16>\": { align: 8, size: 16 },\n  \"mat3x3<f32>\": { align: 16, size: 48 },\n  \"mat3x3<f16>\": { align: 8, size: 24 },\n  \"mat4x3<f32>\": { align: 16, size: 64 },\n  \"mat4x3<f16>\": { align: 8, size: 32 },\n  \"mat2x4<f32>\": { align: 16, size: 32 },\n  \"mat2x4<f16>\": { align: 8, size: 16 },\n  \"mat3x4<f32>\": { align: 16, size: 48 },\n  \"mat3x4<f16>\": { align: 8, size: 24 },\n  \"mat4x4<f32>\": { align: 16, size: 64 },\n  \"mat4x4<f16>\": { align: 8, size: 32 }\n};\nfunction createUboElementsWGSL(uniformData) {\n  const uboElements = uniformData.map((data) => ({\n    data,\n    offset: 0,\n    size: 0\n  }));\n  let offset = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    let size = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].size;\n    const align = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].align;\n    if (!WGSL_ALIGN_SIZE_DATA[uboElement.data.type]) {\n      throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${uboElement.data.type}`);\n    }\n    if (uboElement.data.size > 1) {\n      size = Math.max(size, align) * uboElement.data.size;\n    }\n    offset = Math.ceil(offset / align) * align;\n    uboElement.size = size;\n    uboElement.offset = offset;\n    offset += size;\n  }\n  offset = Math.ceil(offset / 16) * 16;\n  return { uboElements, size: offset };\n}\n\nexport { WGSL_ALIGN_SIZE_DATA, createUboElementsWGSL };\n//# sourceMappingURL=createUboElementsWGSL.mjs.map\n","import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL.mjs';\n\n\"use strict\";\nfunction generateArraySyncWGSL(uboElement, offsetToAdd) {\n  const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n  const remainder = (align - size) / 4;\n  const data = uboElement.data.type.indexOf(\"i32\") >= 0 ? \"dataInt32\" : \"data\";\n  return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : \"\"}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 ${data}[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : \"\"}\n         }\n     `;\n}\n\nexport { generateArraySyncWGSL };\n//# sourceMappingURL=generateArraySyncWGSL.mjs.map\n","import { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction.mjs';\nimport { uboSyncFunctionsWGSL } from '../../../shared/shader/utils/uboSyncFunctions.mjs';\nimport { generateArraySyncWGSL } from './generateArraySyncWGSL.mjs';\n\n\"use strict\";\nfunction createUboSyncFunctionWGSL(uboElements) {\n  return createUboSyncFunction(\n    uboElements,\n    \"uboWgsl\",\n    generateArraySyncWGSL,\n    uboSyncFunctionsWGSL\n  );\n}\n\nexport { createUboSyncFunctionWGSL };\n//# sourceMappingURL=createUboSyncFunctionWGSL.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { UboSystem } from '../shared/shader/UboSystem.mjs';\nimport { createUboElementsWGSL } from './shader/utils/createUboElementsWGSL.mjs';\nimport { createUboSyncFunctionWGSL } from './shader/utils/createUboSyncFunctionWGSL.mjs';\n\n\"use strict\";\nclass GpuUboSystem extends UboSystem {\n  constructor() {\n    super({\n      createUboElements: createUboElementsWGSL,\n      generateUboSync: createUboSyncFunctionWGSL\n    });\n  }\n}\n/** @ignore */\nGpuUboSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"ubo\"\n};\n\nexport { GpuUboSystem };\n//# sourceMappingURL=GpuUboSystem.mjs.map\n","\"use strict\";\nclass UboBatch {\n  constructor({ minUniformOffsetAlignment }) {\n    this._minUniformOffsetAlignment = 256;\n    this.byteIndex = 0;\n    this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n    this.data = new Float32Array(65535);\n  }\n  clear() {\n    this.byteIndex = 0;\n  }\n  addEmptyGroup(size) {\n    if (size > this._minUniformOffsetAlignment / 4) {\n      throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n    }\n    const start = this.byteIndex;\n    let newSize = start + size * 4;\n    newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n    if (newSize > this.data.length * 4) {\n      throw new Error(\"UniformBufferBatch: ubo batch got too big\");\n    }\n    this.byteIndex = newSize;\n    return start;\n  }\n  addGroup(array) {\n    const offset = this.addEmptyGroup(array.length);\n    for (let i = 0; i < array.length; i++) {\n      this.data[offset / 4 + i] = array[i];\n    }\n    return offset;\n  }\n  destroy() {\n    this.data = null;\n  }\n}\n\nexport { UboBatch };\n//# sourceMappingURL=UboBatch.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Buffer } from '../shared/buffer/Buffer.mjs';\nimport { BufferResource } from '../shared/buffer/BufferResource.mjs';\nimport { BufferUsage } from '../shared/buffer/const.mjs';\nimport { UboBatch } from './buffer/UboBatch.mjs';\nimport { BindGroup } from './shader/BindGroup.mjs';\n\n\"use strict\";\nconst minUniformOffsetAlignment = 128;\nclass GpuUniformBatchPipe {\n  constructor(renderer) {\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    // number of buffers..\n    this._buffers = [];\n    this._bindGroups = [];\n    this._bufferResources = [];\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    this._batchBuffer = new UboBatch({ minUniformOffsetAlignment });\n    const totalBuffers = 256 / minUniformOffsetAlignment;\n    for (let i = 0; i < totalBuffers; i++) {\n      let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n      if (i === 0)\n        usage |= BufferUsage.COPY_SRC;\n      this._buffers.push(new Buffer({\n        data: this._batchBuffer.data,\n        usage\n      }));\n    }\n  }\n  renderEnd() {\n    this._uploadBindGroups();\n    this._resetBindGroups();\n  }\n  _resetBindGroups() {\n    for (const i in this._bindGroupHash) {\n      this._bindGroupHash[i] = null;\n    }\n    this._batchBuffer.clear();\n  }\n  // just works for single bind groups for now\n  getUniformBindGroup(group, duplicate) {\n    if (!duplicate && this._bindGroupHash[group.uid]) {\n      return this._bindGroupHash[group.uid];\n    }\n    this._renderer.ubo.ensureUniformGroup(group);\n    const data = group.buffer.data;\n    const offset = this._batchBuffer.addEmptyGroup(data.length);\n    this._renderer.ubo.syncUniformGroup(group, this._batchBuffer.data, offset / 4);\n    this._bindGroupHash[group.uid] = this._getBindGroup(offset / minUniformOffsetAlignment);\n    return this._bindGroupHash[group.uid];\n  }\n  getUboResource(group) {\n    this._renderer.ubo.updateUniformGroup(group);\n    const data = group.buffer.data;\n    const offset = this._batchBuffer.addGroup(data);\n    return this._getBufferResource(offset / minUniformOffsetAlignment);\n  }\n  getArrayBindGroup(data) {\n    const offset = this._batchBuffer.addGroup(data);\n    return this._getBindGroup(offset / minUniformOffsetAlignment);\n  }\n  getArrayBufferResource(data) {\n    const offset = this._batchBuffer.addGroup(data);\n    const index = offset / minUniformOffsetAlignment;\n    return this._getBufferResource(index);\n  }\n  _getBufferResource(index) {\n    if (!this._bufferResources[index]) {\n      const buffer = this._buffers[index % 2];\n      this._bufferResources[index] = new BufferResource({\n        buffer,\n        offset: (index / 2 | 0) * 256,\n        size: minUniformOffsetAlignment\n      });\n    }\n    return this._bufferResources[index];\n  }\n  _getBindGroup(index) {\n    if (!this._bindGroups[index]) {\n      const bindGroup = new BindGroup({\n        0: this._getBufferResource(index)\n      });\n      this._bindGroups[index] = bindGroup;\n    }\n    return this._bindGroups[index];\n  }\n  _uploadBindGroups() {\n    const bufferSystem = this._renderer.buffer;\n    const firstBuffer = this._buffers[0];\n    firstBuffer.update(this._batchBuffer.byteIndex);\n    bufferSystem.updateBuffer(firstBuffer);\n    const commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n    for (let i = 1; i < this._buffers.length; i++) {\n      const buffer = this._buffers[i];\n      commandEncoder.copyBufferToBuffer(\n        bufferSystem.getGPUBuffer(firstBuffer),\n        minUniformOffsetAlignment,\n        bufferSystem.getGPUBuffer(buffer),\n        0,\n        this._batchBuffer.byteIndex\n      );\n    }\n    this._renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n  }\n  destroy() {\n    for (let i = 0; i < this._bindGroups.length; i++) {\n      this._bindGroups[i].destroy();\n    }\n    this._bindGroups = null;\n    this._bindGroupHash = null;\n    for (let i = 0; i < this._buffers.length; i++) {\n      this._buffers[i].destroy();\n    }\n    this._buffers = null;\n    for (let i = 0; i < this._bufferResources.length; i++) {\n      this._bufferResources[i].destroy();\n    }\n    this._bufferResources = null;\n    this._batchBuffer.destroy();\n    this._bindGroupHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuUniformBatchPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"uniformBatch\"\n};\n\nexport { GpuUniformBatchPipe };\n//# sourceMappingURL=GpuUniformBatchPipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { ensureAttributes } from '../../gl/shader/program/ensureAttributes.mjs';\nimport { STENCIL_MODES } from '../../shared/state/const.mjs';\nimport { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi.mjs';\n\n\"use strict\";\nconst topologyStringToId = {\n  \"point-list\": 0,\n  \"line-list\": 1,\n  \"line-strip\": 2,\n  \"triangle-list\": 3,\n  \"triangle-strip\": 4\n};\nfunction getGraphicsStateKey(geometryLayout, shaderKey, state, blendMode, topology) {\n  return geometryLayout << 24 | shaderKey << 16 | state << 10 | blendMode << 5 | topology;\n}\nfunction getGlobalStateKey(stencilStateId, multiSampleCount, colorMask, renderTarget) {\n  return colorMask << 6 | stencilStateId << 3 | renderTarget << 1 | multiSampleCount;\n}\nclass PipelineSystem {\n  constructor(renderer) {\n    this._moduleCache = /* @__PURE__ */ Object.create(null);\n    this._bufferLayoutsCache = /* @__PURE__ */ Object.create(null);\n    this._bindingNamesCache = /* @__PURE__ */ Object.create(null);\n    this._pipeCache = /* @__PURE__ */ Object.create(null);\n    this._pipeStateCaches = /* @__PURE__ */ Object.create(null);\n    this._colorMask = 15;\n    this._multisampleCount = 1;\n    this._renderer = renderer;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n    this.setStencilMode(STENCIL_MODES.DISABLED);\n    this._updatePipeHash();\n  }\n  setMultisampleCount(multisampleCount) {\n    if (this._multisampleCount === multisampleCount)\n      return;\n    this._multisampleCount = multisampleCount;\n    this._updatePipeHash();\n  }\n  setRenderTarget(renderTarget) {\n    this._multisampleCount = renderTarget.msaaSamples;\n    this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n    this._updatePipeHash();\n  }\n  setColorMask(colorMask) {\n    if (this._colorMask === colorMask)\n      return;\n    this._colorMask = colorMask;\n    this._updatePipeHash();\n  }\n  setStencilMode(stencilMode) {\n    if (this._stencilMode === stencilMode)\n      return;\n    this._stencilMode = stencilMode;\n    this._stencilState = GpuStencilModesToPixi[stencilMode];\n    this._updatePipeHash();\n  }\n  setPipeline(geometry, program, state, passEncoder) {\n    const pipeline = this.getPipeline(geometry, program, state);\n    passEncoder.setPipeline(pipeline);\n  }\n  getPipeline(geometry, program, state, topology) {\n    if (!geometry._layoutKey) {\n      ensureAttributes(geometry, program.attributeData);\n      this._generateBufferKey(geometry);\n    }\n    topology || (topology = geometry.topology);\n    const key = getGraphicsStateKey(\n      geometry._layoutKey,\n      program._layoutKey,\n      state.data,\n      state._blendModeId,\n      topologyStringToId[topology]\n    );\n    if (this._pipeCache[key])\n      return this._pipeCache[key];\n    this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n    return this._pipeCache[key];\n  }\n  _createPipeline(geometry, program, state, topology) {\n    const device = this._gpu.device;\n    const buffers = this._createVertexBufferLayouts(geometry, program);\n    const blendModes = this._renderer.state.getColorTargets(state);\n    blendModes[0].writeMask = this._stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n    const layout = this._renderer.shader.getProgramData(program).pipeline;\n    const descriptor = {\n      // TODO later check if its helpful to create..\n      // layout,\n      vertex: {\n        module: this._getModule(program.vertex.source),\n        entryPoint: program.vertex.entryPoint,\n        // geometry..\n        buffers\n      },\n      fragment: {\n        module: this._getModule(program.fragment.source),\n        entryPoint: program.fragment.entryPoint,\n        targets: blendModes\n      },\n      primitive: {\n        topology,\n        cullMode: state.cullMode\n      },\n      layout,\n      multisample: {\n        count: this._multisampleCount\n      },\n      // depthStencil,\n      label: `PIXI Pipeline`\n    };\n    if (this._depthStencilAttachment) {\n      descriptor.depthStencil = {\n        ...this._stencilState,\n        format: \"depth24plus-stencil8\",\n        depthWriteEnabled: state.depthTest,\n        depthCompare: state.depthTest ? \"less\" : \"always\"\n      };\n    }\n    const pipeline = device.createRenderPipeline(descriptor);\n    return pipeline;\n  }\n  _getModule(code) {\n    return this._moduleCache[code] || this._createModule(code);\n  }\n  _createModule(code) {\n    const device = this._gpu.device;\n    this._moduleCache[code] = device.createShaderModule({\n      code\n    });\n    return this._moduleCache[code];\n  }\n  _generateBufferKey(geometry) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(geometry.attributes).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = geometry.attributes[attributeKeys[i]];\n      keyGen[index++] = attribute.offset;\n      keyGen[index++] = attribute.format;\n      keyGen[index++] = attribute.stride;\n      keyGen[index++] = attribute.instance;\n    }\n    const stringKey = keyGen.join(\"|\");\n    geometry._layoutKey = createIdFromString(stringKey, \"geometry\");\n    return geometry._layoutKey;\n  }\n  _generateAttributeLocationsKey(program) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(program.attributeData).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = program.attributeData[attributeKeys[i]];\n      keyGen[index++] = attribute.location;\n    }\n    const stringKey = keyGen.join(\"|\");\n    program._attributeLocationsKey = createIdFromString(stringKey, \"programAttributes\");\n    return program._attributeLocationsKey;\n  }\n  /**\n   * Returns a hash of buffer names mapped to bind locations.\n   * This is used to bind the correct buffer to the correct location in the shader.\n   * @param geometry - The geometry where to get the buffer names\n   * @param program - The program where to get the buffer names\n   * @returns An object of buffer names mapped to the bind location.\n   */\n  getBufferNamesToBind(geometry, program) {\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bindingNamesCache[key])\n      return this._bindingNamesCache[key];\n    const data = this._createVertexBufferLayouts(geometry, program);\n    const bufferNamesToBind = /* @__PURE__ */ Object.create(null);\n    const attributeData = program.attributeData;\n    for (let i = 0; i < data.length; i++) {\n      const attributes = Object.values(data[i].attributes);\n      const shaderLocation = attributes[0].shaderLocation;\n      for (const j in attributeData) {\n        if (attributeData[j].location === shaderLocation) {\n          bufferNamesToBind[i] = j;\n          break;\n        }\n      }\n    }\n    this._bindingNamesCache[key] = bufferNamesToBind;\n    return bufferNamesToBind;\n  }\n  _createVertexBufferLayouts(geometry, program) {\n    if (!program._attributeLocationsKey)\n      this._generateAttributeLocationsKey(program);\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bufferLayoutsCache[key]) {\n      return this._bufferLayoutsCache[key];\n    }\n    const vertexBuffersLayout = [];\n    geometry.buffers.forEach((buffer) => {\n      const bufferEntry = {\n        arrayStride: 0,\n        stepMode: \"vertex\",\n        attributes: []\n      };\n      const bufferEntryAttributes = bufferEntry.attributes;\n      for (const i in program.attributeData) {\n        const attribute = geometry.attributes[i];\n        if ((attribute.divisor ?? 1) !== 1) {\n          warn(`Attribute ${i} has an invalid divisor value of '${attribute.divisor}'. WebGPU only supports a divisor value of 1`);\n        }\n        if (attribute.buffer === buffer) {\n          bufferEntry.arrayStride = attribute.stride;\n          bufferEntry.stepMode = attribute.instance ? \"instance\" : \"vertex\";\n          bufferEntryAttributes.push({\n            shaderLocation: program.attributeData[i].location,\n            offset: attribute.offset,\n            format: attribute.format\n          });\n        }\n      }\n      if (bufferEntryAttributes.length) {\n        vertexBuffersLayout.push(bufferEntry);\n      }\n    });\n    this._bufferLayoutsCache[key] = vertexBuffersLayout;\n    return vertexBuffersLayout;\n  }\n  _updatePipeHash() {\n    const key = getGlobalStateKey(\n      this._stencilMode,\n      this._multisampleCount,\n      this._colorMask,\n      this._depthStencilAttachment\n    );\n    if (!this._pipeStateCaches[key]) {\n      this._pipeStateCaches[key] = /* @__PURE__ */ Object.create(null);\n    }\n    this._pipeCache = this._pipeStateCaches[key];\n  }\n  destroy() {\n    this._renderer = null;\n    this._bufferLayoutsCache = null;\n  }\n}\n/** @ignore */\nPipelineSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"pipeline\"\n};\n\nexport { PipelineSystem };\n//# sourceMappingURL=PipelineSystem.mjs.map\n","\"use strict\";\nclass GpuRenderTarget {\n  constructor() {\n    this.contexts = [];\n    this.msaaTextures = [];\n    this.msaaSamples = 1;\n  }\n}\n\nexport { GpuRenderTarget };\n//# sourceMappingURL=GpuRenderTarget.mjs.map\n","import { CLEAR } from '../../gl/const.mjs';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource.mjs';\nimport { GpuRenderTarget } from './GpuRenderTarget.mjs';\n\n\"use strict\";\nclass GpuRenderTargetAdaptor {\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderer = this._renderer;\n    const baseGpuTexture = this._getGpuColorTexture(\n      sourceRenderSurfaceTexture\n    );\n    const backGpuTexture = renderer.texture.getGpuSource(\n      destinationTexture.source\n    );\n    renderer.encoder.commandEncoder.copyTextureToTexture(\n      {\n        texture: baseGpuTexture,\n        origin: originSrc\n      },\n      {\n        texture: backGpuTexture,\n        origin: originDest\n      },\n      size\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n    gpuRenderTarget.descriptor = descriptor;\n    this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n    this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n    this._renderer.encoder.setViewport(viewport);\n  }\n  finishRenderPass() {\n    this._renderer.encoder.endRenderPass();\n  }\n  /**\n   * returns the gpu texture for the first color texture in the render target\n   * mainly used by the filter manager to get copy the texture for blending\n   * @param renderTarget\n   * @returns a gpu texture\n   */\n  _getGpuColorTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (gpuRenderTarget.contexts[0]) {\n      return gpuRenderTarget.contexts[0].getCurrentTexture();\n    }\n    return this._renderer.texture.getGpuSource(\n      renderTarget.colorTextures[0].source\n    );\n  }\n  getDescriptor(renderTarget, clear, clearValue) {\n    if (typeof clear === \"boolean\") {\n      clear = clear ? CLEAR.ALL : CLEAR.NONE;\n    }\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const colorAttachments = renderTarget.colorTextures.map(\n      (texture, i) => {\n        const context = gpuRenderTarget.contexts[i];\n        let view;\n        let resolveTarget;\n        if (context) {\n          const currentTexture = context.getCurrentTexture();\n          const canvasTextureView = currentTexture.createView();\n          view = canvasTextureView;\n        } else {\n          view = this._renderer.texture.getGpuSource(texture).createView({\n            mipLevelCount: 1\n          });\n        }\n        if (gpuRenderTarget.msaaTextures[i]) {\n          resolveTarget = view;\n          view = this._renderer.texture.getTextureView(\n            gpuRenderTarget.msaaTextures[i]\n          );\n        }\n        const loadOp = clear & CLEAR.COLOR ? \"clear\" : \"load\";\n        clearValue ?? (clearValue = renderTargetSystem.defaultClearColor);\n        return {\n          view,\n          resolveTarget,\n          clearValue,\n          storeOp: \"store\",\n          loadOp\n        };\n      }\n    );\n    let depthStencilAttachment;\n    if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture) {\n      renderTarget.ensureDepthStencilTexture();\n      renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n    }\n    if (renderTarget.depthStencilTexture) {\n      const stencilLoadOp = clear & CLEAR.STENCIL ? \"clear\" : \"load\";\n      const depthLoadOp = clear & CLEAR.DEPTH ? \"clear\" : \"load\";\n      depthStencilAttachment = {\n        view: this._renderer.texture.getGpuSource(renderTarget.depthStencilTexture.source).createView(),\n        stencilStoreOp: \"store\",\n        stencilLoadOp,\n        depthClearValue: 1,\n        depthLoadOp,\n        depthStoreOp: \"store\"\n      };\n    }\n    const descriptor = {\n      colorAttachments,\n      depthStencilAttachment\n    };\n    return descriptor;\n  }\n  clear(renderTarget, clear = true, clearColor, viewport) {\n    if (!clear)\n      return;\n    const { gpu, encoder } = this._renderer;\n    const device = gpu.device;\n    const standAlone = encoder.commandEncoder === null;\n    if (standAlone) {\n      const commandEncoder = device.createCommandEncoder();\n      const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n      passEncoder.end();\n      const gpuCommands = commandEncoder.finish();\n      device.queue.submit([gpuCommands]);\n    } else {\n      this.startRenderPass(renderTarget, clear, clearColor, viewport);\n    }\n  }\n  initGpuRenderTarget(renderTarget) {\n    renderTarget.isRoot = true;\n    const gpuRenderTarget = new GpuRenderTarget();\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (colorTexture instanceof CanvasSource) {\n        const context = colorTexture.resource.getContext(\n          \"webgpu\"\n        );\n        const alphaMode = colorTexture.transparent ? \"premultiplied\" : \"opaque\";\n        try {\n          context.configure({\n            device: this._renderer.gpu.device,\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            format: \"bgra8unorm\",\n            alphaMode\n          });\n        } catch (e) {\n          console.error(e);\n        }\n        gpuRenderTarget.contexts[i] = context;\n      }\n      gpuRenderTarget.msaa = colorTexture.source.antialias;\n      if (colorTexture.source.antialias) {\n        const msaaTexture = new TextureSource({\n          width: 0,\n          height: 0,\n          sampleCount: 4\n        });\n        gpuRenderTarget.msaaTextures[i] = msaaTexture;\n      }\n    });\n    if (gpuRenderTarget.msaa) {\n      gpuRenderTarget.msaaSamples = 4;\n      if (renderTarget.depthStencilTexture) {\n        renderTarget.depthStencilTexture.source.sampleCount = 4;\n      }\n    }\n    return gpuRenderTarget;\n  }\n  destroyGpuRenderTarget(gpuRenderTarget) {\n    gpuRenderTarget.contexts.forEach((context) => {\n      context.unconfigure();\n    });\n    gpuRenderTarget.msaaTextures.forEach((texture) => {\n      texture.destroy();\n    });\n    gpuRenderTarget.msaaTextures.length = 0;\n    gpuRenderTarget.contexts.length = 0;\n  }\n  ensureDepthStencilTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa) {\n      renderTarget.depthStencilTexture.source.sampleCount = 4;\n    }\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    gpuRenderTarget.width = renderTarget.width;\n    gpuRenderTarget.height = renderTarget.height;\n    if (gpuRenderTarget.msaa) {\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const msaaTexture = gpuRenderTarget.msaaTextures[i];\n        msaaTexture?.resize(\n          colorTexture.source.width,\n          colorTexture.source.height,\n          colorTexture.source._resolution\n        );\n      });\n    }\n  }\n}\n\nexport { GpuRenderTargetAdaptor };\n//# sourceMappingURL=GpuRenderTargetAdaptor.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem.mjs';\nimport { GpuRenderTargetAdaptor } from './GpuRenderTargetAdaptor.mjs';\n\n\"use strict\";\nclass GpuRenderTargetSystem extends RenderTargetSystem {\n  constructor(renderer) {\n    super(renderer);\n    this.adaptor = new GpuRenderTargetAdaptor();\n    this.adaptor.init(renderer, this);\n  }\n}\n/** @ignore */\nGpuRenderTargetSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"renderTarget\"\n};\n\nexport { GpuRenderTargetSystem };\n//# sourceMappingURL=GpuRenderTargetSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuShaderSystem {\n  constructor() {\n    this._gpuProgramData = /* @__PURE__ */ Object.create(null);\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getProgramData(program) {\n    return this._gpuProgramData[program._layoutKey] || this._createGPUProgramData(program);\n  }\n  _createGPUProgramData(program) {\n    const device = this._gpu.device;\n    const bindGroups = program.gpuLayout.map((group) => device.createBindGroupLayout({ entries: group }));\n    const pipelineLayoutDesc = { bindGroupLayouts: bindGroups };\n    this._gpuProgramData[program._layoutKey] = {\n      bindGroups,\n      pipeline: device.createPipelineLayout(pipelineLayoutDesc)\n    };\n    return this._gpuProgramData[program._layoutKey];\n  }\n  destroy() {\n    this._gpu = null;\n    this._gpuProgramData = null;\n  }\n}\n/** @ignore */\nGpuShaderSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"shader\"\n};\n\nexport { GpuShaderSystem };\n//# sourceMappingURL=GpuShaderSystem.mjs.map\n","\"use strict\";\nconst GpuBlendModesToPixi = {};\nGpuBlendModesToPixi.normal = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.add = {\n  alpha: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.multiply = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"dst\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.screen = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.overlay = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.none = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"zero\",\n    dstFactor: \"zero\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"normal-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"add-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"screen-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.erase = {\n  alpha: {\n    srcFactor: \"zero\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"zero\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.min = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"min\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"min\"\n  }\n};\nGpuBlendModesToPixi.max = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"max\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"max\"\n  }\n};\n\nexport { GpuBlendModesToPixi };\n//# sourceMappingURL=GpuBlendModesToPixi.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { State } from '../../shared/state/State.mjs';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi.mjs';\n\n\"use strict\";\nclass GpuStateSystem {\n  constructor() {\n    this.defaultState = new State();\n    this.defaultState.blend = true;\n  }\n  contextChange(gpu) {\n    this.gpu = gpu;\n  }\n  /**\n   * Gets the blend mode data for the current state\n   * @param state - The state to get the blend mode from\n   */\n  getColorTargets(state) {\n    const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n    return [\n      {\n        format: \"bgra8unorm\",\n        writeMask: 0,\n        blend\n      }\n    ];\n  }\n  destroy() {\n    this.gpu = null;\n  }\n}\n/** @ignore */\nGpuStateSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"state\"\n};\n\nexport { GpuStateSystem };\n//# sourceMappingURL=GpuStateSystem.mjs.map\n","\"use strict\";\nconst gpuUploadBufferImageResource = {\n  type: \"image\",\n  upload(source, gpuTexture, gpu) {\n    const resource = source.resource;\n    const total = (source.pixelWidth | 0) * (source.pixelHeight | 0);\n    const bytesPerPixel = resource.byteLength / total;\n    gpu.device.queue.writeTexture(\n      { texture: gpuTexture },\n      resource,\n      {\n        offset: 0,\n        rowsPerImage: source.pixelHeight,\n        bytesPerRow: source.pixelHeight * bytesPerPixel\n      },\n      {\n        width: source.pixelWidth,\n        height: source.pixelHeight,\n        depthOrArrayLayers: 1\n      }\n    );\n  }\n};\n\nexport { gpuUploadBufferImageResource };\n//# sourceMappingURL=gpuUploadBufferImageResource.mjs.map\n","\"use strict\";\nconst blockDataMap = {\n  \"bc1-rgba-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"bc2-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc3-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc7-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"etc1-rgb-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"etc2-rgba8unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"astc-4x4-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 }\n};\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\nconst gpuUploadCompressedTextureResource = {\n  type: \"compressed\",\n  upload(source, gpuTexture, gpu) {\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const blockData = blockDataMap[source.format] || defaultBlockData;\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n      gpu.device.queue.writeTexture(\n        {\n          texture: gpuTexture,\n          mipLevel: i\n        },\n        levelBuffer,\n        {\n          offset: 0,\n          bytesPerRow\n        },\n        {\n          width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n          height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n          depthOrArrayLayers: 1\n        }\n      );\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\nexport { blockDataMap, gpuUploadCompressedTextureResource };\n//# sourceMappingURL=gpuUploadCompressedTextureResource.mjs.map\n","import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { warn } from '../../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst gpuUploadImageResource = {\n  type: \"image\",\n  upload(source, gpuTexture, gpu) {\n    const resource = source.resource;\n    if (!resource)\n      return;\n    if (globalThis.HTMLImageElement && resource instanceof HTMLImageElement) {\n      const canvas = DOMAdapter.get().createCanvas(resource.width, resource.height);\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(resource, 0, 0, resource.width, resource.height);\n      source.resource = canvas;\n      warn(\"ImageSource: Image element passed, converting to canvas and replacing resource.\");\n    }\n    const width = Math.min(gpuTexture.width, source.resourceWidth || source.pixelWidth);\n    const height = Math.min(gpuTexture.height, source.resourceHeight || source.pixelHeight);\n    const premultipliedAlpha = source.alphaMode === \"premultiply-alpha-on-upload\";\n    gpu.device.queue.copyExternalImageToTexture(\n      { source: resource },\n      { texture: gpuTexture, premultipliedAlpha },\n      {\n        width,\n        height\n      }\n    );\n  }\n};\n\nexport { gpuUploadImageResource };\n//# sourceMappingURL=gpuUploadImageSource.mjs.map\n","import { gpuUploadImageResource } from './gpuUploadImageSource.mjs';\n\n\"use strict\";\nconst gpuUploadVideoResource = {\n  type: \"video\",\n  upload(source, gpuTexture, gpu) {\n    gpuUploadImageResource.upload(source, gpuTexture, gpu);\n  }\n};\n\nexport { gpuUploadVideoResource };\n//# sourceMappingURL=gpuUploadVideoSource.mjs.map\n","\"use strict\";\nclass GpuMipmapGenerator {\n  constructor(device) {\n    this.device = device;\n    this.sampler = device.createSampler({ minFilter: \"linear\" });\n    this.pipelines = {};\n  }\n  _getMipmapPipeline(format) {\n    let pipeline = this.pipelines[format];\n    if (!pipeline) {\n      if (!this.mipmapShaderModule) {\n        this.mipmapShaderModule = this.device.createShaderModule({\n          code: (\n            /* wgsl */\n            `\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    `\n          )\n        });\n      }\n      pipeline = this.device.createRenderPipeline({\n        layout: \"auto\",\n        vertex: {\n          module: this.mipmapShaderModule,\n          entryPoint: \"vertexMain\"\n        },\n        fragment: {\n          module: this.mipmapShaderModule,\n          entryPoint: \"fragmentMain\",\n          targets: [{ format }]\n        }\n      });\n      this.pipelines[format] = pipeline;\n    }\n    return pipeline;\n  }\n  /**\n   * Generates mipmaps for the given GPUTexture from the data in level 0.\n   * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.\n   * @returns {module:External.GPUTexture} - The originally passed texture\n   */\n  generateMipmap(texture) {\n    const pipeline = this._getMipmapPipeline(texture.format);\n    if (texture.dimension === \"3d\" || texture.dimension === \"1d\") {\n      throw new Error(\"Generating mipmaps for non-2d textures is currently unsupported!\");\n    }\n    let mipTexture = texture;\n    const arrayLayerCount = texture.depthOrArrayLayers || 1;\n    const renderToSource = texture.usage & GPUTextureUsage.RENDER_ATTACHMENT;\n    if (!renderToSource) {\n      const mipTextureDescriptor = {\n        size: {\n          width: Math.ceil(texture.width / 2),\n          height: Math.ceil(texture.height / 2),\n          depthOrArrayLayers: arrayLayerCount\n        },\n        format: texture.format,\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: texture.mipLevelCount - 1\n      };\n      mipTexture = this.device.createTexture(mipTextureDescriptor);\n    }\n    const commandEncoder = this.device.createCommandEncoder({});\n    const bindGroupLayout = pipeline.getBindGroupLayout(0);\n    for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer) {\n      let srcView = texture.createView({\n        baseMipLevel: 0,\n        mipLevelCount: 1,\n        dimension: \"2d\",\n        baseArrayLayer: arrayLayer,\n        arrayLayerCount: 1\n      });\n      let dstMipLevel = renderToSource ? 1 : 0;\n      for (let i = 1; i < texture.mipLevelCount; ++i) {\n        const dstView = mipTexture.createView({\n          baseMipLevel: dstMipLevel++,\n          mipLevelCount: 1,\n          dimension: \"2d\",\n          baseArrayLayer: arrayLayer,\n          arrayLayerCount: 1\n        });\n        const passEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [{\n            view: dstView,\n            storeOp: \"store\",\n            loadOp: \"clear\",\n            clearValue: { r: 0, g: 0, b: 0, a: 0 }\n          }]\n        });\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [{\n            binding: 0,\n            resource: this.sampler\n          }, {\n            binding: 1,\n            resource: srcView\n          }]\n        });\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(3, 1, 0, 0);\n        passEncoder.end();\n        srcView = dstView;\n      }\n    }\n    if (!renderToSource) {\n      const mipLevelSize = {\n        width: Math.ceil(texture.width / 2),\n        height: Math.ceil(texture.height / 2),\n        depthOrArrayLayers: arrayLayerCount\n      };\n      for (let i = 1; i < texture.mipLevelCount; ++i) {\n        commandEncoder.copyTextureToTexture({\n          texture: mipTexture,\n          mipLevel: i - 1\n        }, {\n          texture,\n          mipLevel: i\n        }, mipLevelSize);\n        mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);\n        mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);\n      }\n    }\n    this.device.queue.submit([commandEncoder.finish()]);\n    if (!renderToSource) {\n      mipTexture.destroy();\n    }\n    return texture;\n  }\n}\n\nexport { GpuMipmapGenerator };\n//# sourceMappingURL=GpuMipmapGenerator.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\nimport { CanvasPool } from '../../shared/texture/CanvasPool.mjs';\nimport { BindGroup } from '../shader/BindGroup.mjs';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource.mjs';\nimport { gpuUploadCompressedTextureResource, blockDataMap } from './uploaders/gpuUploadCompressedTextureResource.mjs';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource.mjs';\nimport { gpuUploadVideoResource } from './uploaders/gpuUploadVideoSource.mjs';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator.mjs';\n\n\"use strict\";\nclass GpuTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._gpuSources = /* @__PURE__ */ Object.create(null);\n    this._gpuSamplers = /* @__PURE__ */ Object.create(null);\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    this._textureViewHash = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: gpuUploadImageResource,\n      buffer: gpuUploadBufferImageResource,\n      video: gpuUploadVideoResource,\n      compressed: gpuUploadCompressedTextureResource\n    };\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuSources\");\n    renderer.renderableGC.addManagedHash(this, \"_gpuSamplers\");\n    renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    renderer.renderableGC.addManagedHash(this, \"_textureViewHash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  initSource(source) {\n    if (source.autoGenerateMipmaps) {\n      const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (source.uploadMethodId !== \"compressed\") {\n      usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n      usage |= GPUTextureUsage.COPY_SRC;\n    }\n    const blockData = blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n    const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n    const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n    const textureDescriptor = {\n      label: source.label,\n      size: { width, height },\n      format: source.format,\n      sampleCount: source.sampleCount,\n      mipLevelCount: source.mipLevelCount,\n      dimension: source.dimension,\n      usage\n    };\n    const gpuTexture = this._gpu.device.createTexture(textureDescriptor);\n    this._gpuSources[source.uid] = gpuTexture;\n    if (!this.managedTextures.includes(source)) {\n      source.on(\"update\", this.onSourceUpdate, this);\n      source.on(\"resize\", this.onSourceResize, this);\n      source.on(\"destroy\", this.onSourceDestroy, this);\n      source.on(\"unload\", this.onSourceUnload, this);\n      source.on(\"updateMipmaps\", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    return gpuTexture;\n  }\n  onSourceUpdate(source) {\n    const gpuTexture = this.getGpuSource(source);\n    if (!gpuTexture)\n      return;\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source);\n    }\n  }\n  onSourceUnload(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (gpuTexture) {\n      this._gpuSources[source.uid] = null;\n      gpuTexture.destroy();\n    }\n  }\n  onUpdateMipmaps(source) {\n    if (!this._mipmapGenerator) {\n      this._mipmapGenerator = new GpuMipmapGenerator(this._gpu.device);\n    }\n    const gpuTexture = this.getGpuSource(source);\n    this._mipmapGenerator.generateMipmap(gpuTexture);\n  }\n  onSourceDestroy(source) {\n    source.off(\"update\", this.onSourceUpdate, this);\n    source.off(\"unload\", this.onSourceUnload, this);\n    source.off(\"destroy\", this.onSourceDestroy, this);\n    source.off(\"resize\", this.onSourceResize, this);\n    source.off(\"updateMipmaps\", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  onSourceResize(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (!gpuTexture) {\n      this.initSource(source);\n    } else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight) {\n      this._textureViewHash[source.uid] = null;\n      this._bindGroupHash[source.uid] = null;\n      this.onSourceUnload(source);\n      this.initSource(source);\n    }\n  }\n  _initSampler(sampler) {\n    this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n    return this._gpuSamplers[sampler._resourceId];\n  }\n  getGpuSampler(sampler) {\n    return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGpuSource(source) {\n    return this._gpuSources[source.uid] || this.initSource(source);\n  }\n  /**\n   * this returns s bind group for a specific texture, the bind group contains\n   * - the texture source\n   * - the texture style\n   * - the texture matrix\n   * This is cached so the bind group should only be created once per texture\n   * @param texture - the texture you want the bindgroup for\n   * @returns the bind group for the texture\n   */\n  getTextureBindGroup(texture) {\n    return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n  }\n  _createTextureBindGroup(texture) {\n    const source = texture.source;\n    this._bindGroupHash[texture.uid] = new BindGroup({\n      0: source,\n      1: source.style,\n      2: new UniformGroup({\n        uTextureMatrix: { type: \"mat3x3<f32>\", value: texture.textureMatrix.mapCoord }\n      })\n    });\n    return this._bindGroupHash[texture.uid];\n  }\n  getTextureView(texture) {\n    const source = texture.source;\n    return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n  }\n  _createTextureView(texture) {\n    this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n    return this._textureViewHash[texture.uid];\n  }\n  generateCanvas(texture) {\n    const renderer = this._renderer;\n    const commandEncoder = renderer.gpu.device.createCommandEncoder();\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = texture.source.pixelWidth;\n    canvas.height = texture.source.pixelHeight;\n    const context = canvas.getContext(\"webgpu\");\n    context.configure({\n      device: renderer.gpu.device,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      format: DOMAdapter.get().getNavigator().gpu.getPreferredCanvasFormat(),\n      alphaMode: \"premultiplied\"\n    });\n    commandEncoder.copyTextureToTexture({\n      texture: renderer.texture.getGpuSource(texture.source),\n      origin: {\n        x: 0,\n        y: 0\n      }\n    }, {\n      texture: context.getCurrentTexture()\n    }, {\n      width: canvas.width,\n      height: canvas.height\n    });\n    renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    return canvas;\n  }\n  getPixels(texture) {\n    const webGPUCanvas = this.generateCanvas(texture);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n    const context = canvasAndContext.context;\n    context.drawImage(webGPUCanvas, 0, 0);\n    const { width, height } = webGPUCanvas;\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = new Uint8ClampedArray(imageData.data.buffer);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return { pixels, width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    for (const k of Object.keys(this._bindGroupHash)) {\n      const key = Number(k);\n      const bindGroup = this._bindGroupHash[key];\n      bindGroup?.destroy();\n      this._bindGroupHash[key] = null;\n    }\n    this._gpu = null;\n    this._mipmapGenerator = null;\n    this._gpuSources = null;\n    this._bindGroupHash = null;\n    this._textureViewHash = null;\n    this._gpuSamplers = null;\n  }\n}\n/** @ignore */\nGpuTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"texture\"\n};\n\nexport { GpuTextureSystem };\n//# sourceMappingURL=GpuTextureSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuGraphicsAdaptor } from '../../../scene/graphics/gpu/GpuGraphicsAdaptor.mjs';\nimport { GpuMeshAdapter } from '../../../scene/mesh/gpu/GpuMeshAdapter.mjs';\nimport { GpuBatchAdaptor } from '../../batcher/gpu/GpuBatchAdaptor.mjs';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer.mjs';\nimport { SharedSystems, SharedRenderPipes } from '../shared/system/SharedSystems.mjs';\nimport { RendererType } from '../types.mjs';\nimport { BindGroupSystem } from './BindGroupSystem.mjs';\nimport { GpuBufferSystem } from './buffer/GpuBufferSystem.mjs';\nimport { GpuColorMaskSystem } from './GpuColorMaskSystem.mjs';\nimport { GpuDeviceSystem } from './GpuDeviceSystem.mjs';\nimport { GpuEncoderSystem } from './GpuEncoderSystem.mjs';\nimport { GpuLimitsSystem } from './GpuLimitsSystem.mjs';\nimport { GpuStencilSystem } from './GpuStencilSystem.mjs';\nimport { GpuUboSystem } from './GpuUboSystem.mjs';\nimport { GpuUniformBatchPipe } from './GpuUniformBatchPipe.mjs';\nimport { PipelineSystem } from './pipeline/PipelineSystem.mjs';\nimport { GpuRenderTargetSystem } from './renderTarget/GpuRenderTargetSystem.mjs';\nimport { GpuShaderSystem } from './shader/GpuShaderSystem.mjs';\nimport { GpuStateSystem } from './state/GpuStateSystem.mjs';\nimport { GpuTextureSystem } from './texture/GpuTextureSystem.mjs';\n\n\"use strict\";\nconst DefaultWebGPUSystems = [\n  ...SharedSystems,\n  GpuUboSystem,\n  GpuEncoderSystem,\n  GpuDeviceSystem,\n  GpuLimitsSystem,\n  GpuBufferSystem,\n  GpuTextureSystem,\n  GpuRenderTargetSystem,\n  GpuShaderSystem,\n  GpuStateSystem,\n  PipelineSystem,\n  GpuColorMaskSystem,\n  GpuStencilSystem,\n  BindGroupSystem\n];\nconst DefaultWebGPUPipes = [...SharedRenderPipes, GpuUniformBatchPipe];\nconst DefaultWebGPUAdapters = [GpuBatchAdaptor, GpuMeshAdapter, GpuGraphicsAdaptor];\nconst systems = [];\nconst renderPipes = [];\nconst renderPipeAdaptors = [];\nextensions.handleByNamedList(ExtensionType.WebGPUSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGPUPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGPUPipesAdaptor, renderPipeAdaptors);\nextensions.add(...DefaultWebGPUSystems, ...DefaultWebGPUPipes, ...DefaultWebGPUAdapters);\nclass WebGPURenderer extends AbstractRenderer {\n  constructor() {\n    const systemConfig = {\n      name: \"webgpu\",\n      type: RendererType.WEBGPU,\n      systems,\n      renderPipes,\n      renderPipeAdaptors\n    };\n    super(systemConfig);\n  }\n}\n\nexport { WebGPURenderer };\n//# sourceMappingURL=WebGPURenderer.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    canvasAndContext.context.resetTransform();\n    canvasAndContext.context.clearRect(0, 0, width, height);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n"],"names":["GpuGraphicsAdaptor","constructor","this","_maxTextures","contextChange","renderer","localUniforms","UniformGroup","uTransformMatrix","value","Matrix","type","uColor","Float32Array","uRound","limits","maxBatchableTextures","gpuProgram","name","bits","colorBit","generateTextureBatchBit","localUniformBit","roundPixelsBit","shader","Shader","resources","execute","graphicsPipe","renderable","context","customShader","contextSystem","graphicsContext","batcher","instructions","getContextRenderData","encoder","setGeometry","geometry","globalUniformsBindGroup","globalUniforms","bindGroup","setBindGroup","localBindGroup","renderPipes","uniformBatch","getUniformBindGroup","batches","topology","i","instructionSize","batch","setPipelineFromGeometryProgramAndState","state","groups","gpuBindGroup","textureBatch","textures","getTextureBatchBindGroup","count","getBindGroup","renderPassEncoder","drawIndexed","size","start","destroy","extension","WebGPUPipesAdaptor","GpuMeshAdapter","init","textureBit","_shader","uTexture","Texture","EMPTY","_source","uSampler","style","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","texture","getTextureBindGroup","autoAssignGlobalUniforms","autoAssignLocalUniforms","draw","_geometry","tempState","State","for2d","GpuBatchAdaptor","batchPipe","program","blendMode","pipeline","getPipeline","resetBindGroup","_touch","textureGC","setPipeline","BindGroupSystem","_hash","Object","create","_renderer","renderableGC","addManagedHash","gpu","_gpu","groupIndex","_updateKey","_key","_createBindGroup","group","device","groupLayout","layout","entries","j","resource","gpuResource","_resourceType","uniformGroup","ubo","updateUniformGroup","buffer","getGPUBuffer","offset","descriptor","bufferResource","sampler","getGpuSampler","getGpuSource","createView","push","binding","getProgramData","bindGroups","createBindGroup","key","keys","WebGPUSystem","GpuBufferSystem","_gpuBuffers","_managedBuffers","uid","createGPUBuffer","updateBuffer","gpuBuffer","data","_updateID","queue","writeBuffer","_updateSize","byteLength","destroyAll","id","on","onBufferChange","onBufferDestroy","createBuffer","fastCopy","getMappedRange","unmap","splice","indexOf","_destroyBuffer","forEach","off","GpuColorMaskSystem","_colorMaskCache","setMask","colorMask","setColorMask","GpuDeviceSystem","options","_initPromise","_createDeviceAndAdaptor","then","runners","emit","adapter","get","getNavigator","requestAdapter","powerPreference","forceFallbackAdapter","requiredFeatures","filter","feature","features","has","requestDevice","defaultOptions","GpuEncoderSystem","_boundBindGroup","_boundVertexBuffer","renderStart","commandFinished","Promise","resolve","_resolveCommandFinished","commandEncoder","createCommandEncoder","beginRenderPass","gpuRenderTarget","endRenderPass","_clearCache","end","setViewport","viewport","x","y","width","height","_boundPipeline","_setVertexBuffer","index","setVertexBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","BYTES_PER_ELEMENT","setIndexBuffer","buffersToBind","getBufferNamesToBind","attributes","indexBuffer","_setShaderBindGroups","skipSync","_syncBindGroup","isUniformGroup","instanceCount","length","getSize","finishRenderPass","postrender","submit","finish","restoreRenderPass","renderTarget","adaptor","getDescriptor","boundPipeline","boundVertexBuffer","boundIndexBuffer","boundBindGroup","priority","GpuLimitsSystem","maxTextures","maxSampledTexturesPerShaderStage","GpuStencilSystem","_renderTargetStencilState","onRenderTargetChange","add","stencilState","stencilMode","DISABLED","stencilReference","_activeRenderTarget","setStencilMode","setStencilReference","remove","WGSL_ALIGN_SIZE_DATA","i32","align","u32","f32","f16","createUboElementsWGSL","uniformData","uboElements","map","uboElement","Error","Math","max","ceil","generateArraySyncWGSL","offsetToAdd","remainder","createUboSyncFunctionWGSL","createUboSyncFunction","uboSyncFunctions","GpuUboSystem","UboSystem","super","createUboElements","generateUboSync","UboBatch","minUniformOffsetAlignment","_minUniformOffsetAlignment","byteIndex","clear","addEmptyGroup","newSize","addGroup","array","GpuUniformBatchPipe","_bindGroupHash","_buffers","_bindGroups","_bufferResources","_batchBuffer","usage","UNIFORM","COPY_DST","COPY_SRC","Buffer","renderEnd","_uploadBindGroups","_resetBindGroups","duplicate","ensureUniformGroup","syncUniformGroup","_getBindGroup","getUboResource","_getBufferResource","getArrayBindGroup","getArrayBufferResource","BufferResource","BindGroup","bufferSystem","firstBuffer","update","copyBufferToBuffer","WebGPUPipes","topologyStringToId","PipelineSystem","_moduleCache","_bufferLayoutsCache","_bindingNamesCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","msaaSamples","_depthStencilAttachment","depthStencilAttachment","_stencilMode","_stencilState","GpuStencilModesToPixi","passEncoder","_layoutKey","ensureAttributes","attributeData","_generateBufferKey","geometryLayout","shaderKey","getGraphicsStateKey","_blendModeId","_createPipeline","buffers","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","RENDERING_MASK_ADD","vertex","module","_getModule","source","entryPoint","fragment","targets","primitive","cullMode","multisample","label","depthStencil","format","depthWriteEnabled","depthTest","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","attributeKeys","sort","attribute","stride","instance","stringKey","join","createIdFromString","_generateAttributeLocationsKey","location","_attributeLocationsKey","bufferNamesToBind","shaderLocation","values","vertexBuffersLayout","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","divisor","stencilStateId","multiSampleCount","GpuRenderTarget","contexts","msaaTextures","GpuRenderTargetAdaptor","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","baseGpuTexture","_getGpuColorTexture","backGpuTexture","copyTextureToTexture","origin","startRenderPass","clearColor","getGpuRenderTarget","getCurrentTexture","colorTextures","clearValue","ALL","NONE","colorAttachments","view","resolveTarget","mipLevelCount","getTextureView","loadOp","COLOR","defaultClearColor","storeOp","stencil","depth","depthStencilTexture","ensureDepthStencilTexture","sampleCount","msaa","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","stencilStoreOp","depthClearValue","depthStoreOp","renderPassDescriptor","gpuCommands","initGpuRenderTarget","isRoot","colorTexture","CanvasSource","getContext","alphaMode","transparent","configure","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","e","console","error","antialias","msaaTexture","TextureSource","destroyGpuRenderTarget","unconfigure","resizeGpuRenderTarget","resize","_resolution","GpuRenderTargetSystem","RenderTargetSystem","GpuShaderSystem","_gpuProgramData","_createGPUProgramData","gpuLayout","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","GpuBlendModesToPixi","alpha","srcFactor","dstFactor","operation","color","GpuStateSystem","defaultState","blend","normal","gpuUploadBufferImageResource","upload","gpuTexture","total","pixelWidth","pixelHeight","bytesPerPixel","writeTexture","rowsPerImage","bytesPerRow","depthOrArrayLayers","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","mipWidth","mipHeight","blockData","levelBuffer","mipLevel","gpuUploadImageResource","globalThis","HTMLImageElement","canvas","createCanvas","drawImage","min","resourceWidth","resourceHeight","premultipliedAlpha","copyExternalImageToTexture","gpuUploadVideoResource","GpuMipmapGenerator","createSampler","minFilter","pipelines","_getMipmapPipeline","mipmapShaderModule","generateMipmap","dimension","mipTexture","arrayLayerCount","renderToSource","mipTextureDescriptor","createTexture","bindGroupLayout","getBindGroupLayout","arrayLayer","srcView","baseMipLevel","baseArrayLayer","dstMipLevel","dstView","r","g","b","a","mipLevelSize","GpuTextureSystem","managedTextures","_gpuSources","_gpuSamplers","_textureViewHash","_uploads","image","video","compressed","initSource","autoGenerateMipmaps","biggestDimension","floor","log2","uploadMethodId","textureDescriptor","includes","onSourceUpdate","onSourceResize","onSourceDestroy","onSourceUnload","onUpdateMipmaps","_mipmapGenerator","_initSampler","_resourceId","_createTextureBindGroup","textureMatrix","mapCoord","_createTextureView","generateCanvas","getPreferredCanvasFormat","getPixels","webGPUCanvas","canvasAndContext","CanvasPool","getOptimalCanvasAndContext","imageData","getImageData","pixels","Uint8ClampedArray","returnCanvasAndContext","slice","k","Number","DefaultWebGPUSystems","SharedSystems","DefaultWebGPUPipes","DefaultWebGPUAdapters","systems","renderPipeAdaptors","handleByNamedList","WebGPURenderer","AbstractRenderer","WEBGPU","canvasOptions","_canvasPool","enableFullScreen","_createCanvasAndContext","minWidth","minHeight","resolution","pop","resetTransform","clearRect"],"sourceRoot":""}