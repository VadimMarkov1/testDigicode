{"version":3,"file":"639.bundle.js","mappings":"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","sources":["webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/localUniformMSDFBit.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/sdfShader/shader-bits/mSDFBit.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/sdfShader/SdfShader.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/BitmapTextPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-bitmap/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/utils/fontStringFromTextStyle.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/utils/updateTextBounds.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/utils/getPo2TextureFromSource.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextMetrics.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/app/ResizePlugin.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/app/TickerPlugin.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/app/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/filters/FilterPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/filters/FilterSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/filters/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/mesh/shared/MeshGeometry.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/BatchableText.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/utils/canvas/getCanvasBoundingBox.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextGenerator.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/canvas/CanvasTextSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/mesh/shared/MeshPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/mesh/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/mesh-plane/PlaneGeometry.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceGeometry.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-nine-slice/NineSliceSpritePipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-nine-slice/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/tilingBit.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/shader/TilingSpriteShader.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/QuadGeometry.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/TilingSpritePipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setUvs.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/applyMatrix.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/utils/setPositions.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/sprite-tiling/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/mesh/shared/BatchableMesh.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/graphics/shared/GraphicsPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/graphics/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/particle-container/init.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/utils/generateTextStyleKey.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text/TextStyle.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/BatchableHTMLText.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/HTMLTextPipe.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/HTMLTextRenderData.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/textStyleToCSS.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/HTMLTextStyle.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontCSS.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/loadFontAsBase64.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/getFontCss.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/measureHtmlText.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/HTMLTextSystem.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/extractFontFamilies.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/getSVGUrl.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/loadSVGImage.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/utils/browser/isSafari.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/utils/getTemporaryCanvasFromImage.mjs","webpack://testtaskdigicode/./node_modules/pixi.js/lib/scene/text-html/init.mjs"],"sourcesContent":["\"use strict\";\nconst localUniformMSDFBit = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `\n    ),\n    main: (\n      /* wgsl */\n      `\n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n    )\n  }\n};\nconst localUniformMSDFBitGl = {\n  name: \"local-uniform-msdf-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform float uDistance;\n         `\n    ),\n    main: (\n      /* glsl */\n      `\n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n    )\n  }\n};\n\nexport { localUniformMSDFBit, localUniformMSDFBitGl };\n//# sourceMappingURL=localUniformMSDFBit.mjs.map\n","\"use strict\";\nconst mSDFBit = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n\n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n\n            }\n        `\n    )\n  }\n};\nconst mSDFBitGl = {\n  name: \"msdf-bit\",\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n\n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n\n                // SDF\n                median = min(median, msdfColor.a);\n\n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n            }\n        `\n    )\n  }\n};\n\nexport { mSDFBit, mSDFBitGl };\n//# sourceMappingURL=mSDFBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit.mjs';\nimport { generateTextureBatchBit, generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit.mjs';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass SdfShader extends Shader {\n  constructor(maxTextures) {\n    const uniforms = new UniformGroup({\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uDistance: { value: 4, type: \"f32\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBit,\n        generateTextureBatchBit(maxTextures),\n        localUniformMSDFBit,\n        mSDFBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"sdf-shader\",\n      bits: [\n        colorBitGl,\n        generateTextureBatchBitGl(maxTextures),\n        localUniformMSDFBitGl,\n        mSDFBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: uniforms,\n        batchSamplers: getBatchSamplersUniformGroup(maxTextures)\n      }\n    });\n  }\n}\n\nexport { SdfShader };\n//# sourceMappingURL=SdfShader.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nclass AbstractBitmapFont extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    /** The map of characters by character code. */\n    this.chars = /* @__PURE__ */ Object.create(null);\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    this.lineHeight = 0;\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    this.fontFamily = \"\";\n    /** The metrics of the font face. */\n    this.fontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    this.baseLineOffset = 0;\n    /** The range and type of the distance field for this font. */\n    this.distanceField = { type: \"none\", range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    this.pages = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    this.applyFillAsTint = true;\n    /** The size of the font face in pixels. */\n    this.baseMeasurementFontSize = 100;\n    this.baseRenderedFontSize = 100;\n  }\n  /**\n   * The name of the font face.\n   * @deprecated since 8.0.0 Use `fontFamily` instead.\n   */\n  get font() {\n    deprecation(v8_0_0, \"BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.\");\n    return this.fontFamily;\n  }\n  /**\n   * The map of base page textures (i.e., sheets of glyphs).\n   * @deprecated since 8.0.0 Use `pages` instead.\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  /**\n   * The size of the font face in pixels.\n   * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n   */\n  get size() {\n    deprecation(v8_0_0, \"BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.\");\n    return this.fontMetrics.fontSize;\n  }\n  /**\n   * The kind of distance field for this font or \"none\".\n   * @deprecated since 8.0.0 Use `distanceField.type` instead.\n   */\n  get distanceFieldRange() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.\");\n    return this.distanceField.range;\n  }\n  /**\n   * The range of the distance field in pixels.\n   * @deprecated since 8.0.0 Use `distanceField.range` instead.\n   */\n  get distanceFieldType() {\n    deprecation(v8_0_0, \"BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.\");\n    return this.distanceField.type;\n  }\n  destroy(destroyTextures = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    for (const i in this.chars) {\n      this.chars[i].texture?.destroy();\n    }\n    this.chars = null;\n    if (destroyTextures) {\n      this.pages.forEach((page) => page.texture.destroy(true));\n      this.pages = null;\n    }\n  }\n}\n\nexport { AbstractBitmapFont };\n//# sourceMappingURL=AbstractBitmapFont.mjs.map\n","import { Color } from '../../color/Color.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { AbstractBitmapFont } from './AbstractBitmapFont.mjs';\n\n\"use strict\";\nconst _DynamicBitmapFont = class _DynamicBitmapFont extends AbstractBitmapFont {\n  /**\n   * @param options - The options for the dynamic bitmap font.\n   */\n  constructor(options) {\n    super();\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    this.resolution = 1;\n    /** The pages of the font. */\n    this.pages = [];\n    this._padding = 0;\n    this._measureCache = /* @__PURE__ */ Object.create(null);\n    this._currentChars = [];\n    this._currentX = 0;\n    this._currentY = 0;\n    this._currentMaxCharHeight = 0;\n    this._currentPageIndex = -1;\n    this._skipKerning = false;\n    const dynamicOptions = { ..._DynamicBitmapFont.defaultOptions, ...options };\n    this._textureSize = dynamicOptions.textureSize;\n    this._mipmap = dynamicOptions.mipmap;\n    const style = dynamicOptions.style.clone();\n    if (dynamicOptions.overrideFill) {\n      style._fill.color = 16777215;\n      style._fill.alpha = 1;\n      style._fill.texture = Texture.WHITE;\n      style._fill.fill = null;\n    }\n    this.applyFillAsTint = dynamicOptions.overrideFill;\n    const requestedFontSize = style.fontSize;\n    style.fontSize = this.baseMeasurementFontSize;\n    const font = fontStringFromTextStyle(style);\n    if (dynamicOptions.overrideSize) {\n      if (style._stroke) {\n        style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n      }\n    } else {\n      style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n    }\n    this._style = style;\n    this._skipKerning = dynamicOptions.skipKerning ?? false;\n    this.resolution = dynamicOptions.resolution ?? 1;\n    this._padding = dynamicOptions.padding ?? 4;\n    if (dynamicOptions.textureStyle) {\n      this._textureStyle = dynamicOptions.textureStyle instanceof TextureStyle ? dynamicOptions.textureStyle : new TextureStyle(dynamicOptions.textureStyle);\n    }\n    this.fontMetrics = CanvasTextMetrics.measureFont(font);\n    this.lineHeight = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n  }\n  ensureCharacters(chars) {\n    const charList = CanvasTextMetrics.graphemeSegmenter(chars).filter((char) => !this._currentChars.includes(char)).filter((char, index, self) => self.indexOf(char) === index);\n    if (!charList.length)\n      return;\n    this._currentChars = [...this._currentChars, ...charList];\n    let pageData;\n    if (this._currentPageIndex === -1) {\n      pageData = this._nextPage();\n    } else {\n      pageData = this.pages[this._currentPageIndex];\n    }\n    let { canvas, context } = pageData.canvasAndContext;\n    let textureSource = pageData.texture.source;\n    const style = this._style;\n    let currentX = this._currentX;\n    let currentY = this._currentY;\n    let currentMaxCharHeight = this._currentMaxCharHeight;\n    const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n    const padding = this._padding * fontScale;\n    let skipTexture = false;\n    const maxTextureWidth = canvas.width / this.resolution;\n    const maxTextureHeight = canvas.height / this.resolution;\n    for (let i = 0; i < charList.length; i++) {\n      const char = charList[i];\n      const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n      metrics.lineHeight = metrics.height;\n      const width = metrics.width * fontScale;\n      const textureGlyphWidth = Math.ceil((style.fontStyle === \"italic\" ? 2 : 1) * width);\n      const height = metrics.height * fontScale;\n      const paddedWidth = textureGlyphWidth + padding * 2;\n      const paddedHeight = height + padding * 2;\n      skipTexture = false;\n      if (char !== \"\\n\" && char !== \"\\r\" && char !== \"\t\" && char !== \" \") {\n        skipTexture = true;\n        currentMaxCharHeight = Math.ceil(Math.max(paddedHeight, currentMaxCharHeight));\n      }\n      if (currentX + paddedWidth > maxTextureWidth) {\n        currentY += currentMaxCharHeight;\n        currentMaxCharHeight = paddedHeight;\n        currentX = 0;\n        if (currentY + currentMaxCharHeight > maxTextureHeight) {\n          textureSource.update();\n          const pageData2 = this._nextPage();\n          canvas = pageData2.canvasAndContext.canvas;\n          context = pageData2.canvasAndContext.context;\n          textureSource = pageData2.texture.source;\n          currentX = 0;\n          currentY = 0;\n          currentMaxCharHeight = 0;\n        }\n      }\n      const xAdvance = width / fontScale - (style.dropShadow?.distance ?? 0) - (style._stroke?.width ?? 0);\n      this.chars[char] = {\n        id: char.codePointAt(0),\n        xOffset: -this._padding,\n        yOffset: -this._padding,\n        xAdvance,\n        kerning: {}\n      };\n      if (skipTexture) {\n        this._drawGlyph(\n          context,\n          metrics,\n          currentX + padding,\n          currentY + padding,\n          fontScale,\n          style\n        );\n        const px = textureSource.width * fontScale;\n        const py = textureSource.height * fontScale;\n        const frame = new Rectangle(\n          currentX / px * textureSource.width,\n          currentY / py * textureSource.height,\n          paddedWidth / px * textureSource.width,\n          paddedHeight / py * textureSource.height\n        );\n        this.chars[char].texture = new Texture({\n          source: textureSource,\n          frame\n        });\n        currentX += Math.ceil(paddedWidth);\n      }\n    }\n    textureSource.update();\n    this._currentX = currentX;\n    this._currentY = currentY;\n    this._currentMaxCharHeight = currentMaxCharHeight;\n    this._skipKerning && this._applyKerning(charList, context);\n  }\n  /**\n   * @deprecated since 8.0.0\n   * The map of base page textures (i.e., sheets of glyphs).\n   */\n  get pageTextures() {\n    deprecation(v8_0_0, \"BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.\");\n    return this.pages;\n  }\n  _applyKerning(newChars, context) {\n    const measureCache = this._measureCache;\n    for (let i = 0; i < newChars.length; i++) {\n      const first = newChars[i];\n      for (let j = 0; j < this._currentChars.length; j++) {\n        const second = this._currentChars[j];\n        let c1 = measureCache[first];\n        if (!c1)\n          c1 = measureCache[first] = context.measureText(first).width;\n        let c2 = measureCache[second];\n        if (!c2)\n          c2 = measureCache[second] = context.measureText(second).width;\n        let total = context.measureText(first + second).width;\n        let amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[first].kerning[second] = amount;\n        }\n        total = context.measureText(first + second).width;\n        amount = total - (c1 + c2);\n        if (amount) {\n          this.chars[second].kerning[first] = amount;\n        }\n      }\n    }\n  }\n  _nextPage() {\n    this._currentPageIndex++;\n    const textureResolution = this.resolution;\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n      this._textureSize,\n      this._textureSize,\n      textureResolution\n    );\n    this._setupContext(canvasAndContext.context, this._style, textureResolution);\n    const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n    const texture = new Texture({\n      source: new ImageSource({\n        resource: canvasAndContext.canvas,\n        resolution,\n        alphaMode: \"premultiply-alpha-on-upload\",\n        autoGenerateMipmaps: this._mipmap\n      })\n    });\n    if (this._textureStyle) {\n      texture.source.style = this._textureStyle;\n    }\n    const pageData = {\n      canvasAndContext,\n      texture\n    };\n    this.pages[this._currentPageIndex] = pageData;\n    return pageData;\n  }\n  // canvas style!\n  _setupContext(context, style, resolution) {\n    style.fontSize = this.baseRenderedFontSize;\n    context.scale(resolution, resolution);\n    context.font = fontStringFromTextStyle(style);\n    style.fontSize = this.baseMeasurementFontSize;\n    context.textBaseline = style.textBaseline;\n    const stroke = style._stroke;\n    const strokeThickness = stroke?.width ?? 0;\n    if (stroke) {\n      context.lineWidth = strokeThickness;\n      context.lineJoin = stroke.join;\n      context.miterLimit = stroke.miterLimit;\n      context.strokeStyle = getCanvasFillStyle(stroke, context);\n    }\n    if (style._fill) {\n      context.fillStyle = getCanvasFillStyle(style._fill, context);\n    }\n    if (style.dropShadow) {\n      const shadowOptions = style.dropShadow;\n      const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n      const dropShadowBlur = shadowOptions.blur * resolution;\n      const dropShadowDistance = shadowOptions.distance * resolution;\n      context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n      context.shadowBlur = dropShadowBlur;\n      context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n      context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n    } else {\n      context.shadowColor = \"black\";\n      context.shadowBlur = 0;\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n    }\n  }\n  _drawGlyph(context, metrics, x, y, fontScale, style) {\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n    const stroke = style._stroke;\n    const strokeThickness = (stroke?.width ?? 0) * fontScale;\n    const tx = x + strokeThickness / 2;\n    const ty = y - strokeThickness / 2;\n    const descent = fontProperties.descent * fontScale;\n    const lineHeight = metrics.lineHeight * fontScale;\n    let removeShadow = false;\n    if (style.stroke && strokeThickness) {\n      removeShadow = true;\n      context.strokeText(char, tx, ty + lineHeight - descent);\n    }\n    const { shadowBlur, shadowOffsetX, shadowOffsetY } = context;\n    if (style._fill) {\n      if (removeShadow) {\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n      context.fillText(char, tx, ty + lineHeight - descent);\n    }\n    if (removeShadow) {\n      context.shadowBlur = shadowBlur;\n      context.shadowOffsetX = shadowOffsetX;\n      context.shadowOffsetY = shadowOffsetY;\n    }\n  }\n  destroy() {\n    super.destroy();\n    for (let i = 0; i < this.pages.length; i++) {\n      const { canvasAndContext, texture } = this.pages[i];\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n      texture.destroy(true);\n    }\n    this.pages = null;\n  }\n};\n_DynamicBitmapFont.defaultOptions = {\n  textureSize: 512,\n  style: new TextStyle(),\n  mipmap: true\n};\nlet DynamicBitmapFont = _DynamicBitmapFont;\n\nexport { DynamicBitmapFont };\n//# sourceMappingURL=DynamicBitmapFont.mjs.map\n","\"use strict\";\nfunction getBitmapTextLayout(chars, style, font, trimEnd) {\n  const layoutData = {\n    width: 0,\n    height: 0,\n    offsetY: 0,\n    scale: style.fontSize / font.baseMeasurementFontSize,\n    lines: [{\n      width: 0,\n      charPositions: [],\n      spaceWidth: 0,\n      spacesIndex: [],\n      chars: []\n    }]\n  };\n  layoutData.offsetY = font.baseLineOffset;\n  let currentLine = layoutData.lines[0];\n  let previousChar = null;\n  let firstWord = true;\n  const currentWord = {\n    spaceWord: false,\n    width: 0,\n    start: 0,\n    index: 0,\n    // use index to not modify the array as we use it a lot!\n    positions: [],\n    chars: []\n  };\n  const nextWord = (word) => {\n    const start = currentLine.width;\n    for (let j = 0; j < currentWord.index; j++) {\n      const position = word.positions[j];\n      currentLine.chars.push(word.chars[j]);\n      currentLine.charPositions.push(position + start);\n    }\n    currentLine.width += word.width;\n    firstWord = false;\n    currentWord.width = 0;\n    currentWord.index = 0;\n    currentWord.chars.length = 0;\n  };\n  const nextLine = () => {\n    let index = currentLine.chars.length - 1;\n    if (trimEnd) {\n      let lastChar = currentLine.chars[index];\n      while (lastChar === \" \") {\n        currentLine.width -= font.chars[lastChar].xAdvance;\n        lastChar = currentLine.chars[--index];\n      }\n    }\n    layoutData.width = Math.max(layoutData.width, currentLine.width);\n    currentLine = {\n      width: 0,\n      charPositions: [],\n      chars: [],\n      spaceWidth: 0,\n      spacesIndex: []\n    };\n    firstWord = true;\n    layoutData.lines.push(currentLine);\n    layoutData.height += font.lineHeight;\n  };\n  const scale = font.baseMeasurementFontSize / style.fontSize;\n  const adjustedLetterSpacing = style.letterSpacing * scale;\n  const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n  const breakWords = style.wordWrap && style.breakWords;\n  const checkIsOverflow = (lineWidth) => lineWidth - adjustedLetterSpacing > adjustedWordWrapWidth;\n  for (let i = 0; i < chars.length + 1; i++) {\n    let char;\n    const isEnd = i === chars.length;\n    if (!isEnd) {\n      char = chars[i];\n    }\n    const charData = font.chars[char] || font.chars[\" \"];\n    const isSpace = /(?:\\s)/.test(char);\n    const isWordBreak = isSpace || char === \"\\r\" || char === \"\\n\" || isEnd;\n    if (isWordBreak) {\n      const addWordToNextLine = !firstWord && style.wordWrap && checkIsOverflow(currentLine.width + currentWord.width);\n      if (addWordToNextLine) {\n        nextLine();\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      } else {\n        currentWord.start = currentLine.width;\n        nextWord(currentWord);\n        if (!isEnd) {\n          currentLine.charPositions.push(0);\n        }\n      }\n      if (char === \"\\r\" || char === \"\\n\") {\n        if (currentLine.width !== 0) {\n          nextLine();\n        }\n      } else if (!isEnd) {\n        const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n        currentLine.width += spaceWidth;\n        currentLine.spaceWidth = spaceWidth;\n        currentLine.spacesIndex.push(currentLine.charPositions.length);\n        currentLine.chars.push(char);\n      }\n    } else {\n      const kerning = charData.kerning[previousChar] || 0;\n      const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n      const addWordToNextLine = breakWords && checkIsOverflow(currentLine.width + currentWord.width + nextCharWidth);\n      if (addWordToNextLine) {\n        nextWord(currentWord);\n        nextLine();\n      }\n      currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n      currentWord.chars.push(char);\n      currentWord.width += nextCharWidth;\n    }\n    previousChar = char;\n  }\n  nextLine();\n  if (style.align === \"center\") {\n    alignCenter(layoutData);\n  } else if (style.align === \"right\") {\n    alignRight(layoutData);\n  } else if (style.align === \"justify\") {\n    alignJustify(layoutData);\n  }\n  return layoutData;\n}\nfunction alignCenter(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width / 2 - line.width / 2;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignRight(measurementData) {\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    const offset = measurementData.width - line.width;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      line.charPositions[j] += offset;\n    }\n  }\n}\nfunction alignJustify(measurementData) {\n  const width = measurementData.width;\n  for (let i = 0; i < measurementData.lines.length; i++) {\n    const line = measurementData.lines[i];\n    let indy = 0;\n    let spaceIndex = line.spacesIndex[indy++];\n    let offset = 0;\n    const totalSpaces = line.spacesIndex.length;\n    const newSpaceWidth = (width - line.width) / totalSpaces;\n    const spaceWidth = newSpaceWidth;\n    for (let j = 0; j < line.charPositions.length; j++) {\n      if (j === spaceIndex) {\n        spaceIndex = line.spacesIndex[indy++];\n        offset += spaceWidth;\n      }\n      line.charPositions[j] += offset;\n    }\n  }\n}\n\nexport { getBitmapTextLayout };\n//# sourceMappingURL=getBitmapTextLayout.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { DynamicBitmapFont } from './DynamicBitmapFont.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\nimport { resolveCharacters } from './utils/resolveCharacters.mjs';\n\n\"use strict\";\nlet fontCount = 0;\nclass BitmapFontManagerClass {\n  constructor() {\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    this.ALPHA = [[\"a\", \"z\"], [\"A\", \"Z\"], \" \"];\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    this.NUMERIC = [[\"0\", \"9\"]];\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    this.ALPHANUMERIC = [[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"], \" \"];\n    /**\n     * This character set consists of all the ASCII table.\n     * @type {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    this.ASCII = [[\" \", \"~\"]];\n    /** Default options for installing a new BitmapFont. */\n    this.defaultOptions = {\n      chars: this.ALPHANUMERIC,\n      resolution: 1,\n      padding: 4,\n      skipKerning: false,\n      textureStyle: null\n    };\n  }\n  /**\n   * Get a font for the specified text and style.\n   * @param text - The text to get the font for\n   * @param style - The style to use\n   */\n  getFont(text, style) {\n    let fontFamilyKey = `${style.fontFamily}-bitmap`;\n    let overrideFill = true;\n    if (style._fill.fill && !style._stroke) {\n      fontFamilyKey += style._fill.fill.styleKey;\n      overrideFill = false;\n    } else if (style._stroke || style.dropShadow) {\n      let key = style.styleKey;\n      key = key.substring(0, key.lastIndexOf(\"-\"));\n      fontFamilyKey = `${key}-bitmap`;\n      overrideFill = false;\n    }\n    if (!Cache.has(fontFamilyKey)) {\n      const fnt = new DynamicBitmapFont({\n        style,\n        overrideFill,\n        overrideSize: true,\n        ...this.defaultOptions\n      });\n      fontCount++;\n      if (fontCount > 50) {\n        warn(\"BitmapText\", `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n      }\n      fnt.once(\"destroy\", () => {\n        fontCount--;\n        Cache.remove(fontFamilyKey);\n      });\n      Cache.set(\n        fontFamilyKey,\n        fnt\n      );\n    }\n    const dynamicFont = Cache.get(fontFamilyKey);\n    dynamicFont.ensureCharacters?.(text);\n    return dynamicFont;\n  }\n  /**\n   * Get the layout of a text for the specified style.\n   * @param text - The text to get the layout for\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  getLayout(text, style, trimEnd = true) {\n    const bitmapFont = this.getFont(text, style);\n    const segments = CanvasTextMetrics.graphemeSegmenter(text);\n    return getBitmapTextLayout(segments, style, bitmapFont, trimEnd);\n  }\n  /**\n   * Measure the text using the specified style.\n   * @param text - The text to measure\n   * @param style - The style to use\n   * @param trimEnd - Whether to ignore whitespaces at the end of each line\n   */\n  measureText(text, style, trimEnd = true) {\n    return this.getLayout(text, style, trimEnd);\n  }\n  // eslint-disable-next-line max-len\n  install(...args) {\n    let options = args[0];\n    if (typeof options === \"string\") {\n      options = {\n        name: options,\n        style: args[1],\n        chars: args[2]?.chars,\n        resolution: args[2]?.resolution,\n        padding: args[2]?.padding,\n        skipKerning: args[2]?.skipKerning\n      };\n      deprecation(v8_0_0, \"BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})\");\n    }\n    const name = options?.name;\n    if (!name) {\n      throw new Error(\"[BitmapFontManager] Property `name` is required.\");\n    }\n    options = { ...this.defaultOptions, ...options };\n    const textStyle = options.style;\n    const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    const overrideFill = style._fill.fill !== null && style._fill.fill !== void 0;\n    const font = new DynamicBitmapFont({\n      style,\n      overrideFill,\n      skipKerning: options.skipKerning,\n      padding: options.padding,\n      resolution: options.resolution,\n      overrideSize: false,\n      textureStyle: options.textureStyle\n    });\n    const flatChars = resolveCharacters(options.chars);\n    font.ensureCharacters(flatChars.join(\"\"));\n    Cache.set(`${name}-bitmap`, font);\n    font.once(\"destroy\", () => Cache.remove(`${name}-bitmap`));\n    return font;\n  }\n  /**\n   * Uninstalls a bitmap font from the cache.\n   * @param {string} name - The name of the bitmap font to uninstall.\n   */\n  uninstall(name) {\n    const cacheKey = `${name}-bitmap`;\n    const font = Cache.get(cacheKey);\n    if (font) {\n      font.destroy();\n    }\n  }\n}\nconst BitmapFontManager = new BitmapFontManagerClass();\n\nexport { BitmapFontManager };\n//# sourceMappingURL=BitmapFontManager.mjs.map\n","\"use strict\";\nfunction resolveCharacters(chars) {\n  if (chars === \"\") {\n    return [];\n  }\n  if (typeof chars === \"string\") {\n    chars = [chars];\n  }\n  const result = [];\n  for (let i = 0, j = chars.length; i < j; i++) {\n    const item = chars[i];\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n      }\n      if (item[0].length === 0 || item[1].length === 0) {\n        throw new Error(\"[BitmapFont]: Invalid character delimiter.\");\n      }\n      const startCode = item[0].charCodeAt(0);\n      const endCode = item[1].charCodeAt(0);\n      if (endCode < startCode) {\n        throw new Error(\"[BitmapFont]: Invalid character range.\");\n      }\n      for (let i2 = startCode, j2 = endCode; i2 <= j2; i2++) {\n        result.push(String.fromCharCode(i2));\n      }\n    } else {\n      result.push(...Array.from(item));\n    }\n  }\n  if (result.length === 0) {\n    throw new Error(\"[BitmapFont]: Empty set when resolving characters.\");\n  }\n  return result;\n}\n\nexport { resolveCharacters };\n//# sourceMappingURL=resolveCharacters.mjs.map\n","import { Cache } from '../../assets/cache/Cache.mjs';\nimport { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Graphics } from '../graphics/shared/Graphics.mjs';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics.mjs';\nimport { SdfShader } from '../text/sdfShader/SdfShader.mjs';\nimport { BitmapFontManager } from './BitmapFontManager.mjs';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout.mjs';\n\n\"use strict\";\nclass BitmapTextGraphics extends Graphics {\n  destroy() {\n    if (this.context.customShader) {\n      this.context.customShader.destroy();\n    }\n    super.destroy();\n  }\n}\nclass BitmapTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBitmapText\");\n  }\n  validateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n  }\n  addRenderable(bitmapText, instructionSet) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    if (bitmapText._didTextUpdate) {\n      bitmapText._didTextUpdate = false;\n      this._updateContext(bitmapText, graphicsRenderable);\n    }\n    this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  updateRenderable(bitmapText) {\n    const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n    syncWithProxy(bitmapText, graphicsRenderable);\n    this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n    if (graphicsRenderable.context.customShader) {\n      this._updateDistanceField(bitmapText);\n    }\n  }\n  _updateContext(bitmapText, proxyGraphics) {\n    const { context } = proxyGraphics;\n    const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n    context.clear();\n    if (bitmapFont.distanceField.type !== \"none\") {\n      if (!context.customShader) {\n        context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n      }\n    }\n    const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n    const style = bitmapText._style;\n    let currentY = bitmapFont.baseLineOffset;\n    const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n    const padding = style.padding;\n    const scale = bitmapTextLayout.scale;\n    let tx = bitmapTextLayout.width;\n    let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n    if (style._stroke) {\n      tx += style._stroke.width / scale;\n      ty += style._stroke.width / scale;\n    }\n    context.translate(-bitmapText._anchor._x * tx - padding, -bitmapText._anchor._y * ty - padding).scale(scale, scale);\n    const tint = bitmapFont.applyFillAsTint ? style._fill.color : 16777215;\n    for (let i = 0; i < bitmapTextLayout.lines.length; i++) {\n      const line = bitmapTextLayout.lines[i];\n      for (let j = 0; j < line.charPositions.length; j++) {\n        const char = line.chars[j];\n        const charData = bitmapFont.chars[char];\n        if (charData?.texture) {\n          context.texture(\n            charData.texture,\n            tint ? tint : \"black\",\n            Math.round(line.charPositions[j] + charData.xOffset),\n            Math.round(currentY + charData.yOffset)\n          );\n        }\n      }\n      currentY += bitmapFont.lineHeight;\n    }\n  }\n  _getGpuBitmapText(bitmapText) {\n    return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n  }\n  initGpuText(bitmapText) {\n    const proxyRenderable = new BitmapTextGraphics();\n    bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n    this._updateContext(bitmapText, proxyRenderable);\n    return proxyRenderable;\n  }\n  _updateDistanceField(bitmapText) {\n    const context = this._getGpuBitmapText(bitmapText).context;\n    const fontFamily = bitmapText._style.fontFamily;\n    const dynamicFont = Cache.get(`${fontFamily}-bitmap`);\n    const { a, b, c, d } = bitmapText.groupTransform;\n    const dx = Math.sqrt(a * a + b * b);\n    const dy = Math.sqrt(c * c + d * d);\n    const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n    const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n    const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n    context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBitmapTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"bitmapText\"\n};\nfunction syncWithProxy(container, proxy) {\n  proxy.groupTransform = container.groupTransform;\n  proxy.groupColorAlpha = container.groupColorAlpha;\n  proxy.groupColor = container.groupColor;\n  proxy.groupBlendMode = container.groupBlendMode;\n  proxy.globalDisplayStatus = container.globalDisplayStatus;\n  proxy.groupTransform = container.groupTransform;\n  proxy.localDisplayStatus = container.localDisplayStatus;\n  proxy.groupAlpha = container.groupAlpha;\n  proxy._roundPixels = container._roundPixels;\n}\n\nexport { BitmapTextGraphics, BitmapTextPipe };\n//# sourceMappingURL=BitmapTextPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { BitmapTextPipe } from './BitmapTextPipe.mjs';\n\n\"use strict\";\nextensions.add(BitmapTextPipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst genericFontFamilies = [\n  \"serif\",\n  \"sans-serif\",\n  \"monospace\",\n  \"cursive\",\n  \"fantasy\",\n  \"system-ui\"\n];\nfunction fontStringFromTextStyle(style) {\n  const fontSizeString = typeof style.fontSize === \"number\" ? `${style.fontSize}px` : style.fontSize;\n  let fontFamilies = style.fontFamily;\n  if (!Array.isArray(style.fontFamily)) {\n    fontFamilies = style.fontFamily.split(\",\");\n  }\n  for (let i = fontFamilies.length - 1; i >= 0; i--) {\n    let fontFamily = fontFamilies[i].trim();\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && !genericFontFamilies.includes(fontFamily)) {\n      fontFamily = `\"${fontFamily}\"`;\n    }\n    fontFamilies[i] = fontFamily;\n  }\n  return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${fontFamilies.join(\",\")}`;\n}\n\nexport { fontStringFromTextStyle };\n//# sourceMappingURL=fontStringFromTextStyle.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds.mjs';\n\n\"use strict\";\nfunction updateTextBounds(batchableSprite, text) {\n  const { texture, bounds } = batchableSprite;\n  const padding = text._style._getFinalPadding();\n  updateQuadBounds(bounds, text._anchor, texture);\n  const paddingOffset = text._anchor._x * padding * 2;\n  const paddingOffsetY = text._anchor._y * padding * 2;\n  bounds.minX -= padding - paddingOffset;\n  bounds.minY -= padding - paddingOffsetY;\n  bounds.maxX -= padding - paddingOffset;\n  bounds.maxY -= padding - paddingOffsetY;\n}\n\nexport { updateTextBounds };\n//# sourceMappingURL=updateTextBounds.mjs.map\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { Bounds } from '../../container/bounds/Bounds.mjs';\n\n\"use strict\";\nconst tempBounds = new Bounds();\nfunction getPo2TextureFromSource(image, width, height, resolution) {\n  const bounds = tempBounds;\n  bounds.minX = 0;\n  bounds.minY = 0;\n  bounds.maxX = image.width / resolution | 0;\n  bounds.maxY = image.height / resolution | 0;\n  const texture = TexturePool.getOptimalTexture(\n    bounds.width,\n    bounds.height,\n    resolution,\n    false\n  );\n  texture.source.uploadMethodId = \"image\";\n  texture.source.resource = image;\n  texture.source.alphaMode = \"premultiply-alpha-on-upload\";\n  texture.frame.width = width / resolution;\n  texture.frame.height = height / resolution;\n  texture.source.emit(\"update\", texture.source);\n  texture.updateUvs();\n  return texture;\n}\n\nexport { getPo2TextureFromSource };\n//# sourceMappingURL=getPo2TextureFromSource.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern.mjs';\n\n\"use strict\";\nconst PRECISION = 1e5;\nfunction getCanvasFillStyle(fillStyle, context, textMetrics, padding = 0) {\n  if (fillStyle.texture === Texture.WHITE && !fillStyle.fill) {\n    return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n  } else if (!fillStyle.fill) {\n    const pattern = context.createPattern(fillStyle.texture.source.resource, \"repeat\");\n    const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n    tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillPattern) {\n    const fillPattern = fillStyle.fill;\n    const pattern = context.createPattern(fillPattern.texture.source.resource, \"repeat\");\n    const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n    tempMatrix.scale(\n      fillPattern.texture.frame.width,\n      fillPattern.texture.frame.height\n    );\n    pattern.setTransform(tempMatrix);\n    return pattern;\n  } else if (fillStyle.fill instanceof FillGradient) {\n    const fillGradient = fillStyle.fill;\n    const isLinear = fillGradient.type === \"linear\";\n    const isLocal = fillGradient.textureSpace === \"local\";\n    let width = 1;\n    let height = 1;\n    if (isLocal && textMetrics) {\n      width = textMetrics.width + padding;\n      height = textMetrics.height + padding;\n    }\n    let gradient;\n    let isNearlyVertical = false;\n    if (isLinear) {\n      const { start, end } = fillGradient;\n      gradient = context.createLinearGradient(\n        start.x * width,\n        start.y * height,\n        end.x * width,\n        end.y * height\n      );\n      isNearlyVertical = Math.abs(end.x - start.x) < Math.abs((end.y - start.y) * 0.1);\n    } else {\n      const { center, innerRadius, outerCenter, outerRadius } = fillGradient;\n      gradient = context.createRadialGradient(\n        center.x * width,\n        center.y * height,\n        innerRadius * width,\n        outerCenter.x * width,\n        outerCenter.y * height,\n        outerRadius * width\n      );\n    }\n    if (isNearlyVertical && isLocal && textMetrics) {\n      const ratio = textMetrics.lineHeight / height;\n      for (let i = 0; i < textMetrics.lines.length; i++) {\n        const start = (i * textMetrics.lineHeight + padding / 2) / height;\n        fillGradient.colorStops.forEach((stop) => {\n          const globalStop = start + stop.offset * ratio;\n          gradient.addColorStop(\n            // fix to 5 decimal places to avoid floating point precision issues\n            Math.floor(globalStop * PRECISION) / PRECISION,\n            Color.shared.setValue(stop.color).toHex()\n          );\n        });\n      }\n    } else {\n      fillGradient.colorStops.forEach((stop) => {\n        gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n      });\n    }\n    return gradient;\n  }\n  warn(\"FillStyle not recognised\", fillStyle);\n  return \"red\";\n}\n\nexport { getCanvasFillStyle };\n//# sourceMappingURL=getCanvasFillStyle.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\n\n\"use strict\";\nconst contextSettings = {\n  // TextMetrics requires getImageData readback for measuring fonts.\n  willReadFrequently: true\n};\nconst _CanvasTextMetrics = class _CanvasTextMetrics {\n  /**\n   * Checking that we can use modern canvas 2D API.\n   *\n   * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n   * @see TextMetrics.experimentalLetterSpacing\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n   * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n   */\n  static get experimentalLetterSpacingSupported() {\n    let result = _CanvasTextMetrics._experimentalLetterSpacingSupported;\n    if (result === void 0) {\n      const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n      result = _CanvasTextMetrics._experimentalLetterSpacingSupported = \"letterSpacing\" in proto || \"textLetterSpacing\" in proto;\n    }\n    return result;\n  }\n  /**\n   * @param text - the text that was measured\n   * @param style - the style that was measured\n   * @param width - the measured width of the text\n   * @param height - the measured height of the text\n   * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param lineWidths - an array of the line widths for each line matched to `lines`\n   * @param lineHeight - the measured line height for this style\n   * @param maxLineWidth - the maximum line width for all measured lines\n   * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   * @param text - The text to measure.\n   * @param style - The text style to use for measuring\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @param wordWrap\n   * @returns Measured width and height of the text.\n   */\n  static measureText(text = \" \", style, canvas = _CanvasTextMetrics._canvas, wordWrap = style.wordWrap) {\n    const font = fontStringFromTextStyle(style);\n    const fontProperties = _CanvasTextMetrics.measureFont(font);\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n    const context = _CanvasTextMetrics.__context;\n    context.font = font;\n    const outputText = wordWrap ? _CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n    const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    const lineWidths = new Array(lines.length);\n    let maxLineWidth = 0;\n    for (let i = 0; i < lines.length; i++) {\n      const lineWidth = _CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n    const strokeWidth = style._stroke?.width || 0;\n    let width = maxLineWidth + strokeWidth;\n    if (style.dropShadow) {\n      width += style.dropShadow.distance;\n    }\n    const lineHeight = style.lineHeight || fontProperties.fontSize;\n    let height = Math.max(lineHeight, fontProperties.fontSize + strokeWidth) + (lines.length - 1) * (lineHeight + style.leading);\n    if (style.dropShadow) {\n      height += style.dropShadow.distance;\n    }\n    const measurements = new _CanvasTextMetrics(\n      text,\n      style,\n      width,\n      height,\n      lines,\n      lineWidths,\n      lineHeight + style.leading,\n      maxLineWidth,\n      fontProperties\n    );\n    return measurements;\n  }\n  static _measureText(text, letterSpacing, context) {\n    let useExperimentalLetterSpacing = false;\n    if (_CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (_CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    const metrics = context.measureText(text);\n    let metricWidth = metrics.width;\n    const actualBoundingBoxLeft = -metrics.actualBoundingBoxLeft;\n    const actualBoundingBoxRight = metrics.actualBoundingBoxRight;\n    let boundsWidth = actualBoundingBoxRight - actualBoundingBoxLeft;\n    if (metricWidth > 0) {\n      if (useExperimentalLetterSpacing) {\n        metricWidth -= letterSpacing;\n        boundsWidth -= letterSpacing;\n      } else {\n        const val = (_CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n        metricWidth += val;\n        boundsWidth += val;\n      }\n    }\n    return Math.max(metricWidth, boundsWidth);\n  }\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   * @param text - String to apply word wrapping to\n   * @param style - the style to use when wrapping\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @returns New string with new lines applied where required\n   */\n  static _wordWrap(text, style, canvas = _CanvasTextMetrics._canvas) {\n    const context = canvas.getContext(\"2d\", contextSettings);\n    let width = 0;\n    let line = \"\";\n    let lines = \"\";\n    const cache = /* @__PURE__ */ Object.create(null);\n    const { letterSpacing, whiteSpace } = style;\n    const collapseSpaces = _CanvasTextMetrics._collapseSpaces(whiteSpace);\n    const collapseNewlines = _CanvasTextMetrics._collapseNewlines(whiteSpace);\n    let canPrependSpaces = !collapseSpaces;\n    const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n    const tokens = _CanvasTextMetrics._tokenize(text);\n    for (let i = 0; i < tokens.length; i++) {\n      let token = tokens[i];\n      if (_CanvasTextMetrics._isNewline(token)) {\n        if (!collapseNewlines) {\n          lines += _CanvasTextMetrics._addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = \"\";\n          width = 0;\n          continue;\n        }\n        token = \" \";\n      }\n      if (collapseSpaces) {\n        const currIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(token);\n        const lastIsBreakingSpace = _CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      }\n      const tokenWidth = _CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n      if (tokenWidth > wordWrapWidth) {\n        if (line !== \"\") {\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (_CanvasTextMetrics.canBreakWords(token, style.breakWords)) {\n          const characters = _CanvasTextMetrics.wordWrapSplit(token);\n          for (let j = 0; j < characters.length; j++) {\n            let char = characters[j];\n            let lastChar = char;\n            let k = 1;\n            while (characters[j + k]) {\n              const nextChar = characters[j + k];\n              if (!_CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                char += nextChar;\n              } else {\n                break;\n              }\n              lastChar = nextChar;\n              k++;\n            }\n            j += k - 1;\n            const characterWidth = _CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n            if (characterWidth + width > wordWrapWidth) {\n              lines += _CanvasTextMetrics._addLine(line);\n              canPrependSpaces = false;\n              line = \"\";\n              width = 0;\n            }\n            line += char;\n            width += characterWidth;\n          }\n        } else {\n          if (line.length > 0) {\n            lines += _CanvasTextMetrics._addLine(line);\n            line = \"\";\n            width = 0;\n          }\n          const isLastToken = i === tokens.length - 1;\n          lines += _CanvasTextMetrics._addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = \"\";\n          width = 0;\n        }\n      } else {\n        if (tokenWidth + width > wordWrapWidth) {\n          canPrependSpaces = false;\n          lines += _CanvasTextMetrics._addLine(line);\n          line = \"\";\n          width = 0;\n        }\n        if (line.length > 0 || !_CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          line += token;\n          width += tokenWidth;\n        }\n      }\n    }\n    lines += _CanvasTextMetrics._addLine(line, false);\n    return lines;\n  }\n  /**\n   * Convenience function for logging each line added during the wordWrap method.\n   * @param line    - The line of text to add\n   * @param newLine - Add new line character to end\n   * @returns A formatted line\n   */\n  static _addLine(line, newLine = true) {\n    line = _CanvasTextMetrics._trimRight(line);\n    line = newLine ? `${line}\n` : line;\n    return line;\n  }\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   * @param key            - The key\n   * @param letterSpacing  - The letter spacing\n   * @param cache          - The cache\n   * @param context        - The canvas context\n   * @returns The from cache.\n   */\n  static _getFromCache(key, letterSpacing, cache, context) {\n    let width = cache[key];\n    if (typeof width !== \"number\") {\n      width = _CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n      cache[key] = width;\n    }\n    return width;\n  }\n  /**\n   * Determines whether we should collapse breaking spaces.\n   * @param whiteSpace - The TextStyle property whiteSpace\n   * @returns Should collapse\n   */\n  static _collapseSpaces(whiteSpace) {\n    return whiteSpace === \"normal\" || whiteSpace === \"pre-line\";\n  }\n  /**\n   * Determines whether we should collapse newLine chars.\n   * @param whiteSpace - The white space\n   * @returns should collapse\n   */\n  static _collapseNewlines(whiteSpace) {\n    return whiteSpace === \"normal\";\n  }\n  /**\n   * Trims breaking whitespaces from string.\n   * @param text - The text\n   * @returns Trimmed string\n   */\n  static _trimRight(text) {\n    if (typeof text !== \"string\") {\n      return \"\";\n    }\n    for (let i = text.length - 1; i >= 0; i--) {\n      const char = text[i];\n      if (!_CanvasTextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n      text = text.slice(0, -1);\n    }\n    return text;\n  }\n  /**\n   * Determines if char is a newline.\n   * @param char - The character\n   * @returns True if newline, False otherwise.\n   */\n  static _isNewline(char) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n  }\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * It allows one to determine whether char should be a breaking whitespace\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param char - The character\n   * @param [_nextChar] - The next character\n   * @returns True if whitespace, False otherwise.\n   */\n  static isBreakingSpace(char, _nextChar) {\n    if (typeof char !== \"string\") {\n      return false;\n    }\n    return _CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n  }\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   * @param text - The text\n   * @returns A tokenized array\n   */\n  static _tokenize(text) {\n    const tokens = [];\n    let token = \"\";\n    if (typeof text !== \"string\") {\n      return tokens;\n    }\n    for (let i = 0; i < text.length; i++) {\n      const char = text[i];\n      const nextChar = text[i + 1];\n      if (_CanvasTextMetrics.isBreakingSpace(char, nextChar) || _CanvasTextMetrics._isNewline(char)) {\n        if (token !== \"\") {\n          tokens.push(token);\n          token = \"\";\n        }\n        if (char === \"\\r\" && nextChar === \"\\n\") {\n          tokens.push(\"\\r\\n\");\n          i++;\n        } else {\n          tokens.push(char);\n        }\n        continue;\n      }\n      token += char;\n    }\n    if (token !== \"\") {\n      tokens.push(token);\n    }\n    return tokens;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   * @param _token - The token\n   * @param breakWords - The style attr break words\n   * @returns Whether to break word or not\n   */\n  static canBreakWords(_token, breakWords) {\n    return breakWords;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   * @param _char - The character\n   * @param _nextChar - The next character\n   * @param _token - The token/word the characters are from\n   * @param _index - The index in the token of the char\n   * @param _breakWords - The style attr break words\n   * @returns whether to break word or not\n   */\n  static canBreakChars(_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  }\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It is called when a token (usually a word) has to be split into separate pieces\n   * in order to determine the point to break a word.\n   * It must return an array of characters.\n   * @param token - The token to split\n   * @returns The characters of the token\n   * @see CanvasTextMetrics.graphemeSegmenter\n   */\n  static wordWrapSplit(token) {\n    return _CanvasTextMetrics.graphemeSegmenter(token);\n  }\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   * @param font - String representing the style of the font\n   * @returns Font properties object\n   */\n  static measureFont(font) {\n    if (_CanvasTextMetrics._fonts[font]) {\n      return _CanvasTextMetrics._fonts[font];\n    }\n    const context = _CanvasTextMetrics._context;\n    context.font = font;\n    const metrics = context.measureText(_CanvasTextMetrics.METRICS_STRING + _CanvasTextMetrics.BASELINE_SYMBOL);\n    const properties = {\n      ascent: metrics.actualBoundingBoxAscent,\n      descent: metrics.actualBoundingBoxDescent,\n      fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n    };\n    _CanvasTextMetrics._fonts[font] = properties;\n    return properties;\n  }\n  /**\n   * Clear font metrics in metrics cache.\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n  static clearMetrics(font = \"\") {\n    if (font) {\n      delete _CanvasTextMetrics._fonts[font];\n    } else {\n      _CanvasTextMetrics._fonts = {};\n    }\n  }\n  /**\n   * Cached canvas element for measuring text\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _canvas() {\n    if (!_CanvasTextMetrics.__canvas) {\n      let canvas;\n      try {\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext(\"2d\", contextSettings);\n        if (context?.measureText) {\n          _CanvasTextMetrics.__canvas = c;\n          return c;\n        }\n        canvas = DOMAdapter.get().createCanvas();\n      } catch (_cx) {\n        canvas = DOMAdapter.get().createCanvas();\n      }\n      canvas.width = canvas.height = 10;\n      _CanvasTextMetrics.__canvas = canvas;\n    }\n    return _CanvasTextMetrics.__canvas;\n  }\n  /**\n   * TODO: this should be private, but isn't because of backward compat, will fix later.\n   * @ignore\n   */\n  static get _context() {\n    if (!_CanvasTextMetrics.__context) {\n      _CanvasTextMetrics.__context = _CanvasTextMetrics._canvas.getContext(\"2d\", contextSettings);\n    }\n    return _CanvasTextMetrics.__context;\n  }\n};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n */\n_CanvasTextMetrics.METRICS_STRING = \"|\\xC9q\\xC5\";\n/** Baseline symbol for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_SYMBOL = \"M\";\n/** Baseline multiplier for calculate font metrics. */\n_CanvasTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/** Height multiplier for setting height of canvas to calculate font metrics. */\n_CanvasTextMetrics.HEIGHT_MULTIPLIER = 2;\n/**\n * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n */\n_CanvasTextMetrics.graphemeSegmenter = (() => {\n  if (typeof Intl?.Segmenter === \"function\") {\n    const segmenter = new Intl.Segmenter();\n    return (s) => {\n      const segments = segmenter.segment(s);\n      const result = [];\n      let i = 0;\n      for (const segment of segments) {\n        result[i++] = segment.segment;\n      }\n      return result;\n    };\n  }\n  return (s) => [...s];\n})();\n/**\n * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n * lead to more accurate letter-spacing results because it does not try to manually draw\n * each character. However, this Chrome API is experimental and may not serve all cases yet.\n * @see TextMetrics.experimentalLetterSpacingSupported\n */\n_CanvasTextMetrics.experimentalLetterSpacing = false;\n/** Cache of {@link TextMetrics.FontMetrics} objects. */\n_CanvasTextMetrics._fonts = {};\n/** Cache of new line chars. */\n_CanvasTextMetrics._newlines = [\n  10,\n  // line feed\n  13\n  // carriage return\n];\n/** Cache of breaking spaces. */\n_CanvasTextMetrics._breakingSpaces = [\n  9,\n  // character tabulation\n  32,\n  // space\n  8192,\n  // en quad\n  8193,\n  // em quad\n  8194,\n  // en space\n  8195,\n  // em space\n  8196,\n  // three-per-em space\n  8197,\n  // four-per-em space\n  8198,\n  // six-per-em space\n  8200,\n  // punctuation space\n  8201,\n  // thin space\n  8202,\n  // hair space\n  8287,\n  // medium mathematical space\n  12288\n  // ideographic space\n];\nlet CanvasTextMetrics = _CanvasTextMetrics;\n\nexport { CanvasTextMetrics };\n//# sourceMappingURL=CanvasTextMetrics.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass ResizePlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    Object.defineProperty(\n      this,\n      \"resizeTo\",\n      {\n        set(dom) {\n          globalThis.removeEventListener(\"resize\", this.queueResize);\n          this._resizeTo = dom;\n          if (dom) {\n            globalThis.addEventListener(\"resize\", this.queueResize);\n            this.resize();\n          }\n        },\n        get() {\n          return this._resizeTo;\n        }\n      }\n    );\n    this.queueResize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      this._resizeId = requestAnimationFrame(() => this.resize());\n    };\n    this._cancelResize = () => {\n      if (this._resizeId) {\n        cancelAnimationFrame(this._resizeId);\n        this._resizeId = null;\n      }\n    };\n    this.resize = () => {\n      if (!this._resizeTo) {\n        return;\n      }\n      this._cancelResize();\n      let width;\n      let height;\n      if (this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } else {\n        const { clientWidth, clientHeight } = this._resizeTo;\n        width = clientWidth;\n        height = clientHeight;\n      }\n      this.renderer.resize(width, height);\n      this.render();\n    };\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  }\n  /**\n   * Clean up the ticker, scoped to application\n   * @private\n   */\n  static destroy() {\n    globalThis.removeEventListener(\"resize\", this.queueResize);\n    this._cancelResize();\n    this._cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  }\n}\n/** @ignore */\nResizePlugin.extension = ExtensionType.Application;\n\nexport { ResizePlugin };\n//# sourceMappingURL=ResizePlugin.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { UPDATE_PRIORITY } from '../ticker/const.mjs';\nimport { Ticker } from '../ticker/Ticker.mjs';\n\n\"use strict\";\nclass TickerPlugin {\n  /**\n   * Initialize the plugin with scope of application instance\n   * @private\n   * @param {object} [options] - See application options\n   */\n  static init(options) {\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options);\n    Object.defineProperty(\n      this,\n      \"ticker\",\n      {\n        set(ticker) {\n          if (this._ticker) {\n            this._ticker.remove(this.render, this);\n          }\n          this._ticker = ticker;\n          if (ticker) {\n            ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n          }\n        },\n        get() {\n          return this._ticker;\n        }\n      }\n    );\n    this.stop = () => {\n      this._ticker.stop();\n    };\n    this.start = () => {\n      this._ticker.start();\n    };\n    this._ticker = null;\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n    if (options.autoStart) {\n      this.start();\n    }\n  }\n  /**\n   * Clean up the ticker, scoped to application.\n   * @private\n   */\n  static destroy() {\n    if (this._ticker) {\n      const oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  }\n}\n/** @ignore */\nTickerPlugin.extension = ExtensionType.Application;\n\nexport { TickerPlugin };\n//# sourceMappingURL=TickerPlugin.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { ResizePlugin } from './ResizePlugin.mjs';\nimport { TickerPlugin } from './TickerPlugin.mjs';\n\n\"use strict\";\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\n\n\"use strict\";\nclass FilterPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  push(filterEffect, container, instructionSet) {\n    const renderPipes = this._renderer.renderPipes;\n    renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      canBundle: false,\n      action: \"pushFilter\",\n      container,\n      filterEffect\n    });\n  }\n  pop(_filterEffect, _container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  execute(instruction) {\n    if (instruction.action === \"pushFilter\") {\n      this._renderer.filter.push(instruction);\n    } else if (instruction.action === \"popFilter\") {\n      this._renderer.filter.pop();\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nFilterPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"filter\"\n};\n\nexport { FilterPipe };\n//# sourceMappingURL=FilterPipe.mjs.map\n","import { ExtensionType } from '../extensions/Extensions.mjs';\nimport { Matrix } from '../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture.mjs';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../rendering/renderers/types.mjs';\nimport { Bounds } from '../scene/container/bounds/Bounds.mjs';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds.mjs';\nimport { warn } from '../utils/logging/warn.mjs';\n\n\"use strict\";\nconst quadGeometry = new Geometry({\n  attributes: {\n    aPosition: {\n      buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      format: \"float32x2\",\n      stride: 2 * 4,\n      offset: 0\n    }\n  },\n  indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3])\n});\nclass FilterData {\n  constructor() {\n    /**\n     * Indicates whether the filter should be skipped.\n     * @type {boolean}\n     */\n    this.skip = false;\n    /**\n     * The texture to which the filter is applied.\n     * @type {Texture}\n     */\n    this.inputTexture = null;\n    /**\n     * The back texture used for blending, if required.\n     * @type {Texture | null}\n     */\n    this.backTexture = null;\n    /**\n     * The list of filters to be applied.\n     * @type {Filter[]}\n     */\n    this.filters = null;\n    /**\n     * The bounds of the filter area.\n     * @type {Bounds}\n     */\n    this.bounds = new Bounds();\n    /**\n     * The container to which the filter is applied.\n     * @type {Container}\n     */\n    this.container = null;\n    /**\n     * Indicates whether blending is required for the filter.\n     * @type {boolean}\n     */\n    this.blendRequired = false;\n    /**\n     * The render surface where the output of the filter is rendered.\n     * @type {RenderSurface}\n     */\n    this.outputRenderSurface = null;\n    /**\n     * The global frame of the filter area.\n     * @type {{ x: number, y: number, width: number, height: number }}\n     */\n    this.globalFrame = { x: 0, y: 0, width: 0, height: 0 };\n  }\n}\nclass FilterSystem {\n  constructor(renderer) {\n    this._filterStackIndex = 0;\n    this._filterStack = [];\n    this._filterGlobalUniforms = new UniformGroup({\n      uInputSize: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputPixel: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uInputClamp: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uGlobalFrame: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uOutputTexture: { value: new Float32Array(4), type: \"vec4<f32>\" }\n    });\n    this._globalFilterBindGroup = new BindGroup({});\n    this.renderer = renderer;\n  }\n  /**\n   * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n   * @readonly\n   */\n  get activeBackTexture() {\n    return this._activeFilterData?.backTexture;\n  }\n  /**\n   * Pushes a filter instruction onto the filter stack.\n   * @param instruction - The instruction containing the filter effect and container.\n   * @internal\n   */\n  push(instruction) {\n    const renderer = this.renderer;\n    const filters = instruction.filterEffect.filters;\n    const filterData = this._pushFilterData();\n    filterData.skip = false;\n    filterData.filters = filters;\n    filterData.container = instruction.container;\n    filterData.outputRenderSurface = renderer.renderTarget.renderSurface;\n    const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return;\n    }\n    const bounds = filterData.bounds;\n    this._calculateFilterArea(instruction, bounds);\n    this._calculateFilterBounds(filterData, renderer.renderTarget.rootViewPort, rootAntialias, rootResolution, 1);\n    if (filterData.skip) {\n      return;\n    }\n    const previousFilterData = this._getPreviousFilterData();\n    const globalResolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (previousFilterData) {\n      offsetX = previousFilterData.bounds.minX;\n      offsetY = previousFilterData.bounds.minY;\n    }\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    this._setupFilterTextures(filterData, bounds, renderer, previousFilterData);\n  }\n  /**\n   * Applies filters to a texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture.\n   * @param {object} params - The parameters for applying filters.\n   * @param {Texture} params.texture - The texture to apply filters to.\n   * @param {Filter[]} params.filters - The filters to apply.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   * @example\n   *\n   * ```ts\n   * // Create a texture and a list of filters\n   * const texture = new Texture(...);\n   * const filters = [new BlurFilter(), new ColorMatrixFilter()];\n   *\n   * // Apply the filters to the texture\n   * const resultTexture = filterSystem.applyToTexture({ texture, filters });\n   *\n   * // Use the resulting texture\n   * sprite.texture = resultTexture;\n   * ```\n   *\n   * Key Points:\n   * 1. padding is not currently supported here - so clipping may occur with filters that use padding.\n   * 2. If all filters are disabled or skipped, the original texture is returned.\n   */\n  generateFilteredTexture({ texture, filters }) {\n    const filterData = this._pushFilterData();\n    this._activeFilterData = filterData;\n    filterData.skip = false;\n    filterData.filters = filters;\n    const colorTextureSource = texture.source;\n    const rootResolution = colorTextureSource.resolution;\n    const rootAntialias = colorTextureSource.antialias;\n    if (filters.length === 0) {\n      filterData.skip = true;\n      return texture;\n    }\n    const bounds = filterData.bounds;\n    bounds.addRect(texture.frame);\n    this._calculateFilterBounds(filterData, bounds.rectangle, rootAntialias, rootResolution, 0);\n    if (filterData.skip) {\n      return texture;\n    }\n    const globalResolution = rootResolution;\n    const offsetX = 0;\n    const offsetY = 0;\n    this._calculateGlobalFrame(\n      filterData,\n      offsetX,\n      offsetY,\n      globalResolution,\n      colorTextureSource.width,\n      colorTextureSource.height\n    );\n    filterData.outputRenderSurface = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    filterData.backTexture = Texture.EMPTY;\n    filterData.inputTexture = texture;\n    const renderer = this.renderer;\n    renderer.renderTarget.finishRenderPass();\n    this._applyFiltersToTexture(filterData, true);\n    const outputTexture = filterData.outputRenderSurface;\n    outputTexture.source.alphaMode = \"premultiplied-alpha\";\n    return outputTexture;\n  }\n  /** @internal */\n  pop() {\n    const renderer = this.renderer;\n    const filterData = this._popFilterData();\n    if (filterData.skip) {\n      return;\n    }\n    renderer.globalUniforms.pop();\n    renderer.renderTarget.finishRenderPass();\n    this._activeFilterData = filterData;\n    this._applyFiltersToTexture(filterData, false);\n    if (filterData.blendRequired) {\n      TexturePool.returnTexture(filterData.backTexture);\n    }\n    TexturePool.returnTexture(filterData.inputTexture);\n  }\n  /**\n   * Copies the last render surface to a texture.\n   * @param lastRenderSurface - The last render surface to copy from.\n   * @param bounds - The bounds of the area to copy.\n   * @param previousBounds - The previous bounds to use for offsetting the copy.\n   */\n  getBackTexture(lastRenderSurface, bounds, previousBounds) {\n    const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n    const backTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      backgroundResolution,\n      false\n    );\n    let x = bounds.minX;\n    let y = bounds.minY;\n    if (previousBounds) {\n      x -= previousBounds.minX;\n      y -= previousBounds.minY;\n    }\n    x = Math.floor(x * backgroundResolution);\n    y = Math.floor(y * backgroundResolution);\n    const width = Math.ceil(bounds.width * backgroundResolution);\n    const height = Math.ceil(bounds.height * backgroundResolution);\n    this.renderer.renderTarget.copyToTexture(\n      lastRenderSurface,\n      backTexture,\n      { x, y },\n      { width, height },\n      { x: 0, y: 0 }\n    );\n    return backTexture;\n  }\n  /**\n   * Applies a filter to a texture.\n   * @param filter - The filter to apply.\n   * @param input - The input texture.\n   * @param output - The output render surface.\n   * @param clear - Whether to clear the output surface before applying the filter.\n   */\n  applyFilter(filter, input, output, clear) {\n    const renderer = this.renderer;\n    const filterData = this._activeFilterData;\n    const outputRenderSurface = filterData.outputRenderSurface;\n    const isFinalTarget = outputRenderSurface === output;\n    const rootResolution = renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n    const resolution = this._findFilterResolution(rootResolution);\n    let offsetX = 0;\n    let offsetY = 0;\n    if (isFinalTarget) {\n      const offset = this._findPreviousFilterOffset();\n      offsetX = offset.x;\n      offsetY = offset.y;\n    }\n    this._updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear);\n    this._setupBindGroupsAndRender(filter, input, renderer);\n  }\n  /**\n   * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n   *\n   * Use `outputMatrix * vTextureCoord` in the shader.\n   * @param outputMatrix - The matrix to output to.\n   * @param {Sprite} sprite - The sprite to map to.\n   * @returns The mapped matrix.\n   */\n  calculateSpriteMatrix(outputMatrix, sprite) {\n    const data = this._activeFilterData;\n    const mappedMatrix = outputMatrix.set(\n      data.inputTexture._source.width,\n      0,\n      0,\n      data.inputTexture._source.height,\n      data.bounds.minX,\n      data.bounds.minY\n    );\n    const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n    const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n    if (renderGroup && renderGroup.cacheToLocalTransform) {\n      worldTransform.prepend(renderGroup.cacheToLocalTransform);\n    }\n    worldTransform.invert();\n    mappedMatrix.prepend(worldTransform);\n    mappedMatrix.scale(\n      1 / sprite.texture.frame.width,\n      1 / sprite.texture.frame.height\n    );\n    mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n    return mappedMatrix;\n  }\n  destroy() {\n  }\n  /**\n   * Sets up the bind groups and renders the filter.\n   * @param filter - The filter to apply\n   * @param input - The input texture\n   * @param renderer - The renderer instance\n   */\n  _setupBindGroupsAndRender(filter, input, renderer) {\n    if (renderer.renderPipes.uniformBatch) {\n      const batchUniforms = renderer.renderPipes.uniformBatch.getUboResource(this._filterGlobalUniforms);\n      this._globalFilterBindGroup.setResource(batchUniforms, 0);\n    } else {\n      this._globalFilterBindGroup.setResource(this._filterGlobalUniforms, 0);\n    }\n    this._globalFilterBindGroup.setResource(input.source, 1);\n    this._globalFilterBindGroup.setResource(input.source.style, 2);\n    filter.groups[0] = this._globalFilterBindGroup;\n    renderer.encoder.draw({\n      geometry: quadGeometry,\n      shader: filter,\n      state: filter._state,\n      topology: \"triangle-list\"\n    });\n    if (renderer.type === RendererType.WEBGL) {\n      renderer.renderTarget.finishRenderPass();\n    }\n  }\n  /**\n   * Sets up the filter textures including input texture and back texture if needed.\n   * @param filterData - The filter data to update\n   * @param bounds - The bounds for the texture\n   * @param renderer - The renderer instance\n   * @param previousFilterData - The previous filter data for back texture calculation\n   */\n  _setupFilterTextures(filterData, bounds, renderer, previousFilterData) {\n    filterData.backTexture = Texture.EMPTY;\n    if (filterData.blendRequired) {\n      renderer.renderTarget.finishRenderPass();\n      const renderTarget = renderer.renderTarget.getRenderTarget(filterData.outputRenderSurface);\n      filterData.backTexture = this.getBackTexture(renderTarget, bounds, previousFilterData?.bounds);\n    }\n    filterData.inputTexture = TexturePool.getOptimalTexture(\n      bounds.width,\n      bounds.height,\n      filterData.resolution,\n      filterData.antialias\n    );\n    renderer.renderTarget.bind(filterData.inputTexture, true);\n    renderer.globalUniforms.push({\n      offset: bounds\n    });\n  }\n  /**\n   * Calculates and sets the global frame for the filter.\n   * @param filterData - The filter data to update\n   * @param offsetX - The X offset\n   * @param offsetY - The Y offset\n   * @param globalResolution - The global resolution\n   * @param sourceWidth - The source texture width\n   * @param sourceHeight - The source texture height\n   */\n  _calculateGlobalFrame(filterData, offsetX, offsetY, globalResolution, sourceWidth, sourceHeight) {\n    const globalFrame = filterData.globalFrame;\n    globalFrame.x = offsetX * globalResolution;\n    globalFrame.y = offsetY * globalResolution;\n    globalFrame.width = sourceWidth * globalResolution;\n    globalFrame.height = sourceHeight * globalResolution;\n  }\n  /**\n   * Updates the filter uniforms with the current filter state.\n   * @param input - The input texture\n   * @param output - The output render surface\n   * @param filterData - The current filter data\n   * @param offsetX - The X offset for positioning\n   * @param offsetY - The Y offset for positioning\n   * @param resolution - The current resolution\n   * @param isFinalTarget - Whether this is the final render target\n   * @param clear - Whether to clear the output surface\n   */\n  _updateFilterUniforms(input, output, filterData, offsetX, offsetY, resolution, isFinalTarget, clear) {\n    const uniforms = this._filterGlobalUniforms.uniforms;\n    const outputFrame = uniforms.uOutputFrame;\n    const inputSize = uniforms.uInputSize;\n    const inputPixel = uniforms.uInputPixel;\n    const inputClamp = uniforms.uInputClamp;\n    const globalFrame = uniforms.uGlobalFrame;\n    const outputTexture = uniforms.uOutputTexture;\n    if (isFinalTarget) {\n      outputFrame[0] = filterData.bounds.minX - offsetX;\n      outputFrame[1] = filterData.bounds.minY - offsetY;\n    } else {\n      outputFrame[0] = 0;\n      outputFrame[1] = 0;\n    }\n    outputFrame[2] = input.frame.width;\n    outputFrame[3] = input.frame.height;\n    inputSize[0] = input.source.width;\n    inputSize[1] = input.source.height;\n    inputSize[2] = 1 / inputSize[0];\n    inputSize[3] = 1 / inputSize[1];\n    inputPixel[0] = input.source.pixelWidth;\n    inputPixel[1] = input.source.pixelHeight;\n    inputPixel[2] = 1 / inputPixel[0];\n    inputPixel[3] = 1 / inputPixel[1];\n    inputClamp[0] = 0.5 * inputPixel[2];\n    inputClamp[1] = 0.5 * inputPixel[3];\n    inputClamp[2] = input.frame.width * inputSize[2] - 0.5 * inputPixel[2];\n    inputClamp[3] = input.frame.height * inputSize[3] - 0.5 * inputPixel[3];\n    const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n    globalFrame[0] = offsetX * resolution;\n    globalFrame[1] = offsetY * resolution;\n    globalFrame[2] = rootTexture.source.width * resolution;\n    globalFrame[3] = rootTexture.source.height * resolution;\n    if (output instanceof Texture)\n      output.source.resource = null;\n    const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n    this.renderer.renderTarget.bind(output, !!clear);\n    if (output instanceof Texture) {\n      outputTexture[0] = output.frame.width;\n      outputTexture[1] = output.frame.height;\n    } else {\n      outputTexture[0] = renderTarget.width;\n      outputTexture[1] = renderTarget.height;\n    }\n    outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n    this._filterGlobalUniforms.update();\n  }\n  /**\n   * Finds the correct resolution by looking back through the filter stack.\n   * @param rootResolution - The fallback root resolution to use\n   * @returns The resolution from the previous filter or root resolution\n   */\n  _findFilterResolution(rootResolution) {\n    let currentIndex = this._filterStackIndex - 1;\n    while (currentIndex > 0 && this._filterStack[currentIndex].skip) {\n      --currentIndex;\n    }\n    return currentIndex > 0 && this._filterStack[currentIndex].inputTexture ? this._filterStack[currentIndex].inputTexture.source._resolution : rootResolution;\n  }\n  /**\n   * Finds the offset from the previous non-skipped filter in the stack.\n   * @returns The offset coordinates from the previous filter\n   */\n  _findPreviousFilterOffset() {\n    let offsetX = 0;\n    let offsetY = 0;\n    let lastIndex = this._filterStackIndex;\n    while (lastIndex > 0) {\n      lastIndex--;\n      const prevFilterData = this._filterStack[lastIndex];\n      if (!prevFilterData.skip) {\n        offsetX = prevFilterData.bounds.minX;\n        offsetY = prevFilterData.bounds.minY;\n        break;\n      }\n    }\n    return { x: offsetX, y: offsetY };\n  }\n  /**\n   * Calculates the filter area bounds based on the instruction type.\n   * @param instruction - The filter instruction\n   * @param bounds - The bounds object to populate\n   */\n  _calculateFilterArea(instruction, bounds) {\n    if (instruction.renderables) {\n      getGlobalRenderableBounds(instruction.renderables, bounds);\n    } else if (instruction.filterEffect.filterArea) {\n      bounds.clear();\n      bounds.addRect(instruction.filterEffect.filterArea);\n      bounds.applyMatrix(instruction.container.worldTransform);\n    } else {\n      instruction.container.getFastGlobalBounds(true, bounds);\n    }\n    if (instruction.container) {\n      const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n      const filterFrameTransform = renderGroup.cacheToLocalTransform;\n      if (filterFrameTransform) {\n        bounds.applyMatrix(filterFrameTransform);\n      }\n    }\n  }\n  _applyFiltersToTexture(filterData, clear) {\n    const inputTexture = filterData.inputTexture;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n    this._globalFilterBindGroup.setResource(filterData.backTexture.source, 3);\n    if (filters.length === 1) {\n      filters[0].apply(this, inputTexture, filterData.outputRenderSurface, clear);\n    } else {\n      let flip = filterData.inputTexture;\n      const tempTexture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        flip.source._resolution,\n        false\n      );\n      let flop = tempTexture;\n      let i = 0;\n      for (i = 0; i < filters.length - 1; ++i) {\n        const filter = filters[i];\n        filter.apply(this, flip, flop, true);\n        const t = flip;\n        flip = flop;\n        flop = t;\n      }\n      filters[i].apply(this, flip, filterData.outputRenderSurface, clear);\n      TexturePool.returnTexture(tempTexture);\n    }\n  }\n  _calculateFilterBounds(filterData, viewPort, rootAntialias, rootResolution, paddingMultiplier) {\n    const renderer = this.renderer;\n    const bounds = filterData.bounds;\n    const filters = filterData.filters;\n    let resolution = Infinity;\n    let padding = 0;\n    let antialias = true;\n    let blendRequired = false;\n    let enabled = false;\n    let clipToViewport = true;\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      resolution = Math.min(resolution, filter.resolution === \"inherit\" ? rootResolution : filter.resolution);\n      padding += filter.padding;\n      if (filter.antialias === \"off\") {\n        antialias = false;\n      } else if (filter.antialias === \"inherit\") {\n        antialias && (antialias = rootAntialias);\n      }\n      if (!filter.clipToViewport) {\n        clipToViewport = false;\n      }\n      const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n      if (!isCompatible) {\n        enabled = false;\n        break;\n      }\n      if (filter.blendRequired && !(renderer.backBuffer?.useBackBuffer ?? true)) {\n        warn(\"Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.\");\n        enabled = false;\n        break;\n      }\n      enabled = filter.enabled || enabled;\n      blendRequired || (blendRequired = filter.blendRequired);\n    }\n    if (!enabled) {\n      filterData.skip = true;\n      return;\n    }\n    if (clipToViewport) {\n      bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n    }\n    bounds.scale(resolution).ceil().scale(1 / resolution).pad((padding | 0) * paddingMultiplier);\n    if (!bounds.isPositive) {\n      filterData.skip = true;\n      return;\n    }\n    filterData.antialias = antialias;\n    filterData.resolution = resolution;\n    filterData.blendRequired = blendRequired;\n  }\n  _popFilterData() {\n    this._filterStackIndex--;\n    return this._filterStack[this._filterStackIndex];\n  }\n  _getPreviousFilterData() {\n    let previousFilterData;\n    let index = this._filterStackIndex - 1;\n    while (index > 1) {\n      index--;\n      previousFilterData = this._filterStack[index];\n      if (!previousFilterData.skip) {\n        break;\n      }\n    }\n    return previousFilterData;\n  }\n  _pushFilterData() {\n    let filterData = this._filterStack[this._filterStackIndex];\n    if (!filterData) {\n      filterData = this._filterStack[this._filterStackIndex] = new FilterData();\n    }\n    this._filterStackIndex++;\n    return filterData;\n  }\n}\n/** @ignore */\nFilterSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"filter\"\n};\n\nexport { FilterSystem };\n//# sourceMappingURL=FilterSystem.mjs.map\n","\"use strict\";\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const tempMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    bounds.matrix = renderable.worldTransform;\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = tempMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { extensions } from '../extensions/Extensions.mjs';\nimport { FilterPipe } from './FilterPipe.mjs';\nimport { FilterSystem } from './FilterSystem.mjs';\n\n\"use strict\";\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n//# sourceMappingURL=init.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst _MeshGeometry = class _MeshGeometry extends Geometry {\n  constructor(...args) {\n    let options = args[0] ?? {};\n    if (options instanceof Float32Array) {\n      deprecation(v8_0_0, \"use new MeshGeometry({ positions, uvs, indices }) instead\");\n      options = {\n        positions: options,\n        uvs: args[1],\n        indices: args[2]\n      };\n    }\n    options = { ..._MeshGeometry.defaultOptions, ...options };\n    const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n    let uvs = options.uvs;\n    if (!uvs) {\n      if (options.positions) {\n        uvs = new Float32Array(positions.length);\n      } else {\n        uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n      }\n    }\n    const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n    const shrinkToFit = options.shrinkBuffersToFit;\n    const positionBuffer = new Buffer({\n      data: positions,\n      label: \"attribute-mesh-positions\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const uvBuffer = new Buffer({\n      data: uvs,\n      label: \"attribute-mesh-uvs\",\n      shrinkToFit,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    const indexBuffer = new Buffer({\n      data: indices,\n      label: \"index-mesh-buffer\",\n      shrinkToFit,\n      usage: BufferUsage.INDEX | BufferUsage.COPY_DST\n    });\n    super({\n      attributes: {\n        aPosition: {\n          buffer: positionBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        },\n        aUV: {\n          buffer: uvBuffer,\n          format: \"float32x2\",\n          stride: 2 * 4,\n          offset: 0\n        }\n      },\n      indexBuffer,\n      topology: options.topology\n    });\n    this.batchMode = \"auto\";\n  }\n  /** The positions of the mesh. */\n  get positions() {\n    return this.attributes.aPosition.buffer.data;\n  }\n  /**\n   * Set the positions of the mesh.\n   * When setting the positions, its important that the uvs array is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The positions of the mesh.\n   */\n  set positions(value) {\n    this.attributes.aPosition.buffer.data = value;\n  }\n  /** The UVs of the mesh. */\n  get uvs() {\n    return this.attributes.aUV.buffer.data;\n  }\n  /**\n   * Set the UVs of the mesh.\n   * Its important that the uvs array you set is at least as long as the positions array.\n   * otherwise the geometry will not be valid.\n   * @param {Float32Array} value - The UVs of the mesh.\n   */\n  set uvs(value) {\n    this.attributes.aUV.buffer.data = value;\n  }\n  /** The indices of the mesh. */\n  get indices() {\n    return this.indexBuffer.data;\n  }\n  set indices(value) {\n    this.indexBuffer.data = value;\n  }\n};\n_MeshGeometry.defaultOptions = {\n  topology: \"triangle-list\",\n  shrinkBuffersToFit: false\n};\nlet MeshGeometry = _MeshGeometry;\n\nexport { MeshGeometry };\n//# sourceMappingURL=MeshGeometry.mjs.map\n","import { BatchableSprite } from '../../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableText extends BatchableSprite {\n  constructor(renderer) {\n    super();\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  destroy() {\n    this._renderer.canvasText.returnTexture(this.texture);\n    this._renderer = null;\n  }\n}\n\nexport { BatchableText };\n//# sourceMappingURL=BatchableText.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { updateTextBounds } from '../utils/updateTextBounds.mjs';\nimport { BatchableText } from './BatchableText.mjs';\n\n\"use strict\";\nclass CanvasTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(text) {\n    return text._didTextUpdate;\n  }\n  addRenderable(text, instructionSet) {\n    const batchableText = this._getGpuText(text);\n    if (text._didTextUpdate) {\n      this._updateGpuText(text);\n      text._didTextUpdate = false;\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableText, instructionSet);\n  }\n  updateRenderable(text) {\n    const batchableText = this._getGpuText(text);\n    batchableText._batcher.updateElement(batchableText);\n  }\n  _updateGpuText(text) {\n    const batchableText = this._getGpuText(text);\n    if (batchableText.texture) {\n      this._renderer.canvasText.returnTexture(batchableText.texture);\n    }\n    text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n    batchableText.texture = batchableText.texture = this._renderer.canvasText.getTexture(text);\n    updateTextBounds(batchableText, text);\n  }\n  _getGpuText(text) {\n    return text._gpuData[this._renderer.uid] || this.initGpuText(text);\n  }\n  initGpuText(text) {\n    const batchableText = new BatchableText(this._renderer);\n    batchableText.renderable = text;\n    batchableText.transform = text.groupTransform;\n    batchableText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableText.roundPixels = this._renderer._roundPixels | text._roundPixels;\n    text._gpuData[this._renderer.uid] = batchableText;\n    return batchableText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"text\"\n};\n\nexport { CanvasTextPipe };\n//# sourceMappingURL=CanvasTextPipe.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\nimport { nextPow2 } from '../../maths/misc/pow2.mjs';\nimport { Rectangle } from '../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nlet _internalCanvas = null;\nlet _internalContext = null;\nfunction ensureInternalCanvas(width, height) {\n  if (!_internalCanvas) {\n    _internalCanvas = DOMAdapter.get().createCanvas(256, 128);\n    _internalContext = _internalCanvas.getContext(\"2d\", { willReadFrequently: true });\n    _internalContext.globalCompositeOperation = \"copy\";\n    _internalContext.globalAlpha = 1;\n  }\n  if (_internalCanvas.width < width || _internalCanvas.height < height) {\n    _internalCanvas.width = nextPow2(width);\n    _internalCanvas.height = nextPow2(height);\n  }\n}\nfunction checkRow(data, width, y) {\n  for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction checkColumn(data, width, x, top, bottom) {\n  const stride = 4 * width;\n  for (let y = top, index = top * stride + 4 * x; y <= bottom; ++y, index += stride) {\n    if (data[index + 3] !== 0)\n      return false;\n  }\n  return true;\n}\nfunction getCanvasBoundingBox(...args) {\n  let options = args[0];\n  if (!options.canvas) {\n    options = { canvas: args[0], resolution: args[1] };\n  }\n  const { canvas } = options;\n  const resolution = Math.min(options.resolution ?? 1, 1);\n  const width = options.width ?? canvas.width;\n  const height = options.height ?? canvas.height;\n  let output = options.output;\n  ensureInternalCanvas(width, height);\n  if (!_internalContext) {\n    throw new TypeError(\"Failed to get canvas 2D context\");\n  }\n  _internalContext.drawImage(\n    canvas,\n    0,\n    0,\n    width,\n    height,\n    0,\n    0,\n    width * resolution,\n    height * resolution\n  );\n  const imageData = _internalContext.getImageData(0, 0, width, height);\n  const data = imageData.data;\n  let left = 0;\n  let top = 0;\n  let right = width - 1;\n  let bottom = height - 1;\n  while (top < height && checkRow(data, width, top))\n    ++top;\n  if (top === height)\n    return Rectangle.EMPTY;\n  while (checkRow(data, width, bottom))\n    --bottom;\n  while (checkColumn(data, width, left, top, bottom))\n    ++left;\n  while (checkColumn(data, width, right, top, bottom))\n    --right;\n  ++right;\n  ++bottom;\n  _internalContext.globalCompositeOperation = \"source-over\";\n  _internalContext.strokeRect(left, top, right - left, bottom - top);\n  _internalContext.globalCompositeOperation = \"copy\";\n  output ?? (output = new Rectangle());\n  output.set(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n  return output;\n}\n\nexport { getCanvasBoundingBox };\n//# sourceMappingURL=getCanvasBoundingBox.mjs.map\n","import { Color } from '../../../color/Color.mjs';\nimport { Rectangle } from '../../../maths/shapes/Rectangle.mjs';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox.mjs';\nimport { CanvasTextMetrics } from './CanvasTextMetrics.mjs';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle.mjs';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nclass CanvasTextGeneratorClass {\n  /**\n   * Creates a canvas with the specified text rendered to it.\n   *\n   * Generates a canvas of appropriate size, renders the text with the provided style,\n   * and returns both the canvas/context and a Rectangle representing the text bounds.\n   *\n   * When trim is enabled in the style, the frame will represent the bounds of the\n   * non-transparent pixels, which can be smaller than the full canvas.\n   * @param options - The options for generating the text canvas\n   * @param options.text - The text to render\n   * @param options.style - The style to apply to the text\n   * @param options.resolution - The resolution of the canvas (defaults to 1)\n   * @param options.padding\n   * @returns An object containing the canvas/context and the frame (bounds) of the text\n   */\n  getCanvasAndContext(options) {\n    const { text, style, resolution = 1 } = options;\n    const padding = style._getFinalPadding();\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + padding * 2) * resolution);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n    this._renderTextToCanvas(text, style, padding, resolution, canvasAndContext);\n    const frame = style.trim ? getCanvasBoundingBox({ canvas: canvasAndContext.canvas, width, height, resolution: 1, output: tempRect }) : tempRect.set(0, 0, width, height);\n    return {\n      canvasAndContext,\n      frame\n    };\n  }\n  /**\n   * Returns a canvas and context to the pool.\n   *\n   * This should be called when you're done with the canvas to allow reuse\n   * and prevent memory leaks.\n   * @param canvasAndContext - The canvas and context to return to the pool\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * @param text - The text to render\n   * @param style - The style of the text\n   * @param padding - The padding of the text\n   * @param resolution - The resolution of the text\n   * @param canvasAndContext - The canvas and context to render the text to\n   */\n  _renderTextToCanvas(text, style, padding, resolution, canvasAndContext) {\n    const { canvas, context } = canvasAndContext;\n    const font = fontStringFromTextStyle(style);\n    const measured = CanvasTextMetrics.measureText(text || \" \", style);\n    const lines = measured.lines;\n    const lineHeight = measured.lineHeight;\n    const lineWidths = measured.lineWidths;\n    const maxLineWidth = measured.maxLineWidth;\n    const fontProperties = measured.fontProperties;\n    const height = canvas.height;\n    context.resetTransform();\n    context.scale(resolution, resolution);\n    context.textBaseline = style.textBaseline;\n    if (style._stroke?.width) {\n      const strokeStyle = style._stroke;\n      context.lineWidth = strokeStyle.width;\n      context.miterLimit = strokeStyle.miterLimit;\n      context.lineJoin = strokeStyle.join;\n      context.lineCap = strokeStyle.cap;\n    }\n    context.font = font;\n    let linePositionX;\n    let linePositionY;\n    const passesCount = style.dropShadow ? 2 : 1;\n    for (let i = 0; i < passesCount; ++i) {\n      const isShadowPass = style.dropShadow && i === 0;\n      const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + padding * 2) : 0;\n      const dsOffsetShadow = dsOffsetText * resolution;\n      if (isShadowPass) {\n        context.fillStyle = \"black\";\n        context.strokeStyle = \"black\";\n        const shadowOptions = style.dropShadow;\n        const dropShadowColor = shadowOptions.color;\n        const dropShadowAlpha = shadowOptions.alpha;\n        context.shadowColor = Color.shared.setValue(dropShadowColor).setAlpha(dropShadowAlpha).toRgbaString();\n        const dropShadowBlur = shadowOptions.blur * resolution;\n        const dropShadowDistance = shadowOptions.distance * resolution;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n        if (style._stroke?.width) {\n          const padding2 = style._stroke.width * style._stroke.alignment;\n          context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding2);\n        }\n        context.shadowColor = \"black\";\n      }\n      let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n      if (lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      }\n      const strokeWidth = style._stroke?.width ?? 0;\n      for (let i2 = 0; i2 < lines.length; i2++) {\n        linePositionX = strokeWidth / 2;\n        linePositionY = strokeWidth / 2 + i2 * lineHeight + fontProperties.ascent + linePositionYShift;\n        if (style.align === \"right\") {\n          linePositionX += maxLineWidth - lineWidths[i2];\n        } else if (style.align === \"center\") {\n          linePositionX += (maxLineWidth - lineWidths[i2]) / 2;\n        }\n        if (style._stroke?.width) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + padding,\n            linePositionY + padding - dsOffsetText,\n            true\n          );\n        }\n        if (style._fill !== void 0) {\n          this._drawLetterSpacing(\n            lines[i2],\n            style,\n            canvasAndContext,\n            linePositionX + padding,\n            linePositionY + padding - dsOffsetText\n          );\n        }\n      }\n    }\n  }\n  /**\n   * Render the text with letter-spacing.\n   *\n   * This method handles rendering text with the correct letter spacing, using either:\n   * 1. Native letter spacing if supported by the browser\n   * 2. Manual letter spacing calculation if not natively supported\n   *\n   * For manual letter spacing, it calculates the position of each character\n   * based on its width and the desired spacing.\n   * @param text - The text to draw\n   * @param style - The text style to apply\n   * @param canvasAndContext - The canvas and context to draw to\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Whether to render the stroke (true) or fill (false)\n   * @private\n   */\n  _drawLetterSpacing(text, style, canvasAndContext, x, y, isStroke = false) {\n    const { context } = canvasAndContext;\n    const letterSpacing = style.letterSpacing;\n    let useExperimentalLetterSpacing = false;\n    if (CanvasTextMetrics.experimentalLetterSpacingSupported) {\n      if (CanvasTextMetrics.experimentalLetterSpacing) {\n        context.letterSpacing = `${letterSpacing}px`;\n        context.textLetterSpacing = `${letterSpacing}px`;\n        useExperimentalLetterSpacing = true;\n      } else {\n        context.letterSpacing = \"0px\";\n        context.textLetterSpacing = \"0px\";\n      }\n    }\n    if (letterSpacing === 0 || useExperimentalLetterSpacing) {\n      if (isStroke) {\n        context.strokeText(text, x, y);\n      } else {\n        context.fillText(text, x, y);\n      }\n      return;\n    }\n    let currentPosition = x;\n    const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n    let previousWidth = context.measureText(text).width;\n    let currentWidth = 0;\n    for (let i = 0; i < stringArray.length; ++i) {\n      const currentChar = stringArray[i];\n      if (isStroke) {\n        context.strokeText(currentChar, currentPosition, y);\n      } else {\n        context.fillText(currentChar, currentPosition, y);\n      }\n      let textStr = \"\";\n      for (let j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n      currentWidth = context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  }\n}\nconst CanvasTextGenerator = new CanvasTextGeneratorClass();\n\nexport { CanvasTextGenerator };\n//# sourceMappingURL=CanvasTextGenerator.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { deprecation } from '../../../utils/logging/deprecation.mjs';\nimport { TextStyle } from '../TextStyle.mjs';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource.mjs';\nimport { CanvasTextGenerator } from './CanvasTextGenerator.mjs';\n\n\"use strict\";\nclass CanvasTextSystem {\n  constructor(_renderer) {\n    this._renderer = _renderer;\n  }\n  getTexture(options, _resolution, _style, _textKey) {\n    if (typeof options === \"string\") {\n      deprecation(\"8.0.0\", \"CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments\");\n      options = {\n        text: options,\n        style: _style,\n        resolution: _resolution\n      };\n    }\n    if (!(options.style instanceof TextStyle)) {\n      options.style = new TextStyle(options.style);\n    }\n    if (!(options.textureStyle instanceof TextureStyle)) {\n      options.textureStyle = new TextureStyle(options.textureStyle);\n    }\n    if (typeof options.text !== \"string\") {\n      options.text = options.text.toString();\n    }\n    const { text, style, textureStyle } = options;\n    const resolution = options.resolution ?? this._renderer.resolution;\n    const { frame, canvasAndContext } = CanvasTextGenerator.getCanvasAndContext({\n      text,\n      style,\n      resolution\n    });\n    const texture = getPo2TextureFromSource(canvasAndContext.canvas, frame.width, frame.height, resolution);\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (style.trim) {\n      frame.pad(style.padding);\n      texture.frame.copyFrom(frame);\n      texture.updateUvs();\n    }\n    if (style.filters) {\n      const filteredTexture = this._applyFilters(texture, style.filters);\n      this.returnTexture(texture);\n      CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n      return filteredTexture;\n    }\n    this._renderer.texture.initSource(texture._source);\n    CanvasTextGenerator.returnCanvasAndContext(canvasAndContext);\n    return texture;\n  }\n  /**\n   * Returns a texture that was created wit the above `getTexture` function.\n   * Handy if you are done with a texture and want to return it to the pool.\n   * @param texture - The texture to be returned.\n   */\n  returnTexture(texture) {\n    const source = texture.source;\n    source.resource = null;\n    source.uploadMethodId = \"unknown\";\n    source.alphaMode = \"no-premultiply-alpha\";\n    TexturePool.returnTexture(texture, true);\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   * @deprecated since 8.10.0\n   */\n  renderTextToCanvas() {\n    deprecation(\n      \"8.10.0\",\n      \"CanvasTextSystem.renderTextToCanvas: no longer supported, use CanvasTextSystem.getTexture instead\"\n    );\n  }\n  /**\n   * Applies the specified filters to the given texture.\n   *\n   * This method takes a texture and a list of filters, applies the filters to the texture,\n   * and returns the resulting texture. It also ensures that the alpha mode of the resulting\n   * texture is set to 'premultiplied-alpha'.\n   * @param {Texture} texture - The texture to which the filters will be applied.\n   * @param {Filter[]} filters - The filters to apply to the texture.\n   * @returns {Texture} The resulting texture after all filters have been applied.\n   */\n  _applyFilters(texture, filters) {\n    const currentRenderTarget = this._renderer.renderTarget.renderTarget;\n    const resultTexture = this._renderer.filter.generateFilteredTexture({\n      texture,\n      filters\n    });\n    this._renderer.renderTarget.bind(currentRenderTarget, false);\n    return resultTexture;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nCanvasTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"canvasText\"\n};\n\nexport { CanvasTextSystem };\n//# sourceMappingURL=CanvasTextSystem.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe.mjs';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem.mjs';\n\n\"use strict\";\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n//# sourceMappingURL=init.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from './BatchableMesh.mjs';\n\n\"use strict\";\nclass MeshGpuData {\n  destroy() {\n  }\n}\nclass MeshPipe {\n  constructor(renderer, adaptor) {\n    this.localUniforms = new UniformGroup({\n      uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n      uRound: { value: 0, type: \"f32\" }\n    });\n    this.localUniformsBindGroup = new BindGroup({\n      0: this.localUniforms\n    });\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this._adaptor.init();\n  }\n  validateRenderable(mesh) {\n    const meshData = this._getMeshData(mesh);\n    const wasBatched = meshData.batched;\n    const isBatched = mesh.batched;\n    meshData.batched = isBatched;\n    if (wasBatched !== isBatched) {\n      return true;\n    } else if (isBatched) {\n      const geometry = mesh._geometry;\n      if (geometry.indices.length !== meshData.indexSize || geometry.positions.length !== meshData.vertexSize) {\n        meshData.indexSize = geometry.indices.length;\n        meshData.vertexSize = geometry.positions.length;\n        return true;\n      }\n      const batchableMesh = this._getBatchableMesh(mesh);\n      if (batchableMesh.texture.uid !== mesh._texture.uid) {\n        batchableMesh._textureMatrixUpdateId = -1;\n      }\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        mesh._texture\n      );\n    }\n    return false;\n  }\n  addRenderable(mesh, instructionSet) {\n    const batcher = this.renderer.renderPipes.batch;\n    const { batched } = this._getMeshData(mesh);\n    if (batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      batcher.addToBatch(gpuBatchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      instructionSet.add(mesh);\n    }\n  }\n  updateRenderable(mesh) {\n    if (mesh.batched) {\n      const gpuBatchableMesh = this._getBatchableMesh(mesh);\n      gpuBatchableMesh.setTexture(mesh._texture);\n      gpuBatchableMesh.geometry = mesh._geometry;\n      gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n    }\n  }\n  execute(mesh) {\n    if (!mesh.isRenderable)\n      return;\n    mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n    const localUniforms = this.localUniforms;\n    localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n    localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n    localUniforms.update();\n    color32BitToUniform(\n      mesh.groupColorAlpha,\n      localUniforms.uniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, mesh);\n  }\n  _getMeshData(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].meshData || this._initMeshData(mesh);\n  }\n  _initMeshData(mesh) {\n    mesh._gpuData[this.renderer.uid].meshData = {\n      batched: mesh.batched,\n      indexSize: mesh._geometry.indices?.length,\n      vertexSize: mesh._geometry.positions?.length\n    };\n    return mesh._gpuData[this.renderer.uid].meshData;\n  }\n  _getBatchableMesh(mesh) {\n    var _a, _b;\n    (_a = mesh._gpuData)[_b = this.renderer.uid] || (_a[_b] = new MeshGpuData());\n    return mesh._gpuData[this.renderer.uid].batchableMesh || this._initBatchableMesh(mesh);\n  }\n  _initBatchableMesh(mesh) {\n    const gpuMesh = new BatchableMesh();\n    gpuMesh.renderable = mesh;\n    gpuMesh.setTexture(mesh._texture);\n    gpuMesh.transform = mesh.groupTransform;\n    gpuMesh.roundPixels = this.renderer._roundPixels | mesh._roundPixels;\n    mesh._gpuData[this.renderer.uid].batchableMesh = gpuMesh;\n    return gpuMesh;\n  }\n  destroy() {\n    this.localUniforms = null;\n    this.localUniformsBindGroup = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.renderer = null;\n  }\n}\n/** @ignore */\nMeshPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"mesh\"\n};\n\nexport { MeshGpuData, MeshPipe };\n//# sourceMappingURL=MeshPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { MeshPipe } from './shared/MeshPipe.mjs';\n\n\"use strict\";\nextensions.add(MeshPipe);\n//# sourceMappingURL=init.mjs.map\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nconst _PlaneGeometry = class _PlaneGeometry extends MeshGeometry {\n  constructor(...args) {\n    super({});\n    let options = args[0] ?? {};\n    if (typeof options === \"number\") {\n      deprecation(v8_0_0, \"PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead\");\n      options = {\n        width: options,\n        height: args[1],\n        verticesX: args[2],\n        verticesY: args[3]\n      };\n    }\n    this.build(options);\n  }\n  /**\n   * Refreshes plane coordinates\n   * @param options - Options to be applied to plane geometry\n   */\n  build(options) {\n    options = { ..._PlaneGeometry.defaultOptions, ...options };\n    this.verticesX = this.verticesX ?? options.verticesX;\n    this.verticesY = this.verticesY ?? options.verticesY;\n    this.width = this.width ?? options.width;\n    this.height = this.height ?? options.height;\n    const total = this.verticesX * this.verticesY;\n    const verts = [];\n    const uvs = [];\n    const indices = [];\n    const verticesX = this.verticesX - 1;\n    const verticesY = this.verticesY - 1;\n    const sizeX = this.width / verticesX;\n    const sizeY = this.height / verticesY;\n    for (let i = 0; i < total; i++) {\n      const x = i % this.verticesX;\n      const y = i / this.verticesX | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / verticesX, y / verticesY);\n    }\n    const totalSub = verticesX * verticesY;\n    for (let i = 0; i < totalSub; i++) {\n      const xpos = i % verticesX;\n      const ypos = i / verticesX | 0;\n      const value = ypos * this.verticesX + xpos;\n      const value2 = ypos * this.verticesX + xpos + 1;\n      const value3 = (ypos + 1) * this.verticesX + xpos;\n      const value4 = (ypos + 1) * this.verticesX + xpos + 1;\n      indices.push(\n        value,\n        value2,\n        value3,\n        value2,\n        value4,\n        value3\n      );\n    }\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint32Array(indices);\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  }\n};\n_PlaneGeometry.defaultOptions = {\n  width: 100,\n  height: 100,\n  verticesX: 10,\n  verticesY: 10\n};\nlet PlaneGeometry = _PlaneGeometry;\n\nexport { PlaneGeometry };\n//# sourceMappingURL=PlaneGeometry.mjs.map\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry.mjs';\n\n\"use strict\";\nconst _NineSliceGeometry = class _NineSliceGeometry extends PlaneGeometry {\n  constructor(options = {}) {\n    options = { ..._NineSliceGeometry.defaultOptions, ...options };\n    super({\n      width: options.width,\n      height: options.height,\n      verticesX: 4,\n      verticesY: 4\n    });\n    this.update(options);\n  }\n  /**\n   * Updates the NineSliceGeometry with the options.\n   * @param options - The options of the NineSliceGeometry.\n   */\n  update(options) {\n    this.width = options.width ?? this.width;\n    this.height = options.height ?? this.height;\n    this._originalWidth = options.originalWidth ?? this._originalWidth;\n    this._originalHeight = options.originalHeight ?? this._originalHeight;\n    this._leftWidth = options.leftWidth ?? this._leftWidth;\n    this._rightWidth = options.rightWidth ?? this._rightWidth;\n    this._topHeight = options.topHeight ?? this._topHeight;\n    this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n    this._anchorX = options.anchor?.x;\n    this._anchorY = options.anchor?.y;\n    this.updateUvs();\n    this.updatePositions();\n  }\n  /** Updates the positions of the vertices. */\n  updatePositions() {\n    const p = this.positions;\n    const {\n      width,\n      height,\n      _leftWidth,\n      _rightWidth,\n      _topHeight,\n      _bottomHeight,\n      _anchorX,\n      _anchorY\n    } = this;\n    const w = _leftWidth + _rightWidth;\n    const scaleW = width > w ? 1 : width / w;\n    const h = _topHeight + _bottomHeight;\n    const scaleH = height > h ? 1 : height / h;\n    const scale = Math.min(scaleW, scaleH);\n    const anchorOffsetX = _anchorX * width;\n    const anchorOffsetY = _anchorY * height;\n    p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n    p[2] = p[10] = p[18] = p[26] = _leftWidth * scale - anchorOffsetX;\n    p[4] = p[12] = p[20] = p[28] = width - _rightWidth * scale - anchorOffsetX;\n    p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n    p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n    p[9] = p[11] = p[13] = p[15] = _topHeight * scale - anchorOffsetY;\n    p[17] = p[19] = p[21] = p[23] = height - _bottomHeight * scale - anchorOffsetY;\n    p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n    this.getBuffer(\"aPosition\").update();\n  }\n  /** Updates the UVs of the vertices. */\n  updateUvs() {\n    const uvs = this.uvs;\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    const _uvw = 1 / this._originalWidth;\n    const _uvh = 1 / this._originalHeight;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.getBuffer(\"aUV\").update();\n  }\n};\n/** The default options for the NineSliceGeometry. */\n_NineSliceGeometry.defaultOptions = {\n  /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  width: 100,\n  /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n  height: 100,\n  /** The width of the left column. */\n  leftWidth: 10,\n  /** The height of the top row. */\n  topHeight: 10,\n  /** The width of the right column. */\n  rightWidth: 10,\n  /** The height of the bottom row. */\n  bottomHeight: 10,\n  /** The original width of the texture */\n  originalWidth: 100,\n  /** The original height of the texture */\n  originalHeight: 100\n};\nlet NineSliceGeometry = _NineSliceGeometry;\n\nexport { NineSliceGeometry };\n//# sourceMappingURL=NineSliceGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { NineSliceGeometry } from './NineSliceGeometry.mjs';\n\n\"use strict\";\nclass NineSliceSpriteGpuData extends BatchableMesh {\n  constructor() {\n    super();\n    this.geometry = new NineSliceGeometry();\n  }\n  destroy() {\n    this.geometry.destroy();\n  }\n}\nclass NineSliceSpritePipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderable(sprite, instructionSet) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n  }\n  updateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    if (sprite.didViewUpdate)\n      this._updateBatchableSprite(sprite, gpuSprite);\n    gpuSprite._batcher.updateElement(gpuSprite);\n  }\n  validateRenderable(sprite) {\n    const gpuSprite = this._getGpuSprite(sprite);\n    return !gpuSprite._batcher.checkAndUpdateTexture(\n      gpuSprite,\n      sprite._texture\n    );\n  }\n  _updateBatchableSprite(sprite, batchableSprite) {\n    batchableSprite.geometry.update(sprite);\n    batchableSprite.setTexture(sprite._texture);\n  }\n  _getGpuSprite(sprite) {\n    return sprite._gpuData[this._renderer.uid] || this._initGPUSprite(sprite);\n  }\n  _initGPUSprite(sprite) {\n    const gpuData = sprite._gpuData[this._renderer.uid] = new NineSliceSpriteGpuData();\n    const batchableMesh = gpuData;\n    batchableMesh.renderable = sprite;\n    batchableMesh.transform = sprite.groupTransform;\n    batchableMesh.texture = sprite._texture;\n    batchableMesh.roundPixels = this._renderer._roundPixels | sprite._roundPixels;\n    if (!sprite.didViewUpdate) {\n      this._updateBatchableSprite(sprite, batchableMesh);\n    }\n    return gpuData;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nNineSliceSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"nineSliceSprite\"\n};\n\nexport { NineSliceSpriteGpuData, NineSliceSpritePipe };\n//# sourceMappingURL=NineSliceSpritePipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(NineSliceSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    canvasAndContext.context.resetTransform();\n    canvasAndContext.context.clearRect(0, 0, width, height);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n  destroy() {\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","\"use strict\";\nconst tilingBit = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* wgsl */\n      `\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            }\n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    )\n  }\n};\nconst tilingBitGl = {\n  name: \"tiling-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n    )\n  },\n  fragment: {\n    header: (\n      /* glsl */\n      `\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n\n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n\n        `\n    )\n  }\n};\n\nexport { tilingBit, tilingBitGl };\n//# sourceMappingURL=tilingBit.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { compileHighShaderGpuProgram, compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram.mjs';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit.mjs';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit.mjs';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { tilingBit, tilingBitGl } from './tilingBit.mjs';\n\n\"use strict\";\nlet gpuProgram;\nlet glProgram;\nclass TilingSpriteShader extends Shader {\n  constructor() {\n    gpuProgram ?? (gpuProgram = compileHighShaderGpuProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBit,\n        tilingBit,\n        roundPixelsBit\n      ]\n    }));\n    glProgram ?? (glProgram = compileHighShaderGlProgram({\n      name: \"tiling-sprite-shader\",\n      bits: [\n        localUniformBitGl,\n        tilingBitGl,\n        roundPixelsBitGl\n      ]\n    }));\n    const tilingUniforms = new UniformGroup({\n      uMapCoord: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: \"vec4<f32>\" },\n      uClampOffset: { value: new Float32Array([0, 0]), type: \"vec2<f32>\" },\n      uTextureTransform: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: \"vec4<f32>\" }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        localUniforms: new UniformGroup({\n          uTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Float32Array([1, 1, 1, 1]), type: \"vec4<f32>\" },\n          uRound: { value: 0, type: \"f32\" }\n        }),\n        tilingUniforms,\n        uTexture: Texture.EMPTY.source,\n        uSampler: Texture.EMPTY.source.style\n      }\n    });\n  }\n  updateUniforms(width, height, matrix, anchorX, anchorY, texture) {\n    const tilingUniforms = this.resources.tilingUniforms;\n    const textureWidth = texture.width;\n    const textureHeight = texture.height;\n    const textureMatrix = texture.textureMatrix;\n    const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n    uTextureTransform.set(\n      matrix.a * textureWidth / width,\n      matrix.b * textureWidth / height,\n      matrix.c * textureHeight / width,\n      matrix.d * textureHeight / height,\n      matrix.tx / width,\n      matrix.ty / height\n    );\n    uTextureTransform.invert();\n    tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n    tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n    tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n    tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n    tilingUniforms.uniforms.uSizeAnchor[0] = width;\n    tilingUniforms.uniforms.uSizeAnchor[1] = height;\n    tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n    tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n    if (texture) {\n      this.resources.uTexture = texture.source;\n      this.resources.uSampler = texture.source.style;\n    }\n  }\n}\n\nexport { TilingSpriteShader };\n//# sourceMappingURL=TilingSpriteShader.mjs.map\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry.mjs';\n\n\"use strict\";\nclass QuadGeometry extends MeshGeometry {\n  constructor() {\n    super({\n      positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n      indices: new Uint32Array([0, 1, 2, 0, 2, 3])\n    });\n  }\n}\n\nexport { QuadGeometry };\n//# sourceMappingURL=QuadGeometry.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../rendering/renderers/shared/state/State.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform.mjs';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh.mjs';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry.mjs';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader.mjs';\nimport { QuadGeometry } from './utils/QuadGeometry.mjs';\nimport { setPositions } from './utils/setPositions.mjs';\nimport { setUvs } from './utils/setUvs.mjs';\n\n\"use strict\";\nconst sharedQuad = new QuadGeometry();\nclass TilingSpriteGpuData {\n  constructor() {\n    this.canBatch = true;\n    this.geometry = new MeshGeometry({\n      indices: sharedQuad.indices.slice(),\n      positions: sharedQuad.positions.slice(),\n      uvs: sharedQuad.uvs.slice()\n    });\n  }\n  destroy() {\n    this.geometry.destroy();\n    this.shader?.destroy();\n  }\n}\nclass TilingSpritePipe {\n  constructor(renderer) {\n    this._state = State.default2d;\n    this._renderer = renderer;\n  }\n  validateRenderable(renderable) {\n    const tilingSpriteData = this._getTilingSpriteData(renderable);\n    const couldBatch = tilingSpriteData.canBatch;\n    this._updateCanBatch(renderable);\n    const canBatch = tilingSpriteData.canBatch;\n    if (canBatch && canBatch === couldBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      return !batchableMesh._batcher.checkAndUpdateTexture(\n        batchableMesh,\n        renderable.texture\n      );\n    }\n    return couldBatch !== canBatch;\n  }\n  addRenderable(tilingSprite, instructionSet) {\n    const batcher = this._renderer.renderPipes.batch;\n    this._updateCanBatch(tilingSprite);\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { geometry, canBatch } = tilingSpriteData;\n    if (canBatch) {\n      tilingSpriteData.batchableMesh || (tilingSpriteData.batchableMesh = new BatchableMesh());\n      const batchableMesh = tilingSpriteData.batchableMesh;\n      if (tilingSprite.didViewUpdate) {\n        this._updateBatchableMesh(tilingSprite);\n        batchableMesh.geometry = geometry;\n        batchableMesh.renderable = tilingSprite;\n        batchableMesh.transform = tilingSprite.groupTransform;\n        batchableMesh.setTexture(tilingSprite._texture);\n      }\n      batchableMesh.roundPixels = this._renderer._roundPixels | tilingSprite._roundPixels;\n      batcher.addToBatch(batchableMesh, instructionSet);\n    } else {\n      batcher.break(instructionSet);\n      tilingSpriteData.shader || (tilingSpriteData.shader = new TilingSpriteShader());\n      this.updateRenderable(tilingSprite);\n      instructionSet.add(tilingSprite);\n    }\n  }\n  execute(tilingSprite) {\n    const { shader } = this._getTilingSpriteData(tilingSprite);\n    shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n    localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n    color32BitToUniform(\n      tilingSprite.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n    this._renderer.encoder.draw({\n      geometry: sharedQuad,\n      shader,\n      state: this._state\n    });\n  }\n  updateRenderable(tilingSprite) {\n    const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n    const { canBatch } = tilingSpriteData;\n    if (canBatch) {\n      const { batchableMesh } = tilingSpriteData;\n      if (tilingSprite.didViewUpdate)\n        this._updateBatchableMesh(tilingSprite);\n      batchableMesh._batcher.updateElement(batchableMesh);\n    } else if (tilingSprite.didViewUpdate) {\n      const { shader } = tilingSpriteData;\n      shader.updateUniforms(\n        tilingSprite.width,\n        tilingSprite.height,\n        tilingSprite._tileTransform.matrix,\n        tilingSprite.anchor.x,\n        tilingSprite.anchor.y,\n        tilingSprite.texture\n      );\n    }\n  }\n  _getTilingSpriteData(renderable) {\n    return renderable._gpuData[this._renderer.uid] || this._initTilingSpriteData(renderable);\n  }\n  _initTilingSpriteData(tilingSprite) {\n    const gpuData = new TilingSpriteGpuData();\n    gpuData.renderable = tilingSprite;\n    tilingSprite._gpuData[this._renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchableMesh(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const { geometry } = renderableData;\n    const style = tilingSprite.texture.source.style;\n    if (style.addressMode !== \"repeat\") {\n      style.addressMode = \"repeat\";\n      style.update();\n    }\n    setUvs(tilingSprite, geometry.uvs);\n    setPositions(tilingSprite, geometry.positions);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCanBatch(tilingSprite) {\n    const renderableData = this._getTilingSpriteData(tilingSprite);\n    const texture = tilingSprite.texture;\n    let _nonPowOf2wrapping = true;\n    if (this._renderer.type === RendererType.WEBGL) {\n      _nonPowOf2wrapping = this._renderer.context.supports.nonPowOf2wrapping;\n    }\n    renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n    return renderableData.canBatch;\n  }\n}\n/** @ignore */\nTilingSpritePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"tilingSprite\"\n};\n\nexport { TilingSpriteGpuData, TilingSpritePipe };\n//# sourceMappingURL=TilingSpritePipe.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { applyMatrix } from './applyMatrix.mjs';\n\n\"use strict\";\nfunction setUvs(tilingSprite, uvs) {\n  const texture = tilingSprite.texture;\n  const width = texture.frame.width;\n  const height = texture.frame.height;\n  let anchorX = 0;\n  let anchorY = 0;\n  if (tilingSprite.applyAnchorToTexture) {\n    anchorX = tilingSprite.anchor.x;\n    anchorY = tilingSprite.anchor.y;\n  }\n  uvs[0] = uvs[6] = -anchorX;\n  uvs[2] = uvs[4] = 1 - anchorX;\n  uvs[1] = uvs[3] = -anchorY;\n  uvs[5] = uvs[7] = 1 - anchorY;\n  const textureMatrix = Matrix.shared;\n  textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n  textureMatrix.tx /= tilingSprite.width;\n  textureMatrix.ty /= tilingSprite.height;\n  textureMatrix.invert();\n  textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n  applyMatrix(uvs, 2, 0, textureMatrix);\n}\n\nexport { setUvs };\n//# sourceMappingURL=setUvs.mjs.map\n","\"use strict\";\nfunction applyMatrix(array, stride, offset, matrix) {\n  let index = 0;\n  const size = array.length / (stride || 2);\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  offset *= stride;\n  while (index < size) {\n    const x = array[offset];\n    const y = array[offset + 1];\n    array[offset] = a * x + c * y + tx;\n    array[offset + 1] = b * x + d * y + ty;\n    offset += stride;\n    index++;\n  }\n}\n\nexport { applyMatrix };\n//# sourceMappingURL=applyMatrix.mjs.map\n","\"use strict\";\nfunction setPositions(tilingSprite, positions) {\n  const anchorX = tilingSprite.anchor.x;\n  const anchorY = tilingSprite.anchor.y;\n  positions[0] = -anchorX * tilingSprite.width;\n  positions[1] = -anchorY * tilingSprite.height;\n  positions[2] = (1 - anchorX) * tilingSprite.width;\n  positions[3] = -anchorY * tilingSprite.height;\n  positions[4] = (1 - anchorX) * tilingSprite.width;\n  positions[5] = (1 - anchorY) * tilingSprite.height;\n  positions[6] = -anchorX * tilingSprite.width;\n  positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n\nexport { setPositions };\n//# sourceMappingURL=setPositions.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { TilingSpritePipe } from './TilingSpritePipe.mjs';\n\n\"use strict\";\nextensions.add(TilingSpritePipe);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass BatchableMesh {\n  constructor() {\n    this.batcherName = \"default\";\n    this.packAsQuad = false;\n    this.indexOffset = 0;\n    this.attributeOffset = 0;\n    this.roundPixels = 0;\n    this._batcher = null;\n    this._batch = null;\n    this._textureMatrixUpdateId = -1;\n    this._uvUpdateId = -1;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get topology() {\n    return this._topology || this.geometry.topology;\n  }\n  set topology(value) {\n    this._topology = value;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.geometry = null;\n    this._uvUpdateId = -1;\n    this._textureMatrixUpdateId = -1;\n  }\n  /**\n   * Sets the texture for the batchable mesh.\n   * As it does so, it resets the texture matrix update ID.\n   * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n   * @param value - The texture to set.\n   */\n  setTexture(value) {\n    if (this.texture === value)\n      return;\n    this.texture = value;\n    this._textureMatrixUpdateId = -1;\n  }\n  get uvs() {\n    const geometry = this.geometry;\n    const uvBuffer = geometry.getBuffer(\"aUV\");\n    const uvs = uvBuffer.data;\n    let transformedUvs = uvs;\n    const textureMatrix = this.texture.textureMatrix;\n    if (!textureMatrix.isSimple) {\n      transformedUvs = this._transformedUvs;\n      if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID) {\n        if (!transformedUvs || transformedUvs.length < uvs.length) {\n          transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n        }\n        this._textureMatrixUpdateId = textureMatrix._updateID;\n        this._uvUpdateId = uvBuffer._updateID;\n        textureMatrix.multiplyUvs(uvs, transformedUvs);\n      }\n    }\n    return transformedUvs;\n  }\n  get positions() {\n    return this.geometry.positions;\n  }\n  get indices() {\n    return this.geometry.indices;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  get groupTransform() {\n    return this.renderable.groupTransform;\n  }\n  get attributeSize() {\n    return this.geometry.positions.length / 2;\n  }\n  get indexSize() {\n    return this.geometry.indices.length;\n  }\n}\n\nexport { BatchableMesh };\n//# sourceMappingURL=BatchableMesh.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { BigPool } from '../../../utils/pool/PoolGroup.mjs';\nimport { color32BitToUniform } from '../gpu/colorToUniform.mjs';\nimport { BatchableGraphics } from './BatchableGraphics.mjs';\n\n\"use strict\";\nclass GraphicsGpuData {\n  constructor() {\n    this.batches = [];\n    this.batched = false;\n  }\n  destroy() {\n    this.batches.forEach((batch) => {\n      BigPool.return(batch);\n    });\n    this.batches.length = 0;\n  }\n}\nclass GraphicsPipe {\n  constructor(renderer, adaptor) {\n    this.state = State.for2d();\n    this.renderer = renderer;\n    this._adaptor = adaptor;\n    this.renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._adaptor.contextChange(this.renderer);\n  }\n  validateRenderable(graphics) {\n    const context = graphics.context;\n    const wasBatched = !!graphics._gpuData;\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n    if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable) {\n      return true;\n    }\n    return false;\n  }\n  addRenderable(graphics, instructionSet) {\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    if (graphics.didViewUpdate) {\n      this._rebuild(graphics);\n    }\n    if (gpuContext.isBatchable) {\n      this._addToBatcher(graphics, instructionSet);\n    } else {\n      this.renderer.renderPipes.batch.break(instructionSet);\n      instructionSet.add(graphics);\n    }\n  }\n  updateRenderable(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const batches = gpuData.batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batch._batcher.updateElement(batch);\n    }\n  }\n  execute(graphics) {\n    if (!graphics.isRenderable)\n      return;\n    const renderer = this.renderer;\n    const context = graphics.context;\n    const contextSystem = renderer.graphicsContext;\n    if (!contextSystem.getGpuContext(context).batches.length) {\n      return;\n    }\n    const shader = context.customShader || this._adaptor.shader;\n    this.state.blendMode = graphics.groupBlendMode;\n    const localUniforms = shader.resources.localUniforms.uniforms;\n    localUniforms.uTransformMatrix = graphics.groupTransform;\n    localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n    color32BitToUniform(\n      graphics.groupColorAlpha,\n      localUniforms.uColor,\n      0\n    );\n    this._adaptor.execute(this, graphics);\n  }\n  _rebuild(graphics) {\n    const gpuData = this._getGpuDataForRenderable(graphics);\n    const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n    gpuData.destroy();\n    if (gpuContext.isBatchable) {\n      this._updateBatchesForRenderable(graphics, gpuData);\n    }\n  }\n  _addToBatcher(graphics, instructionSet) {\n    const batchPipe = this.renderer.renderPipes.batch;\n    const batches = this._getGpuDataForRenderable(graphics).batches;\n    for (let i = 0; i < batches.length; i++) {\n      const batch = batches[i];\n      batchPipe.addToBatch(batch, instructionSet);\n    }\n  }\n  _getGpuDataForRenderable(graphics) {\n    return graphics._gpuData[this.renderer.uid] || this._initGpuDataForRenderable(graphics);\n  }\n  _initGpuDataForRenderable(graphics) {\n    const gpuData = new GraphicsGpuData();\n    graphics._gpuData[this.renderer.uid] = gpuData;\n    return gpuData;\n  }\n  _updateBatchesForRenderable(graphics, gpuData) {\n    const context = graphics.context;\n    const gpuContext = this.renderer.graphicsContext.getGpuContext(context);\n    const roundPixels = this.renderer._roundPixels | graphics._roundPixels;\n    gpuData.batches = gpuContext.batches.map((batch) => {\n      const batchClone = BigPool.get(BatchableGraphics);\n      batch.copyTo(batchClone);\n      batchClone.renderable = graphics;\n      batchClone.roundPixels = roundPixels;\n      return batchClone;\n    });\n  }\n  destroy() {\n    this.renderer = null;\n    this._adaptor.destroy();\n    this._adaptor = null;\n    this.state = null;\n  }\n}\n/** @ignore */\nGraphicsPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"graphics\"\n};\n\nexport { GraphicsGpuData, GraphicsPipe };\n//# sourceMappingURL=GraphicsPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem.mjs';\nimport { GraphicsPipe } from './shared/GraphicsPipe.mjs';\n\n\"use strict\";\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n//# sourceMappingURL=init.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uProjectionMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uResolution:vec2<f32>,\\n  uRoundPixels:f32,\\n};\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   let position = vec4((uniforms.uProjectionMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    /** @internal */\n    this.state = State.for2d();\n    /** Local uniforms that are used for rendering particles. */\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    return renderable._gpuData[this.renderer.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nconst valuesToIterateForKeys = [\n  \"align\",\n  \"breakWords\",\n  \"cssOverrides\",\n  \"fontVariant\",\n  \"fontWeight\",\n  \"leading\",\n  \"letterSpacing\",\n  \"lineHeight\",\n  \"padding\",\n  \"textBaseline\",\n  \"trim\",\n  \"whiteSpace\",\n  \"wordWrap\",\n  \"wordWrapWidth\",\n  \"fontFamily\",\n  \"fontStyle\",\n  \"fontSize\"\n];\nfunction generateTextStyleKey(style) {\n  const key = [];\n  let index = 0;\n  for (let i = 0; i < valuesToIterateForKeys.length; i++) {\n    const prop = `_${valuesToIterateForKeys[i]}`;\n    key[index++] = style[prop];\n  }\n  index = addFillStyleKey(style._fill, key, index);\n  index = addStokeStyleKey(style._stroke, key, index);\n  index = addDropShadowKey(style.dropShadow, key, index);\n  index = addFiltersKey(style.filters, key, index);\n  return key.join(\"-\");\n}\nfunction addFiltersKey(filters, key, index) {\n  if (!filters)\n    return index;\n  for (const filter of filters) {\n    key[index++] = filter.uid;\n  }\n  return index;\n}\nfunction addFillStyleKey(fillStyle, key, index) {\n  if (!fillStyle)\n    return index;\n  key[index++] = fillStyle.color;\n  key[index++] = fillStyle.alpha;\n  key[index++] = fillStyle.fill?.styleKey;\n  return index;\n}\nfunction addStokeStyleKey(strokeStyle, key, index) {\n  if (!strokeStyle)\n    return index;\n  index = addFillStyleKey(strokeStyle, key, index);\n  key[index++] = strokeStyle.width;\n  key[index++] = strokeStyle.alignment;\n  key[index++] = strokeStyle.cap;\n  key[index++] = strokeStyle.join;\n  key[index++] = strokeStyle.miterLimit;\n  return index;\n}\nfunction addDropShadowKey(dropShadow, key, index) {\n  if (!dropShadow)\n    return index;\n  key[index++] = dropShadow.alpha;\n  key[index++] = dropShadow.angle;\n  key[index++] = dropShadow.blur;\n  key[index++] = dropShadow.distance;\n  key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n  return index;\n}\n\nexport { generateTextStyleKey };\n//# sourceMappingURL=generateTextStyleKey.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient.mjs';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern.mjs';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext.mjs';\nimport { toFillStyle, toStrokeStyle } from '../graphics/shared/utils/convertFillInputToFillStyle.mjs';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey.mjs';\n\n\"use strict\";\nconst _TextStyle = class _TextStyle extends EventEmitter {\n  constructor(style = {}) {\n    super();\n    convertV7Tov8Style(style);\n    const fullStyle = { ..._TextStyle.defaultTextStyle, ...style };\n    for (const key in fullStyle) {\n      const thisKey = key;\n      this[thisKey] = fullStyle[key];\n    }\n    this.update();\n  }\n  /**\n   * Alignment for multiline text, does not affect single line text.\n   * @type {'left'|'center'|'right'|'justify'}\n   */\n  get align() {\n    return this._align;\n  }\n  set align(value) {\n    this._align = value;\n    this.update();\n  }\n  /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n  get breakWords() {\n    return this._breakWords;\n  }\n  set breakWords(value) {\n    this._breakWords = value;\n    this.update();\n  }\n  /** Set a drop shadow for the text. */\n  get dropShadow() {\n    return this._dropShadow;\n  }\n  set dropShadow(value) {\n    if (value !== null && typeof value === \"object\") {\n      this._dropShadow = this._createProxy({ ..._TextStyle.defaultDropShadow, ...value });\n    } else {\n      this._dropShadow = value ? this._createProxy({ ..._TextStyle.defaultDropShadow }) : null;\n    }\n    this.update();\n  }\n  /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n  get fontFamily() {\n    return this._fontFamily;\n  }\n  set fontFamily(value) {\n    this._fontFamily = value;\n    this.update();\n  }\n  /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n  get fontSize() {\n    return this._fontSize;\n  }\n  set fontSize(value) {\n    if (typeof value === \"string\") {\n      this._fontSize = parseInt(value, 10);\n    } else {\n      this._fontSize = value;\n    }\n    this.update();\n  }\n  /**\n   * The font style.\n   * @type {'normal'|'italic'|'oblique'}\n   */\n  get fontStyle() {\n    return this._fontStyle;\n  }\n  set fontStyle(value) {\n    this._fontStyle = value.toLowerCase();\n    this.update();\n  }\n  /**\n   * The font variant.\n   * @type {'normal'|'small-caps'}\n   */\n  get fontVariant() {\n    return this._fontVariant;\n  }\n  set fontVariant(value) {\n    this._fontVariant = value;\n    this.update();\n  }\n  /**\n   * The font weight.\n   * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n   */\n  get fontWeight() {\n    return this._fontWeight;\n  }\n  set fontWeight(value) {\n    this._fontWeight = value;\n    this.update();\n  }\n  /** The space between lines. */\n  get leading() {\n    return this._leading;\n  }\n  set leading(value) {\n    this._leading = value;\n    this.update();\n  }\n  /** The amount of spacing between letters, default is 0. */\n  get letterSpacing() {\n    return this._letterSpacing;\n  }\n  set letterSpacing(value) {\n    this._letterSpacing = value;\n    this.update();\n  }\n  /** The line height, a number that represents the vertical space that a letter uses. */\n  get lineHeight() {\n    return this._lineHeight;\n  }\n  set lineHeight(value) {\n    this._lineHeight = value;\n    this.update();\n  }\n  /**\n   * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n   * by adding padding to all sides of the text.\n   * > [!NOTE] This will NOT affect the positioning or bounds of the text.\n   */\n  get padding() {\n    return this._padding;\n  }\n  set padding(value) {\n    this._padding = value;\n    this.update();\n  }\n  /**\n   * An optional filter or array of filters to apply to the text, allowing for advanced visual effects.\n   * These filters will be applied to the text as it is created, resulting in faster rendering for static text\n   * compared to applying the filter directly to the text object (which would be applied at run time).\n   * @default null\n   */\n  get filters() {\n    return this._filters;\n  }\n  set filters(value) {\n    this._filters = value;\n    this.update();\n  }\n  /**\n   * Trim transparent borders from the text texture.\n   * > [!IMPORTANT] PERFORMANCE WARNING:\n   * > This is a costly operation as it requires scanning pixel alpha values.\n   * > Avoid using `trim: true` for dynamic text, as it could significantly impact performance.\n   */\n  get trim() {\n    return this._trim;\n  }\n  set trim(value) {\n    this._trim = value;\n    this.update();\n  }\n  /**\n   * The baseline of the text that is rendered.\n   * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n   */\n  get textBaseline() {\n    return this._textBaseline;\n  }\n  set textBaseline(value) {\n    this._textBaseline = value;\n    this.update();\n  }\n  /**\n   * How newlines and spaces should be handled.\n   * Default is 'pre' (preserve, preserve).\n   *\n   *  value       | New lines     |   Spaces\n   *  ---         | ---           |   ---\n   * 'normal'     | Collapse      |   Collapse\n   * 'pre'        | Preserve      |   Preserve\n   * 'pre-line'   | Preserve      |   Collapse\n   * @type {'normal'|'pre'|'pre-line'}\n   */\n  get whiteSpace() {\n    return this._whiteSpace;\n  }\n  set whiteSpace(value) {\n    this._whiteSpace = value;\n    this.update();\n  }\n  /** Indicates if word wrap should be used. */\n  get wordWrap() {\n    return this._wordWrap;\n  }\n  set wordWrap(value) {\n    this._wordWrap = value;\n    this.update();\n  }\n  /** The width at which text will wrap, it needs wordWrap to be set to true. */\n  get wordWrapWidth() {\n    return this._wordWrapWidth;\n  }\n  set wordWrapWidth(value) {\n    this._wordWrapWidth = value;\n    this.update();\n  }\n  /**\n   * The fill style that will be used to color the text.\n   * This can be:\n   * - A color string like 'red', '#00FF00', or 'rgba(255,0,0,0.5)'\n   * - A hex number like 0xff0000 for red\n   * - A FillStyle object with properties like { color: 0xff0000, alpha: 0.5 }\n   * - A FillGradient for gradient fills\n   * - A FillPattern for pattern/texture fills\n   *\n   * When using a FillGradient, vertical gradients (angle of 90 degrees) are applied per line of text,\n   * while gradients at any other angle are spread across the entire text body as a whole.\n   * @example\n   * // Vertical gradient applied per line\n   * const verticalGradient = new FillGradient(0, 0, 0, 1)\n   *     .addColorStop(0, 0xff0000)\n   *     .addColorStop(1, 0x0000ff);\n   *\n   * const text = new Text({\n   *     text: 'Line 1\\nLine 2',\n   *     style: { fill: verticalGradient }\n   * });\n   *\n   * To manage the gradient in a global scope, set the textureSpace property of the FillGradient to 'global'.\n   * @type {string|number|FillStyle|FillGradient|FillPattern}\n   */\n  get fill() {\n    return this._originalFill;\n  }\n  set fill(value) {\n    if (value === this._originalFill)\n      return;\n    this._originalFill = value;\n    if (this._isFillStyle(value)) {\n      this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () => {\n        this._fill = toFillStyle(\n          { ...this._originalFill },\n          GraphicsContext.defaultFillStyle\n        );\n      });\n    }\n    this._fill = toFillStyle(\n      value === 0 ? \"black\" : value,\n      GraphicsContext.defaultFillStyle\n    );\n    this.update();\n  }\n  /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n  get stroke() {\n    return this._originalStroke;\n  }\n  set stroke(value) {\n    if (value === this._originalStroke)\n      return;\n    this._originalStroke = value;\n    if (this._isFillStyle(value)) {\n      this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () => {\n        this._stroke = toStrokeStyle(\n          { ...this._originalStroke },\n          GraphicsContext.defaultStrokeStyle\n        );\n      });\n    }\n    this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n    this.update();\n  }\n  _generateKey() {\n    this._styleKey = generateTextStyleKey(this);\n    return this._styleKey;\n  }\n  update() {\n    this._styleKey = null;\n    this.emit(\"update\", this);\n  }\n  /** Resets all properties to the default values */\n  reset() {\n    const defaultStyle = _TextStyle.defaultTextStyle;\n    for (const key in defaultStyle) {\n      this[key] = defaultStyle[key];\n    }\n  }\n  /** @internal */\n  get styleKey() {\n    return this._styleKey || this._generateKey();\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * @returns New cloned TextStyle object\n   */\n  clone() {\n    return new _TextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      leading: this.leading,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      textBaseline: this.textBaseline,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      filters: this._filters ? [...this._filters] : void 0\n    });\n  }\n  /**\n   * Returns the final padding for the text style, taking into account any filters applied.\n   * Used internally for correct measurements\n   * @internal\n   * @returns {number} The final padding for the text style.\n   */\n  _getFinalPadding() {\n    let filterPadding = 0;\n    if (this._filters) {\n      for (let i = 0; i < this._filters.length; i++) {\n        filterPadding += this._filters[i].padding;\n      }\n    }\n    return Math.max(this._padding, filterPadding);\n  }\n  /**\n   * Destroys this text style.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @example\n   * // Destroy the text style and its textures\n   * textStyle.destroy({ texture: true, textureSource: true });\n   * textStyle.destroy(true);\n   */\n  destroy(options = false) {\n    this.removeAllListeners();\n    const destroyTexture = typeof options === \"boolean\" ? options : options?.texture;\n    if (destroyTexture) {\n      const destroyTextureSource = typeof options === \"boolean\" ? options : options?.textureSource;\n      if (this._fill?.texture) {\n        this._fill.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalFill?.texture) {\n        this._originalFill.texture.destroy(destroyTextureSource);\n      }\n      if (this._stroke?.texture) {\n        this._stroke.texture.destroy(destroyTextureSource);\n      }\n      if (this._originalStroke?.texture) {\n        this._originalStroke.texture.destroy(destroyTextureSource);\n      }\n    }\n    this._fill = null;\n    this._stroke = null;\n    this.dropShadow = null;\n    this._originalStroke = null;\n    this._originalFill = null;\n  }\n  _createProxy(value, cb) {\n    return new Proxy(value, {\n      set: (target, property, newValue) => {\n        target[property] = newValue;\n        cb?.(property, newValue);\n        this.update();\n        return true;\n      }\n    });\n  }\n  _isFillStyle(value) {\n    return (value ?? null) !== null && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern);\n  }\n};\n/**\n * Default drop shadow settings used when enabling drop shadows on text.\n * These values are used as the base configuration when drop shadows are enabled without specific settings.\n * @example\n * ```ts\n * // Customize default settings globally\n * TextStyle.defaultDropShadow.alpha = 0.5;    // 50% opacity for all shadows\n * TextStyle.defaultDropShadow.blur = 2;       // 2px blur for all shadows\n * TextStyle.defaultDropShadow.color = 'blue'; // Blue shadows by default\n * ```\n */\n_TextStyle.defaultDropShadow = {\n  alpha: 1,\n  angle: Math.PI / 6,\n  blur: 0,\n  color: \"black\",\n  distance: 5\n};\n/**\n * Default text style settings used when creating new text objects.\n * These values serve as the base configuration and can be customized globally.\n * @example\n * ```ts\n * // Customize default text style globally\n * TextStyle.defaultTextStyle.fontSize = 16;\n * TextStyle.defaultTextStyle.fill = 0x333333;\n * TextStyle.defaultTextStyle.fontFamily = ['Arial', 'Helvetica', 'sans-serif'];\n * ```\n */\n_TextStyle.defaultTextStyle = {\n  align: \"left\",\n  breakWords: false,\n  dropShadow: null,\n  fill: \"black\",\n  fontFamily: \"Arial\",\n  fontSize: 26,\n  fontStyle: \"normal\",\n  fontVariant: \"normal\",\n  fontWeight: \"normal\",\n  leading: 0,\n  letterSpacing: 0,\n  lineHeight: 0,\n  padding: 0,\n  stroke: null,\n  textBaseline: \"alphabetic\",\n  trim: false,\n  whiteSpace: \"pre\",\n  wordWrap: false,\n  wordWrapWidth: 100\n};\nlet TextStyle = _TextStyle;\nfunction convertV7Tov8Style(style) {\n  const oldStyle = style;\n  if (typeof oldStyle.dropShadow === \"boolean\" && oldStyle.dropShadow) {\n    const defaults = TextStyle.defaultDropShadow;\n    style.dropShadow = {\n      alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n      angle: oldStyle.dropShadowAngle ?? defaults.angle,\n      blur: oldStyle.dropShadowBlur ?? defaults.blur,\n      color: oldStyle.dropShadowColor ?? defaults.color,\n      distance: oldStyle.dropShadowDistance ?? defaults.distance\n    };\n  }\n  if (oldStyle.strokeThickness !== void 0) {\n    deprecation(v8_0_0, \"strokeThickness is now a part of stroke\");\n    const color = oldStyle.stroke;\n    let obj = {};\n    if (Color.isColorLike(color)) {\n      obj.color = color;\n    } else if (color instanceof FillGradient || color instanceof FillPattern) {\n      obj.fill = color;\n    } else if (Object.hasOwnProperty.call(color, \"color\") || Object.hasOwnProperty.call(color, \"fill\")) {\n      obj = color;\n    } else {\n      throw new Error(\"Invalid stroke value.\");\n    }\n    style.stroke = {\n      ...obj,\n      width: oldStyle.strokeThickness\n    };\n  }\n  if (Array.isArray(oldStyle.fillGradientStops)) {\n    deprecation(v8_0_0, \"gradient fill is now a fill pattern: `new FillGradient(...)`\");\n    let fontSize;\n    if (style.fontSize == null) {\n      style.fontSize = TextStyle.defaultTextStyle.fontSize;\n    } else if (typeof style.fontSize === \"string\") {\n      fontSize = parseInt(style.fontSize, 10);\n    } else {\n      fontSize = style.fontSize;\n    }\n    const gradientFill = new FillGradient({\n      start: { x: 0, y: 0 },\n      end: { x: 0, y: (fontSize || 0) * 1.7 }\n    });\n    const fills = oldStyle.fillGradientStops.map((color) => Color.shared.setValue(color).toNumber());\n    fills.forEach((number, index) => {\n      const ratio = index / (fills.length - 1);\n      gradientFill.addColorStop(ratio, number);\n    });\n    style.fill = {\n      fill: gradientFill\n    };\n  }\n}\n\nexport { TextStyle };\n//# sourceMappingURL=TextStyle.mjs.map\n","import { BatchableSprite } from '../sprite/BatchableSprite.mjs';\n\n\"use strict\";\nclass BatchableHTMLText extends BatchableSprite {\n  /**\n   * Creates an instance of BatchableHTMLText.\n   * @param renderer - The renderer instance to be used.\n   */\n  constructor(renderer) {\n    super();\n    this.generatingTexture = false;\n    this._renderer = renderer;\n    renderer.runners.resolutionChange.add(this);\n  }\n  /** Handles resolution changes for the HTML text. If the text has auto resolution enabled, it triggers a view update. */\n  resolutionChange() {\n    const text = this.renderable;\n    if (text._autoResolution) {\n      text.onViewUpdate();\n    }\n  }\n  /** Destroys the BatchableHTMLText instance. Returns the texture promise to the renderer and cleans up references. */\n  destroy() {\n    this._renderer.htmlText.returnTexturePromise(this.texturePromise);\n    this.texturePromise = null;\n    this._renderer = null;\n  }\n}\n\nexport { BatchableHTMLText };\n//# sourceMappingURL=BatchableHTMLText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture.mjs';\nimport { updateTextBounds } from '../text/utils/updateTextBounds.mjs';\nimport { BatchableHTMLText } from './BatchableHTMLText.mjs';\n\n\"use strict\";\nclass HTMLTextPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  validateRenderable(htmlText) {\n    return htmlText._didTextUpdate;\n  }\n  addRenderable(htmlText, instructionSet) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (htmlText._didTextUpdate) {\n      this._updateGpuText(htmlText).catch((e) => {\n        console.error(e);\n      });\n      htmlText._didTextUpdate = false;\n      updateTextBounds(batchableHTMLText, htmlText);\n    }\n    this._renderer.renderPipes.batch.addToBatch(batchableHTMLText, instructionSet);\n  }\n  updateRenderable(htmlText) {\n    const batchableHTMLText = this._getGpuText(htmlText);\n    batchableHTMLText._batcher.updateElement(batchableHTMLText);\n  }\n  async _updateGpuText(htmlText) {\n    htmlText._didTextUpdate = false;\n    const batchableHTMLText = this._getGpuText(htmlText);\n    if (batchableHTMLText.generatingTexture)\n      return;\n    if (batchableHTMLText.texturePromise) {\n      this._renderer.htmlText.returnTexturePromise(batchableHTMLText.texturePromise);\n      batchableHTMLText.texturePromise = null;\n    }\n    batchableHTMLText.generatingTexture = true;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    const texturePromise = this._renderer.htmlText.getTexturePromise(htmlText);\n    batchableHTMLText.texturePromise = texturePromise;\n    batchableHTMLText.texture = await texturePromise;\n    const renderGroup = htmlText.renderGroup || htmlText.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    batchableHTMLText.generatingTexture = false;\n    updateTextBounds(batchableHTMLText, htmlText);\n  }\n  _getGpuText(htmlText) {\n    return htmlText._gpuData[this._renderer.uid] || this.initGpuText(htmlText);\n  }\n  initGpuText(htmlText) {\n    const batchableHTMLText = new BatchableHTMLText(this._renderer);\n    batchableHTMLText.renderable = htmlText;\n    batchableHTMLText.transform = htmlText.groupTransform;\n    batchableHTMLText.texture = Texture.EMPTY;\n    batchableHTMLText.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n    batchableHTMLText.roundPixels = this._renderer._roundPixels | htmlText._roundPixels;\n    htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n    htmlText._gpuData[this._renderer.uid] = batchableHTMLText;\n    return batchableHTMLText;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextPipe };\n//# sourceMappingURL=HTMLTextPipe.mjs.map\n","\"use strict\";\nconst nssvg = \"http://www.w3.org/2000/svg\";\nconst nsxhtml = \"http://www.w3.org/1999/xhtml\";\nclass HTMLTextRenderData {\n  constructor() {\n    this.svgRoot = document.createElementNS(nssvg, \"svg\");\n    this.foreignObject = document.createElementNS(nssvg, \"foreignObject\");\n    this.domElement = document.createElementNS(nsxhtml, \"div\");\n    this.styleElement = document.createElementNS(nsxhtml, \"style\");\n    this.image = new Image();\n    const { foreignObject, svgRoot, styleElement, domElement } = this;\n    foreignObject.setAttribute(\"width\", \"10000\");\n    foreignObject.setAttribute(\"height\", \"10000\");\n    foreignObject.style.overflow = \"hidden\";\n    svgRoot.appendChild(foreignObject);\n    foreignObject.appendChild(styleElement);\n    foreignObject.appendChild(domElement);\n  }\n}\n\nexport { HTMLTextRenderData };\n//# sourceMappingURL=HTMLTextRenderData.mjs.map\n","import { Color } from '../../../color/Color.mjs';\n\n\"use strict\";\nfunction textStyleToCSS(style) {\n  const stroke = style._stroke;\n  const fill = style._fill;\n  const cssStyleString = [\n    `color: ${Color.shared.setValue(fill.color).toHex()}`,\n    `font-size: ${style.fontSize}px`,\n    `font-family: ${style.fontFamily}`,\n    `font-weight: ${style.fontWeight}`,\n    `font-style: ${style.fontStyle}`,\n    `font-variant: ${style.fontVariant}`,\n    `letter-spacing: ${style.letterSpacing}px`,\n    `text-align: ${style.align}`,\n    `padding: ${style.padding}px`,\n    `white-space: ${style.whiteSpace === \"pre\" && style.wordWrap ? \"pre-wrap\" : style.whiteSpace}`,\n    ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n    ...style.wordWrap ? [\n      `word-wrap: ${style.breakWords ? \"break-all\" : \"break-word\"}`,\n      `max-width: ${style.wordWrapWidth}px`\n    ] : [],\n    ...stroke ? [strokeToCSS(stroke)] : [],\n    ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n    ...style.cssOverrides\n  ].join(\";\");\n  const cssStyles = [`div { ${cssStyleString} }`];\n  tagStyleToCSS(style.tagStyles, cssStyles);\n  return cssStyles.join(\" \");\n}\nfunction dropShadowToCSS(dropShadowStyle) {\n  const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n  const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n  const position = `${x}px ${y}px`;\n  if (dropShadowStyle.blur > 0) {\n    return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n  }\n  return `text-shadow: ${position} ${color}`;\n}\nfunction strokeToCSS(stroke) {\n  return [\n    `-webkit-text-stroke-width: ${stroke.width}px`,\n    `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    `text-stroke-width: ${stroke.width}px`,\n    `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n    \"paint-order: stroke\"\n  ].join(\";\");\n}\nconst templates = {\n  fontSize: `font-size: {{VALUE}}px`,\n  fontFamily: `font-family: {{VALUE}}`,\n  fontWeight: `font-weight: {{VALUE}}`,\n  fontStyle: `font-style: {{VALUE}}`,\n  fontVariant: `font-variant: {{VALUE}}`,\n  letterSpacing: `letter-spacing: {{VALUE}}px`,\n  align: `text-align: {{VALUE}}`,\n  padding: `padding: {{VALUE}}px`,\n  whiteSpace: `white-space: {{VALUE}}`,\n  lineHeight: `line-height: {{VALUE}}px`,\n  wordWrapWidth: `max-width: {{VALUE}}px`\n};\nconst transform = {\n  fill: (value) => `color: ${Color.shared.setValue(value).toHex()}`,\n  breakWords: (value) => `word-wrap: ${value ? \"break-all\" : \"break-word\"}`,\n  stroke: strokeToCSS,\n  dropShadow: dropShadowToCSS\n};\nfunction tagStyleToCSS(tagStyles, out) {\n  for (const i in tagStyles) {\n    const tagStyle = tagStyles[i];\n    const cssTagStyle = [];\n    for (const j in tagStyle) {\n      if (transform[j]) {\n        cssTagStyle.push(transform[j](tagStyle[j]));\n      } else if (templates[j]) {\n        cssTagStyle.push(templates[j].replace(\"{{VALUE}}\", tagStyle[j]));\n      }\n    }\n    out.push(`${i} { ${cssTagStyle.join(\";\")} }`);\n  }\n}\n\nexport { textStyleToCSS };\n//# sourceMappingURL=textStyleToCSS.mjs.map\n","import { warn } from '../../utils/logging/warn.mjs';\nimport { TextStyle } from '../text/TextStyle.mjs';\nimport { textStyleToCSS } from './utils/textStyleToCSS.mjs';\n\n\"use strict\";\nclass HTMLTextStyle extends TextStyle {\n  constructor(options = {}) {\n    super(options);\n    this._cssOverrides = [];\n    this.cssOverrides = options.cssOverrides ?? [];\n    this.tagStyles = options.tagStyles ?? {};\n  }\n  /**\n   * List of CSS style overrides to apply to the HTML text.\n   * These styles are added after the built-in styles and can override any default styling.\n   * @advanced\n   */\n  set cssOverrides(value) {\n    this._cssOverrides = value instanceof Array ? value : [value];\n    this.update();\n  }\n  /** @advanced */\n  get cssOverrides() {\n    return this._cssOverrides;\n  }\n  /**\n   * Updates the text style and triggers a refresh of the CSS style cache.\n   * This method is called automatically when style properties are changed.\n   * @example\n   * ```ts\n   * // Update after multiple changes\n   * const text = new HTMLText({\n   *     text: 'Hello World',\n   *     style\n   * });\n   *\n   * style.fontSize = 32;\n   * style.fill = '#00ff00';\n   * style.fontFamily = 'Arial';\n   * style.update(); // Apply all changes at once\n   * ```\n   * @advanced\n   * @see {@link HTMLTextStyle#cssStyle} For accessing the generated CSS\n   * @see {@link HTMLTextStyle#cssOverrides} For managing CSS overrides\n   */\n  update() {\n    this._cssStyle = null;\n    super.update();\n  }\n  /**\n   * Creates a new HTMLTextStyle object with the same values as this one.\n   * This creates a deep copy of all style properties, including dropShadow and tag styles.\n   * @example\n   * ```ts\n   * // Create original style\n   * const originalStyle = new HTMLTextStyle({\n   *     fontSize: 24,\n   *     fill: '#ff0000',\n   *     tagStyles: {\n   *         header: { fontSize: 32, fill: '#00ff00' }\n   *     }\n   * });\n   *\n   * // Clone the style\n   * const clonedStyle = originalStyle.clone();\n   *\n   * // Modify cloned style independently\n   * clonedStyle.fontSize = 36;\n   * clonedStyle.fill = '#0000ff';\n   *\n   * // Original style remains unchanged\n   * console.log(originalStyle.fontSize); // Still 24\n   * console.log(originalStyle.fill); // Still '#ff0000'\n   * ```\n   *\n   * Properties that are cloned:\n   * - Basic text properties (fontSize, fontFamily, etc.)\n   * - Fill and stroke styles\n   * - Drop shadow configuration\n   * - CSS overrides\n   * - Tag styles (deep copied)\n   * - Word wrap settings\n   * - Alignment and spacing\n   * @returns {HTMLTextStyle} A new HTMLTextStyle instance with the same properties\n   * @see {@link HTMLTextStyle} For available style properties\n   * @see {@link HTMLTextStyle#cssOverrides} For CSS override handling\n   * @see {@link HTMLTextStyle#tagStyles} For tag style configuration\n   * @standard\n   */\n  clone() {\n    return new HTMLTextStyle({\n      align: this.align,\n      breakWords: this.breakWords,\n      dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n      fill: this._fill,\n      fontFamily: this.fontFamily,\n      fontSize: this.fontSize,\n      fontStyle: this.fontStyle,\n      fontVariant: this.fontVariant,\n      fontWeight: this.fontWeight,\n      letterSpacing: this.letterSpacing,\n      lineHeight: this.lineHeight,\n      padding: this.padding,\n      stroke: this._stroke,\n      whiteSpace: this.whiteSpace,\n      wordWrap: this.wordWrap,\n      wordWrapWidth: this.wordWrapWidth,\n      cssOverrides: this.cssOverrides,\n      tagStyles: { ...this.tagStyles }\n    });\n  }\n  /**\n   * The CSS style string that will be applied to the HTML text.\n   * @advanced\n   */\n  get cssStyle() {\n    if (!this._cssStyle) {\n      this._cssStyle = textStyleToCSS(this);\n    }\n    return this._cssStyle;\n  }\n  /**\n   * Add a style override, this can be any CSS property\n   * it will override any built-in style. This is the\n   * property and the value as a string (e.g., `color: red`).\n   * This will override any other internal style.\n   * @param {string} value - CSS style(s) to add.\n   * @example\n   * style.addOverride('background-color: red');\n   * @advanced\n   */\n  addOverride(...value) {\n    const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n    if (toAdd.length > 0) {\n      this.cssOverrides.push(...toAdd);\n      this.update();\n    }\n  }\n  /**\n   * Remove any overrides that match the value.\n   * @param {string} value - CSS style to remove.\n   * @example\n   * style.removeOverride('background-color: red');\n   * @advanced\n   */\n  removeOverride(...value) {\n    const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n    if (toRemove.length > 0) {\n      this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n      this.update();\n    }\n  }\n  /**\n   * Sets the fill style for the text. HTML text only supports color fills (string or number values).\n   * Texture fills are not supported and will trigger a warning in debug mode.\n   * @example\n   * ```ts\n   * // Using hex colors\n   * const text = new HTMLText({\n   *     text: 'Colored Text',\n   *     style: {\n   *         fill: 0xff0000 // Red color\n   *     }\n   * });\n   *\n   * // Using CSS color strings\n   * text.style.fill = '#00ff00';     // Hex string (Green)\n   * text.style.fill = 'blue';        // Named color\n   * text.style.fill = 'rgb(255,0,0)' // RGB\n   * text.style.fill = '#f0f';        // Short hex\n   *\n   * // Invalid usage (will trigger warning in debug)\n   * text.style.fill = {\n   *     type: 'pattern',\n   *     texture: Texture.from('pattern.png')\n   * }; // Not supported, falls back to default\n   * ```\n   * @param value - The fill color to use. Must be a string or number.\n   * @throws {Warning} In debug mode when attempting to use unsupported fill types\n   * @see {@link TextStyle#fill} For full fill options in canvas text\n   * @standard\n   */\n  set fill(value) {\n    if (typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color fill is not supported by HTMLText\");\n    }\n    super.fill = value;\n  }\n  /**\n   * Sets the stroke style for the text. HTML text only supports color strokes (string or number values).\n   * Texture strokes are not supported and will trigger a warning in debug mode.\n   * @example\n   * ```ts\n   * // Using hex colors\n   * const text = new HTMLText({\n   *     text: 'Outlined Text',\n   *     style: {\n   *         stroke: 0xff0000 // Red outline\n   *     }\n   * });\n   *\n   * // Using CSS color strings\n   * text.style.stroke = '#00ff00';     // Hex string (Green)\n   * text.style.stroke = 'blue';        // Named color\n   * text.style.stroke = 'rgb(255,0,0)' // RGB\n   * text.style.stroke = '#f0f';        // Short hex\n   *\n   * // Using stroke width\n   * text.style = {\n   *     stroke: {\n   *         color: '#ff0000',\n   *         width: 2\n   *     }\n   * };\n   *\n   * // Remove stroke\n   * text.style.stroke = null;\n   *\n   * // Invalid usage (will trigger warning in debug)\n   * text.style.stroke = {\n   *     type: 'pattern',\n   *     texture: Texture.from('pattern.png')\n   * }; // Not supported, falls back to default\n   * ```\n   * @param value - The stroke style to use. Must be a string, number, or stroke configuration object\n   * @throws {Warning} In debug mode when attempting to use unsupported stroke types\n   * @see {@link TextStyle#stroke} For full stroke options in canvas text\n   * @standard\n   */\n  set stroke(value) {\n    if (value && typeof value !== \"string\" && typeof value !== \"number\") {\n      warn(\"[HTMLTextStyle] only color stroke is not supported by HTMLText\");\n    }\n    super.stroke = value;\n  }\n}\n\nexport { HTMLTextStyle };\n//# sourceMappingURL=HTMLTextStyle.mjs.map\n","import { loadFontAsBase64 } from './loadFontAsBase64.mjs';\n\n\"use strict\";\nasync function loadFontCSS(style, url) {\n  const dataSrc = await loadFontAsBase64(url);\n  return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n\nexport { loadFontCSS };\n//# sourceMappingURL=loadFontCSS.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\n\n\"use strict\";\nasync function loadFontAsBase64(url) {\n  const response = await DOMAdapter.get().fetch(url);\n  const blob = await response.blob();\n  const reader = new FileReader();\n  const dataSrc = await new Promise((resolve, reject) => {\n    reader.onloadend = () => resolve(reader.result);\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n  return dataSrc;\n}\n\nexport { loadFontAsBase64 };\n//# sourceMappingURL=loadFontAsBase64.mjs.map\n","import { Cache } from '../../../assets/cache/Cache.mjs';\nimport { loadFontCSS } from './loadFontCSS.mjs';\n\n\"use strict\";\nconst FontStylePromiseCache = /* @__PURE__ */ new Map();\nasync function getFontCss(fontFamilies, style, defaultOptions) {\n  const fontPromises = fontFamilies.filter((fontFamily) => Cache.has(`${fontFamily}-and-url`)).map((fontFamily, i) => {\n    if (!FontStylePromiseCache.has(fontFamily)) {\n      const { url } = Cache.get(`${fontFamily}-and-url`);\n      if (i === 0) {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: style.fontWeight,\n          fontStyle: style.fontStyle,\n          fontFamily\n        }, url));\n      } else {\n        FontStylePromiseCache.set(fontFamily, loadFontCSS({\n          fontWeight: defaultOptions.fontWeight,\n          fontStyle: defaultOptions.fontStyle,\n          fontFamily\n        }, url));\n      }\n    }\n    return FontStylePromiseCache.get(fontFamily);\n  });\n  return (await Promise.all(fontPromises)).join(\"\\n\");\n}\n\nexport { FontStylePromiseCache, getFontCss };\n//# sourceMappingURL=getFontCss.mjs.map\n","import { HTMLTextRenderData } from '../HTMLTextRenderData.mjs';\n\n\"use strict\";\nlet tempHTMLTextRenderData;\nfunction measureHtmlText(text, style, fontStyleCSS, htmlTextRenderData) {\n  htmlTextRenderData || (htmlTextRenderData = tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData()));\n  const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n  domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n  domElement.setAttribute(\"style\", \"transform-origin: top left; display: inline-block\");\n  if (fontStyleCSS) {\n    styleElement.textContent = fontStyleCSS;\n  }\n  document.body.appendChild(svgRoot);\n  const contentBounds = domElement.getBoundingClientRect();\n  svgRoot.remove();\n  const doublePadding = style.padding * 2;\n  return {\n    width: contentBounds.width - doublePadding,\n    height: contentBounds.height - doublePadding\n  };\n}\n\nexport { measureHtmlText };\n//# sourceMappingURL=measureHtmlText.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { RendererType } from '../../rendering/renderers/types.mjs';\nimport { isSafari } from '../../utils/browser/isSafari.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource.mjs';\nimport { HTMLTextRenderData } from './HTMLTextRenderData.mjs';\nimport { HTMLTextStyle } from './HTMLTextStyle.mjs';\nimport { extractFontFamilies } from './utils/extractFontFamilies.mjs';\nimport { getFontCss } from './utils/getFontCss.mjs';\nimport { getSVGUrl } from './utils/getSVGUrl.mjs';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage.mjs';\nimport { loadSVGImage } from './utils/loadSVGImage.mjs';\nimport { measureHtmlText } from './utils/measureHtmlText.mjs';\n\n\"use strict\";\nclass HTMLTextSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n    this._createCanvas = renderer.type === RendererType.WEBGPU;\n  }\n  /**\n   * @param options\n   * @deprecated Use getTexturePromise instead\n   */\n  getTexture(options) {\n    return this.getTexturePromise(options);\n  }\n  getTexturePromise(options) {\n    return this._buildTexturePromise(options);\n  }\n  async _buildTexturePromise(options) {\n    const { text, style, resolution, textureStyle } = options;\n    const htmlTextData = BigPool.get(HTMLTextRenderData);\n    const fontFamilies = extractFontFamilies(text, style);\n    const fontCSS = await getFontCss(\n      fontFamilies,\n      style,\n      HTMLTextStyle.defaultTextStyle\n    );\n    const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n    const width = Math.ceil(Math.ceil(Math.max(1, measured.width) + style.padding * 2) * resolution);\n    const height = Math.ceil(Math.ceil(Math.max(1, measured.height) + style.padding * 2) * resolution);\n    const image = htmlTextData.image;\n    const uvSafeOffset = 2;\n    image.width = (width | 0) + uvSafeOffset;\n    image.height = (height | 0) + uvSafeOffset;\n    const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n    await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n    const resource = image;\n    let canvasAndContext;\n    if (this._createCanvas) {\n      canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n    }\n    const texture = getPo2TextureFromSource(\n      canvasAndContext ? canvasAndContext.canvas : resource,\n      image.width - uvSafeOffset,\n      image.height - uvSafeOffset,\n      resolution\n    );\n    if (textureStyle)\n      texture.source.style = textureStyle;\n    if (this._createCanvas) {\n      this._renderer.texture.initSource(texture.source);\n      CanvasPool.returnCanvasAndContext(canvasAndContext);\n    }\n    BigPool.return(htmlTextData);\n    return texture;\n  }\n  returnTexturePromise(texturePromise) {\n    texturePromise.then((texture) => {\n      this._cleanUp(texture);\n    }).catch(() => {\n      warn(\"HTMLTextSystem: Failed to clean texture\");\n    });\n  }\n  _cleanUp(texture) {\n    TexturePool.returnTexture(texture, true);\n    texture.source.resource = null;\n    texture.source.uploadMethodId = \"unknown\";\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nHTMLTextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"htmlText\"\n};\n\nexport { HTMLTextSystem };\n//# sourceMappingURL=HTMLTextSystem.mjs.map\n","\"use strict\";\nfunction extractFontFamilies(text, style) {\n  const fontFamily = style.fontFamily;\n  const fontFamilies = [];\n  const dedupe = {};\n  const regex = /font-family:([^;\"\\s]+)/g;\n  const matches = text.match(regex);\n  function addFontFamily(fontFamily2) {\n    if (!dedupe[fontFamily2]) {\n      fontFamilies.push(fontFamily2);\n      dedupe[fontFamily2] = true;\n    }\n  }\n  if (Array.isArray(fontFamily)) {\n    for (let i = 0; i < fontFamily.length; i++) {\n      addFontFamily(fontFamily[i]);\n    }\n  } else {\n    addFontFamily(fontFamily);\n  }\n  if (matches) {\n    matches.forEach((match) => {\n      const fontFamily2 = match.split(\":\")[1].trim();\n      addFontFamily(fontFamily2);\n    });\n  }\n  for (const i in style.tagStyles) {\n    const fontFamily2 = style.tagStyles[i].fontFamily;\n    addFontFamily(fontFamily2);\n  }\n  return fontFamilies;\n}\n\nexport { extractFontFamilies };\n//# sourceMappingURL=extractFontFamilies.mjs.map\n","\"use strict\";\nfunction getSVGUrl(text, style, resolution, fontCSS, htmlTextData) {\n  const { domElement, styleElement, svgRoot } = htmlTextData;\n  domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n  domElement.setAttribute(\"style\", `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n  styleElement.textContent = fontCSS;\n  const { width, height } = htmlTextData.image;\n  svgRoot.setAttribute(\"width\", width.toString());\n  svgRoot.setAttribute(\"height\", height.toString());\n  return new XMLSerializer().serializeToString(svgRoot);\n}\n\nexport { getSVGUrl };\n//# sourceMappingURL=getSVGUrl.mjs.map\n","\"use strict\";\nfunction loadSVGImage(image, url, delay) {\n  return new Promise(async (resolve) => {\n    if (delay) {\n      await new Promise((resolve2) => setTimeout(resolve2, 100));\n    }\n    image.onload = () => {\n      resolve();\n    };\n    image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n    image.crossOrigin = \"anonymous\";\n  });\n}\n\nexport { loadSVGImage };\n//# sourceMappingURL=loadSVGImage.mjs.map\n","import { DOMAdapter } from '../../environment/adapter.mjs';\n\n\"use strict\";\nfunction isSafari() {\n  const { userAgent } = DOMAdapter.get().getNavigator();\n  return /^((?!chrome|android).)*safari/i.test(userAgent);\n}\n\nexport { isSafari };\n//# sourceMappingURL=isSafari.mjs.map\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool.mjs';\n\n\"use strict\";\nfunction getTemporaryCanvasFromImage(image, resolution) {\n  const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n    image.width,\n    image.height,\n    resolution\n  );\n  const { context } = canvasAndContext;\n  context.clearRect(0, 0, image.width, image.height);\n  context.drawImage(image, 0, 0);\n  return canvasAndContext;\n}\n\nexport { getTemporaryCanvasFromImage };\n//# sourceMappingURL=getTemporaryCanvasFromImage.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { HTMLTextPipe } from './HTMLTextPipe.mjs';\nimport { HTMLTextSystem } from './HTMLTextSystem.mjs';\n\n\"use strict\";\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["localUniformMSDFBit","name","vertex","header","main","end","fragment","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","gpuProgram","glProgram","SdfShader","Shader","constructor","maxTextures","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uDistance","uRound","bits","colorBit","generateTextureBatchBit","roundPixelsBit","super","resources","localUniforms","batchSamplers","getBatchSamplersUniformGroup","AbstractBitmapFont","arguments","this","chars","Object","create","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","range","pages","applyFillAsTint","baseMeasurementFontSize","baseRenderedFontSize","font","deprecation","pageTextures","size","distanceFieldRange","distanceFieldType","destroy","destroyTextures","emit","removeAllListeners","i","texture","forEach","page","_DynamicBitmapFont","options","resolution","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentMaxCharHeight","_currentPageIndex","_skipKerning","dynamicOptions","defaultOptions","_textureSize","textureSize","_mipmap","mipmap","style","clone","overrideFill","_fill","color","alpha","Texture","WHITE","fill","requestedFontSize","fontStringFromTextStyle","overrideSize","_stroke","width","_style","skipKerning","padding","textureStyle","_textureStyle","TextureStyle","CanvasTextMetrics","measureFont","ensureCharacters","charList","graphemeSegmenter","filter","char","includes","index","self","indexOf","length","pageData","_nextPage","canvas","context","canvasAndContext","textureSource","source","currentX","currentY","currentMaxCharHeight","fontScale","skipTexture","maxTextureWidth","maxTextureHeight","height","metrics","measureText","paddedWidth","Math","ceil","fontStyle","paddedHeight","max","update","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","frame","Rectangle","_applyKerning","newChars","measureCache","first","j","second","c1","c2","total","amount","textureResolution","CanvasPool","getOptimalCanvasAndContext","_setupContext","ImageSource","resource","alphaMode","autoGenerateMipmaps","scale","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","join","miterLimit","strokeStyle","getCanvasFillStyle","fillStyle","shadowOptions","rgb","Color","shared","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","x","y","text","fontProperties","tx","ty","removeShadow","strokeText","fillText","returnCanvasAndContext","TextStyle","DynamicBitmapFont","getBitmapTextLayout","trimEnd","layoutData","offsetY","lines","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","start","positions","nextWord","word","position","push","nextLine","lastChar","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","breakWords","wordWrap","checkIsOverflow","isEnd","charData","test","nextCharWidth","align","measurementData","line","offset","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","fontCount","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","getFont","fontFamilyKey","styleKey","key","substring","lastIndexOf","Cache","has","fnt","warn","once","remove","set","dynamicFont","get","getLayout","bitmapFont","install","args","Error","textStyle","flatChars","result","item","Array","isArray","startCode","charCodeAt","endCode","i2","j2","String","fromCharCode","from","resolveCharacters","uninstall","cacheKey","BitmapTextGraphics","Graphics","customShader","BitmapTextPipe","renderer","_renderer","renderableGC","addManagedHash","validateRenderable","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","renderPipes","graphics","addRenderable","instructionSet","syncWithProxy","_updateDistanceField","updateRenderable","proxyGraphics","clear","limits","maxBatchableTextures","bitmapTextLayout","translate","_anchor","_x","_y","tint","round","_gpuData","uid","initGpuText","proxyRenderable","a","b","c","d","groupTransform","dx","sqrt","dy","worldScale","abs","container","proxy","groupColorAlpha","groupColor","groupBlendMode","globalDisplayStatus","localDisplayStatus","groupAlpha","_roundPixels","extension","WebGLPipes","WebGPUPipes","CanvasPipes","add","genericFontFamilies","fontSizeString","fontFamilies","split","trim","fontVariant","fontWeight","localUniformBit","localUniformBitGroup2","replace","localUniformBitGl","updateTextBounds","batchableSprite","bounds","_getFinalPadding","paddingOffset","paddingOffsetY","minX","minY","maxX","maxY","tempBounds","getPo2TextureFromSource","image","getOptimalTexture","uploadMethodId","updateUvs","color32BitToUniform","abgr","out","PRECISION","textMetrics","setAlpha","toHexa","pattern","createPattern","tempMatrix","matrix","copyTo","setTransform","fillPattern","transform","fillGradient","isLinear","isLocal","textureSpace","gradient","isNearlyVertical","createLinearGradient","center","innerRadius","outerCenter","outerRadius","createRadialGradient","ratio","colorStops","stop","globalStop","addColorStop","floor","toHex","contextSettings","willReadFrequently","_CanvasTextMetrics","experimentalLetterSpacingSupported","_experimentalLetterSpacingSupported","proto","getCanvasRenderingContext2D","prototype","lineWidths","maxLineWidth","_canvas","__context","_wordWrap","_measureText","strokeWidth","leading","useExperimentalLetterSpacing","experimentalLetterSpacing","textLetterSpacing","metricWidth","actualBoundingBoxLeft","boundsWidth","actualBoundingBoxRight","val","getContext","cache","whiteSpace","collapseSpaces","_collapseSpaces","collapseNewlines","_collapseNewlines","canPrependSpaces","tokens","_tokenize","token","_isNewline","_addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","_getFromCache","canBreakWords","characters","wordWrapSplit","k","nextChar","canBreakChars","characterWidth","isLastToken","newLine","_trimRight","slice","_newlines","_nextChar","_breakingSpaces","_token","_char","_index","_breakWords","_fonts","_context","METRICS_STRING","BASELINE_SYMBOL","properties","actualBoundingBoxAscent","actualBoundingBoxDescent","clearMetrics","__canvas","OffscreenCanvas","createCanvas","_cx","BASELINE_MULTIPLIER","HEIGHT_MULTIPLIER","Intl","Segmenter","segmenter","s","segments","segment","ResizePlugin","init","defineProperty","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","window","innerWidth","innerHeight","clientWidth","clientHeight","render","resizeTo","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","LOW","Ticker","oldTicker","FilterPipe","filterEffect","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","quadGeometry","Geometry","attributes","aPosition","buffer","format","stride","indexBuffer","Uint32Array","FilterData","skip","inputTexture","backTexture","filters","Bounds","blendRequired","outputRenderSurface","globalFrame","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","uInputSize","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","filterData","_pushFilterData","renderTarget","renderSurface","colorTextureSource","colorTexture","rootResolution","rootAntialias","antialias","_calculateFilterArea","_calculateFilterBounds","rootViewPort","previousFilterData","_getPreviousFilterData","globalResolution","_findFilterResolution","offsetX","_calculateGlobalFrame","_setupFilterTextures","generateFilteredTexture","addRect","rectangle","TexturePool","EMPTY","finishRenderPass","_applyFiltersToTexture","outputTexture","_popFilterData","globalUniforms","returnTexture","getBackTexture","lastRenderSurface","previousBounds","backgroundResolution","_resolution","copyToTexture","applyFilter","input","output","isFinalTarget","rootRenderTarget","_findPreviousFilterOffset","_updateFilterUniforms","_setupBindGroupsAndRender","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","worldTransform","renderGroup","parentRenderGroup","cacheToLocalTransform","prepend","invert","anchor","uniformBatch","batchUniforms","getUboResource","setResource","groups","encoder","draw","geometry","shader","state","_state","topology","WEBGL","getRenderTarget","bind","sourceWidth","sourceHeight","outputFrame","inputSize","inputPixel","inputClamp","pixelWidth","pixelHeight","rootTexture","isRoot","currentIndex","lastIndex","prevFilterData","renderables","renderable","addBounds","getGlobalRenderableBounds","filterArea","applyMatrix","getFastGlobalBounds","filterFrameTransform","apply","flip","tempTexture","flop","t","viewPort","paddingMultiplier","Infinity","enabled","clipToViewport","min","compatibleRenderers","backBuffer","useBackBuffer","fitBounds","pad","isPositive","WebGLSystem","WebGPUSystem","_MeshGeometry","uvs","indices","shrinkToFit","shrinkBuffersToFit","label","usage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","BatchableText","BatchableSprite","runners","resolutionChange","_autoResolution","onViewUpdate","canvasText","CanvasTextPipe","batchableText","_getGpuText","_updateGpuText","addToBatch","_batcher","updateElement","getTexture","roundPixels","_internalCanvas","_internalContext","checkRow","checkColumn","top","bottom","getCanvasBoundingBox","globalCompositeOperation","globalAlpha","ensureInternalCanvas","TypeError","drawImage","getImageData","left","right","strokeRect","tempRect","CanvasTextGenerator","getCanvasAndContext","measured","_renderTextToCanvas","resetTransform","lineCap","cap","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","dropShadowColor","dropShadowAlpha","toRgbaString","padding2","alignment","linePositionYShift","_drawLetterSpacing","isStroke","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","CanvasTextSystem","_textKey","toString","copyFrom","filteredTexture","_applyFilters","initSource","renderTextToCanvas","currentRenderTarget","resultTexture","CanvasSystem","MeshGpuData","MeshPipe","adaptor","localUniformsBindGroup","_adaptor","mesh","meshData","_getMeshData","wasBatched","batched","isBatched","_geometry","indexSize","vertexSize","batchableMesh","_getBatchableMesh","_texture","_textureMatrixUpdateId","checkAndUpdateTexture","batcher","gpuBatchableMesh","setTexture","isRenderable","blendMode","getAdjustedBlendModeBlend","_a","_b","_initMeshData","_initBatchableMesh","gpuMesh","BatchableMesh","_PlaneGeometry","verticesX","verticesY","build","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","getBuffer","_uvw","_uvh","NineSliceGeometry","NineSliceSpriteGpuData","NineSliceSpritePipe","gpuSprite","_getGpuSprite","didViewUpdate","_updateBatchableSprite","_initGPUSprite","gpuData","blendModeIds","normal","multiply","screen","overlay","erase","_State","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","for2d","default2d","State","canvasOptions","_canvasPool","enableFullScreen","_createCanvasAndContext","minWidth","minHeight","clearRect","batcherName","attributeSize","packAsQuad","_attributeStart","_batch","reset","tilingBit","tilingBitGl","TilingSpriteShader","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTexture","uSampler","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","textureMatrix","mapCoord","QuadGeometry","sharedQuad","TilingSpriteGpuData","canBatch","TilingSpritePipe","tilingSpriteData","_getTilingSpriteData","couldBatch","_updateCanBatch","tilingSprite","_updateBatchableMesh","bindGroup","_tileTransform","_initTilingSpriteData","renderableData","addressMode","applyAnchorToTexture","array","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isSimple","isPowerOfTwo","indexOffset","attributeOffset","_uvUpdateId","_topology","uvBuffer","transformedUvs","_transformedUvs","_updateID","multiplyUvs","GraphicsGpuData","batches","return","GraphicsPipe","contextChange","gpuContext","graphicsContext","updateGpuContext","isBatchable","_rebuild","_addToBatcher","_getGpuDataForRenderable","getGpuContext","_updateBatchesForRenderable","batchPipe","_initGpuDataForRenderable","map","batchClone","BatchableGraphics","GraphicsContextSystem","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","gl","getBuffers","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","outBuffer","totalIndices","Uint16Array","generateUpdateFunction","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","unshift","functionSource","Function","ParticleBuffer","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","Buffer","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","wgsl","ParticleShader","GlProgram","GpuProgram","entryPoint","uTranslationMatrix","uResolution","ParticleContainerPipe","_renderable","_initBuffer","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","valuesToIterateForKeys","addFillStyleKey","_TextStyle","oldStyle","defaults","defaultDropShadow","dropShadowAngle","obj","isColorLike","FillGradient","FillPattern","hasOwnProperty","call","fillGradientStops","defaultTextStyle","parseInt","gradientFill","fills","toNumber","number","convertV7Tov8Style","fullStyle","_align","_dropShadow","_createProxy","_fontFamily","_fontSize","_fontStyle","toLowerCase","_fontVariant","_fontWeight","_leading","_letterSpacing","_lineHeight","_filters","_trim","_textBaseline","_whiteSpace","_wordWrapWidth","_originalFill","_isFillStyle","GraphicsContext","defaultFillStyle","_originalStroke","defaultStrokeStyle","_generateKey","_styleKey","prop","addStokeStyleKey","addDropShadowKey","addFiltersKey","generateTextStyleKey","defaultStyle","filterPadding","destroyTextureSource","cb","Proxy","target","newValue","PI","BatchableHTMLText","generatingTexture","htmlText","returnTexturePromise","texturePromise","HTMLTextPipe","batchableHTMLText","catch","e","console","error","getTexturePromise","structureDidChange","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","Image","setAttribute","overflow","appendChild","dropShadowToCSS","dropShadowStyle","strokeToCSS","templates","HTMLTextStyle","_cssOverrides","cssOverrides","tagStyles","_cssStyle","cssStyle","cssStyles","tagStyle","cssTagStyle","tagStyleToCSS","textStyleToCSS","addOverride","toAdd","v","removeOverride","toRemove","async","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_createCanvas","WEBGPU","_buildTexturePromise","htmlTextData","dedupe","matches","match","addFontFamily","fontFamily2","extractFontFamilies","fontCSS","fontPromises","all","getFontCss","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","getTemporaryCanvasFromImage","then","_cleanUp"],"sourceRoot":""}